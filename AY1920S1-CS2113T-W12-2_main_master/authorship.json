[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027 //for documentation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027 //shadowJar for pack up an executable file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027 //javaFx for rendering"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    testImplementation \u0027org.hamcrest:hamcrest-library:2.1\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    testCompile \"org.testfx:testfx-core:4.0.16-alpha\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    testCompile \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    testCompile \"org.testfx:testfx-junit5:4.0.16-alpha\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    version \u003d \u002712\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    archiveBaseName \u003d \"FG\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    archiveVersion \u003d \"v1.4\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//sourceSets {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    main {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        resources {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//            srcDirs \u003d [\u0027src/main/java/\u0027]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "//}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    mainClassName \u003d \"controlpanel.Launcher\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 3,
      "chengweixuan": 2,
      "cctt1014": 3,
      "-": 35,
      "therealnickcheong": 31
    }
  },
  {
    "path": "src/main/java/controlpanel/DataTransfer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import guicontroller.CircleChart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import guicontroller.Histogram;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public interface DataTransfer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    int NUMBER_OF_MONTHS \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    enum Type {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        HISTOGRAM, LINE_GRAPH, PIE_CHART"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function gets the data of the current month\u0027s income and expenditure"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * from the account then passes the data to getHistogram method and return the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * histogram it gets from getHistogram."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class contains all the user\u0027s data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param type The chosen graph provided by the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The graph chosen by the user for the monthly report"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static HBox getMonthlyData(Account account, String type) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e dataX \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        dataX.add(\"Income\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        dataX.add(\"Expenditure\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e dataY \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        dataY.add(account.getTotalIncome());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        dataY.add(account.getTotalExp());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (type.equals(\"PIE_CHART\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return CircleChart.getCircleChart(\"Monthly Data\", dataX, dataY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (type.equals(\"LINE_GRAPH\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return guicontroller.LineGraph.getLineGraph(\"Monthly Data\", dataX, dataY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return Histogram.getHistogram(\"Monthly Data\", dataX, dataY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function helps to get the data about the user\u0027s expenditure category trend"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * from class Account, then transfer it to the specific getter to get the graph given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * by the user. Finally, the getter will returns the graph."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class contains all the user\u0027s data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param type The chosen graph provided by the user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The chosen graph with the expenditure category trend information"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static HBox getExpenditureTrend(Account account, String type) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cExpenditure\u003e expList \u003d account.getExpListTotal();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e dataX \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e dataY \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Expenditure e : expList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (dataX.contains(e.getCategory())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                int index \u003d dataX.indexOf(e.getCategory());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                dataY.set(index, dataY.get(index) + e.getPrice());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                dataX.add(e.getCategory());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                dataY.add(e.getPrice());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (type.equals(\"PIE_CHART\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return CircleChart.getCircleChart(\"Overall Expenditure Trend\", dataX, dataY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (type.equals(\"HISTOGRAM\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return Histogram.getHistogram(\"Overall Expenditure Trend\", dataX, dataY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return guicontroller.LineGraph.getLineGraph(\"Overall Expenditure Trend\", dataX, dataY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function helps to get the data about the user\u0027s income category trend"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * from class Account, then transfer it to the specific getter to get the graph given"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * by the user. Finally, the getter will returns the graph."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class contains all the user\u0027s data"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param type The chosen graph provided by the user"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The chosen graph with the income category trend information"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static HBox getIncomeTrend(Account account, String type) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cIncome\u003e incomeList \u003d account.getIncomeListTotal();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e dataX \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e dataY \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Income e : incomeList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (dataX.contains(e.getDescription())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                int index \u003d dataX.indexOf(e.getDescription());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                dataY.set(index, dataY.get(index) + e.getPrice());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                dataX.add(e.getDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                dataY.add(e.getPrice());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (type.equals(\"PIE_CHART\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return CircleChart.getCircleChart(\"Overall Income Trend\", dataX, dataY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (type.equals(\"HISTOGRAM\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return Histogram.getHistogram(\"Overall Income Trend\", dataX, dataY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return guicontroller.LineGraph.getLineGraph(\"Overall Income Trend\", dataX, dataY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function helps to get the data about the user\u0027s 3-month income and expenditure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * information until the given date from class Account, then transfer it to the specific getter"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * to get the 2-series histogram. Finally, the getter will returns the histogram."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class contains all the user\u0027s data"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param endDate The given end date for the financial status report"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return A histogram with the income and expenditure"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    static Histogram getCurrFinance(Account account, LocalDate endDate) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cIncome\u003e incomeList \u003d account.getIncomeListTotal();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        final ArrayList\u003cExpenditure\u003e expList \u003d account.getExpListTotal();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cString\u003e dataX \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e dataY1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cFloat\u003e dataY2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LocalDate[] dateList \u003d new LocalDate[NUMBER_OF_MONTHS + 1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d NUMBER_OF_MONTHS; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            dateList[i] \u003d endDate.minusMonths(NUMBER_OF_MONTHS - i);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d NUMBER_OF_MONTHS - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            dataX.add(String.valueOf(endDate.minusMonths(i).getMonthValue()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            dataY1.add((float) 0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            dataY2.add((float) 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Income e : incomeList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            for (int i \u003d NUMBER_OF_MONTHS - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                if (e.getPayday().isBefore(endDate) \u0026\u0026 e.getPayday().isAfter(dateList[i])) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    dataY1.set(i, dataY1.get(i) + e.getPrice());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (Expenditure e : expList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            for (int i \u003d NUMBER_OF_MONTHS - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                if (e.getDateBoughtDate().isBefore(endDate) \u0026\u0026 e.getDateBoughtDate().isAfter(dateList[i])) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    dataY2.set(i, dataY2.get(i) + e.getPrice());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return Histogram.getTwoSeriesHistogram(\"Current Financial Status\", dataX, dataY1, dataY2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 157
    }
  },
  {
    "path": "src/main/java/controlpanel/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A self defined exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * A default constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor to throw the errors."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param errorMsg The error message sent from the faulty object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 2,
      "cctt1014": 18,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/controlpanel/FG.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import moneycommands.AutoUpdateInstalmentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * The main class which controls the overall flow, run the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class FG {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private UndoCommandHandler undoCommandHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * controlpanel.Duke class acts as a constructor to initialize and setup"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * //@param filePath the path of the moneyAccount.txt which contains the finance of the users"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public FG() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path moneyDir \u003d Paths.get(\"dataFG/moneyAccount.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String moneyFilePath \u003d moneyDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(moneyFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        undoCommandHandler \u003d new UndoCommandHandler();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account \u003d new Account(moneyStorage.load());//need to load from storage on program init"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            account \u003d new Account();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method prints a line that controlpanel.Duke will print out in the program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return a line that the program will print out in response to a user\u0027s commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String[] getResponse(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.clearOutputString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showLine());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            boolean isNewUser \u003d account.isToInitialize();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            MoneyCommand updateCommand \u003d new AutoUpdateInstalmentCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            updateCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            MoneyCommand c \u003d Parser.moneyParse(input, isNewUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                moneyStorage.writeToFile(account);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            } else if (!c.getClass().equals(UndoCommand.class)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                c.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                undoCommandHandler.updateLastIssuedCommands(c);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                c \u003d undoCommandHandler.getLastIssuedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                c.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.clearOutputString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return new String[]{ui.getOutputString(), ui.getGraphContainerString()};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(ui.showLine());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return new String[]{ui.getOutputString(), ui.getGraphContainerString()};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 21,
      "ChenChao19": 6,
      "cctt1014": 29,
      "-": 2,
      "therealnickcheong": 27
    }
  },
  {
    "path": "src/main/java/controlpanel/GraphSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class GraphSelector implements DataTransfer {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public GraphSelector() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method handles the graph related command to get the graph"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * with required data in the specific patter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param input The input string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class contains all the user\u0027s data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The desired graph with the data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws ParseException The parse exception"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public HBox getTheGraph(String input, Account account) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (input.startsWith(\"graph monthly report\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (input.equals(\"graph monthly report\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                return DataTransfer.getMonthlyData(account, \"HISTOGRAM\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            input \u003d input.replaceFirst(\"graph monthly report \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return DataTransfer.getMonthlyData(account, input.toUpperCase());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (input.startsWith(\"graph expenditure trend\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (input.equals(\"graph expenditure trend\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                return DataTransfer.getExpenditureTrend(account, \"LINE_GRAPH\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            input \u003d input.replaceFirst(\"graph expenditure trend \", \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return DataTransfer.getExpenditureTrend(account, input.toUpperCase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (input.startsWith(\"graph income trend\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (input.equals(\"graph income trend\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                return DataTransfer.getIncomeTrend(account, \"LINE_GRAPH\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            input \u003d input.replaceFirst(\"graph income trend \", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return DataTransfer.getIncomeTrend(account, input.toUpperCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (input.startsWith(\"graph finance status /until\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                String dateString \u003d input.split(\" /until \")[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                return  DataTransfer.getCurrFinance(account, Parser.shortcutTime(dateString));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 56
    }
  },
  {
    "path": "src/main/java/controlpanel/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 2,
      "therealnickcheong": 11
    }
  },
  {
    "path": "src/main/java/controlpanel/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import guicontroller.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * A GUI for controlpanel.Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private FG financialGhost \u003d new FG();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.setTitle(\"Financial Ghost\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setFG(financialGhost);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 7,
      "therealnickcheong": 29
    }
  },
  {
    "path": "src/main/java/controlpanel/MoneyStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class MoneyStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private static Stack\u003cItem\u003e deletedEntries;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private static Stack\u003cBankTracker\u003e deletedBanks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor for the MoneyStorage Object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param filePath FilePath of the data text file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public MoneyStorage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        fileName \u003d filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deletedEntries \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deletedBanks \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Adds an Income object to the Income List Total according to the data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the text file on start up."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param info String array containing the information of the Income Object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void parseIncome(String[] info, Account account) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i \u003d new Income(Float.parseFloat(info[1]), info[2],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                LocalDate.parse(info[3], dateTimeFormatter));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Adds an Expenditure object to the Expenditure List Total according to the data"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the text file on start up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param info String array containing the information of the Expenditure Object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void parseExpenditure(String[] info, Account account) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure exp \u003d new Expenditure(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                LocalDate.parse(info[4], dateTimeFormatter));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(exp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Adds a Goal object to the Goal list according to the data"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the text file on start up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param info String array containing the information of the Goal Object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void parseGoal(String[] info, Account account) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Goal g \u003d new Goal(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                LocalDate.parse(info[4], dateTimeFormatter), info[5]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Adds an Instalment object to the Instalments List according to the data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the text file on start up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param info String array containing the information of the Instalment Object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void parseInstalment(String[] info, Account account) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Instalment ins \u003d new Instalment(Float.parseFloat(info[1]), info[2], info[3],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                LocalDate.parse(info[4], dateTimeFormatter), Integer.parseInt(info[5]),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Float.parseFloat(info[6]) * 100);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getInstalments().add(ins);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Adds a Loan object to the Loan List according to the data"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the text file on start up."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param info String array containing the information of the Loan Object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void parseLoan(String[] info, Account account) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan l \u003d new Loan(Float.parseFloat(info[1]), info[2],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                LocalDate.parse(info[3], dateTimeFormatter),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Loan.Type.ALL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        l.updateExistingLoan(info[4], info[5], Integer.parseInt(info[6]), Float.parseFloat(info[7]));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(l);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Adds a BankTracker object to the Bank Tracker List according to the data"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the text file on start up."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param info String array containing the information of the BankTracker Object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void parseBankAccount(String[] info, Account account) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        BankTracker b \u003d new BankTracker(info[2], Float.parseFloat(info[1]), LocalDate.parse(info[3]),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Double.parseDouble(info[4]));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getBankTrackerList().add(b);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method loads the information from the data file into the system."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return the account of the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws IOException if the program cannot read the data file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Account load() throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Account account \u003d new Account();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            FileReader fileReader \u003d new FileReader(fileName);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                //if (line.contains(\"#\")) { continue; }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                String[] info \u003d line.split(\" @ \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                switch (info[0]) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"INIT\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    account.setToInitialize(Boolean.parseBoolean(info[1]));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"BS\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    account.setBaseSavings(Float.parseFloat((info[1])));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"INC\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    parseIncome(info, account);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"EXP\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    parseExpenditure(info, account);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"G\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    parseGoal(info, account);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"INS\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    parseInstalment(info, account);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"LOA\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    parseLoan(info, account);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                case \"BAN\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    parseBankAccount(info, account);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    throw new DukeException(\"OOPS!! Your file has been corrupted/ input file is invalid!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final File parentDir \u003d new File(\"dataFG\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            parentDir.mkdir();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final String hash \u003d \"moneyAccount\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final String fileName \u003d hash + \".txt\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            final File file \u003d new File(parentDir, fileName);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (IOException | DateTimeParseException | DukeException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * methods to write the different types of items into the data file."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param i item to be written."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeIncome(Income i, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"INC @ \" + i.getPrice() + \" @ \" + i.getDescription()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                +  \" @ \" + i.getPaidTime() + \"\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param exp item to be written."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeExp(Expenditure exp, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"EXP @ \" + exp.getPrice() + \" @ \" + exp.getDescription() + \" @ \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + exp.getCategory() + \" @ \" + exp.getBoughtDate() + \"\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param g item to be written."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeGoal(Goal g, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"G @ \" + g.getPrice() + \" @ \" + g.getDescription() + \" @ \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + g.getCategory() + \" @ \" + g.getGoalBy() + \" @ \" + g.getPriority() + \"\\n\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "      * @param ins item to be written."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeInstalment(Instalment ins, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"INS @ \" + ins.getPrice() + \" @ \" + ins.getDescription() + \" @ \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + ins.getCategory() + \" @ \" + ins.getBoughtDate() + \" @ \" + ins.getNumOfPayments() + \" @ \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + ins.getAnnualInterestRate() + \"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param l item to be written."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeLoan(Loan l, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"LOA @ \" + l.getPrice() + \" @ \" + l.getDescription()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" @ \" + l.getStartDate() + \" @ \" + l.getType().toString() + \" @ \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + l.getEndDate() + \" @ \" + l.getStatusInt() + \" @ \" + l.getOutstandingLoan() + \"\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param b item to be written."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeBank(BankTracker b, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"BAN @ \" + b.getAmt() + \" @ \" + b.getDescription()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \" @ \" + b.getLatestDate().toString() + \" @ \" + b.getRate() + \"\\n\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param account item to be written."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeInit(Account account, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"INIT @ \" + account.isToInitialize() + \"\\n\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to write the different types of items into the data file."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param account item to be written."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param bufferedWriter used to write into the data file."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws IOException if there is an error writing to data file."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeBaseSavings(Account account, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        bufferedWriter.write(\"BS @ \" + account.getBaseSavings() + \"\\n\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to write the items into the data file."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param account items from this account is written into the data file."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void writeToFile(Account account) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            bufferedWriter.write(\"\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            writeInit(account, bufferedWriter);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            writeBaseSavings(account,bufferedWriter);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                writeIncome(i, bufferedWriter);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Expenditure exp : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                writeExp(exp, bufferedWriter);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Goal g : account.getShortTermGoals()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                writeGoal(g, bufferedWriter);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Instalment ins : account.getInstalments()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                writeInstalment(ins, bufferedWriter);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (Loan l : account.getLoans()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                writeLoan(l,bufferedWriter);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (BankTracker b : account.getBankTrackerList()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                writeBank(b,bufferedWriter);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * method that adds a deleted entry of type Item into the stack of deleted entries."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @param item deleted by a recent delete command."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void addDeletedEntry(Item item) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deletedEntries.push(item);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntries.size() \u003e 5) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            deletedEntries.removeElementAt(0);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * returns the most recently deleted entry of type Item when the undo command is called."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return most recent item deleted in the program."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public Item getDeletedEntry() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item item \u003d deletedEntries.lastElement();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deletedEntries.pop();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * method that adds a deleted entry of type BankTracker into a stack of BankTrackers."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @param bankTracker deleted by a recent DeleteBankAccountCommand that was called."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void addDeletedBank(BankTracker bankTracker) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deletedBanks.push(bankTracker);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedBanks.size() \u003e 5) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            deletedBanks.removeElementAt(0);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * returns the most recently deleted BankTracker when the undo command is called."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return most recent BankTracker deleted in the program."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public BankTracker getDeletedBankTracker() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        BankTracker bt \u003d deletedBanks.lastElement();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deletedBanks.pop();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return bt;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 65,
      "ChenChao19": 18,
      "chengweixuan": 138,
      "therealnickcheong": 134
    }
  },
  {
    "path": "src/main/java/controlpanel/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddIncomeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddExpenditureCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.SettleLoanCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.AddGoalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.CreateBankAccountCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteGoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.InitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListBankTrackerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListGoalsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListTotalExpenditureCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListTotalIncomeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.StartCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.CommitGoalCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DoneGoalCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteBankAccountCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.GraphCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddInstalmentCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteInstalmentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListInstalmentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ViewPastExpenditureCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ViewPastIncomeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddLoanCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListLoansCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteLoanCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.CheckFutureBalanceCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.InternalTransferCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This class which takes in the user input from command line and identifies the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * correct command type. Calls the appropriate MoneyCommand from control panel"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Parser() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor which runs the parser to parse all commands."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param cmd Original input command from the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param isNewUser Boolean to identify if the user if a new or returning user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return MoneyCommand to be called according to the user commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException If the user input is invalid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static MoneyCommand moneyParse(String cmd, boolean isNewUser) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand moneyCommand \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (cmd.startsWith(\"start\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new StartCommand(isNewUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"init\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new InitCommand(cmd, isNewUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (isNewUser) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"You are a new user, \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"please type: init [existing savings] [Avg Monthly Expenditure]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"bank-account\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new CreateBankAccountCommand(cmd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.equals(\"list bank trackers\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new ListBankTrackerCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"check-balance \")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new CheckFutureBalanceCommand(cmd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"withdraw \") || cmd.startsWith(\"deposit\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new InternalTransferCommand(cmd);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"goal \")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddGoalCommand(cmd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list goals\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete goal\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteGoalCommand(cmd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"commit goal\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new CommitGoalCommand(cmd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"done goal\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DoneGoalCommand(cmd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"find#\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new FindCommand(cmd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"add income\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddIncomeCommand(cmd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"spent\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new AddExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list all income\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.equals(\"list all expenditure\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new ListTotalExpenditureCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete income\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteIncomeCommand(cmd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else if (cmd.startsWith(\"delete expenditure\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            moneyCommand \u003d new DeleteExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"delete bank-account\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new DeleteBankAccountCommand(cmd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"graph\") || cmd.equals(\"change icon\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            moneyCommand \u003d new GraphCommand(cmd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else if (cmd.startsWith(\"undo\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            moneyCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (cmd.startsWith(\"add instalment\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            moneyCommand \u003d new AddInstalmentCommand(cmd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (cmd.startsWith(\"delete instalment\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            moneyCommand \u003d new DeleteInstalmentCommand(cmd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (cmd.startsWith(\"list all instalment\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            moneyCommand \u003d new ListInstalmentCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.equals(\"list month income\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ViewPastIncomeCommand(\"list month\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.equals(\"list month expenditure\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ViewPastExpenditureCommand(\"list month\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"check income\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ViewPastIncomeCommand(cmd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"check expenditure\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ViewPastExpenditureCommand(cmd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"lent\") || cmd.startsWith(\"borrowed\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new AddLoanCommand(cmd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"list\") \u0026\u0026 cmd.contains(\"loans\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new ListLoansCommand(cmd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if ((cmd.startsWith(\"paid\")) || (cmd.startsWith(\"received\"))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new SettleLoanCommand(cmd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (cmd.startsWith(\"delete loan\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            moneyCommand \u003d new DeleteLoanCommand(cmd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return moneyCommand;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@ chengweixuan"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private static LocalDate parseCalToDate(Calendar cal) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Date parseDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate parseLocalDate \u003d parseDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String passDate \u003d dateTimeFormatter.format(parseLocalDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method checks if a String contains a numeric or non-numeric value."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param checkStr String to be checked"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return True if the String is  numeric, else returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public static boolean isNumeric(String checkStr) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            int i \u003d Integer.parseInt(checkStr);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (NullPointerException | NumberFormatException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Takes user input of date for add commands and checks for shortcut dates."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If shortcut is found, converts to the correct date according to shortcut."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the formatted Date from user inputted date."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param dateStr user input of date"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return formatted Date based on user inputted date"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public static LocalDate shortcutTime(String dateStr) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String time \u003d dateStr.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        final Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (time) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"now\": {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String passDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(passDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"ytd\": {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"tmr\": {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, +1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"lstwk\": {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, -7);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"nxtwk\": {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.DATE, +7);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"lstmth\": {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"nxtmth\": {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.MONTH, +1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"lstyr\": {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.YEAR, -1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"nxtyr\": {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            cal.add(Calendar.YEAR, +1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return parseCalToDate(cal);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return LocalDate.parse(dateStr, dateTimeFormatter);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "ChenChao19": 7,
      "chengweixuan": 143,
      "cctt1014": 21,
      "therealnickcheong": 42
    }
  },
  {
    "path": "src/main/java/controlpanel/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private static String outputString \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private static String graphContainerString \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String display \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            \" _______      __     __     _         _        __      _    _____    __       _           _\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|   _____/    |  |   |   \\\\   |  |       /_\\\\      |  \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"\\\\   |  |  |  ___|   |  |      /_\\\\        |  |    \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|  |____      |  |   |     \\\\|   |      /|  |\\\\     |    \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"\\\\|  |   | |        |  |     /|  |\\\\       |  |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|   ____/     |  |    |  \\\\  \\\\   |    /  |_|  \\\\   |  \\\\  \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"\\\\  |   | |        |  |    /  |_|  \\\\    |  |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|  |            |  |    |  | \\\\    |   |  |   |   |  |  | \\\\  \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|    | |__    |  |    | |    |  |    |  |___\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|_|             |_|    |_|   \\\\_|    |_|    |_|  |_|  \\\\_| \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"   |____|  |_|    |_|    |_|    |____|\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \" ______    _        _    ______      _____     _______\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|   ____|   | |    | |   |  ___  |    |  ___|    |__    __|                 .-\\\"\\\"\\\"\\\"-.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|  |   __    | |__|  |   | |    | |    | |___          | |                      / -   -  \\\\\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|  |  |_ |   |  __    |  | |     | |    |___  |        | |                      |  .-. .- |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|  |__| |   |  |   |  |  | |___|  |    ___|  |        | |                     |  \\\\o| |o(\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"|_____|    |_|   |_|   |______|    |____|        |_|                    \\\\     ^    \\\\\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                                                                          \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           |\u0027.  )--\u0027  /|\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"             .-.                                                            \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"       / / \u0027-. .-\u0027`\\\\ \\\\   \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           .\u0027   `.                                                              \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"  / /\u0027---` `---\u0027\\\\ \\\\\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           :g g   :                                                           \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"    \u0027.__.       .__.\u0027\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           : o    `.                                                      \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"             `|     |`\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           :         ``.                                          \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                      |     \\\\\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           :             `.                                       \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                      \\\\      \u0027--.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"          :  :         .   `.                                         \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                    \u0027.        `\\\\\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"          :   :          ` . `.                                     \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                        \u0027---.    |\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"           `.. :            `. ``;                                     \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                        ,__) /\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"             `:;             `:\u0027                                         \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                       `..\u0027\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"               :              `.               \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                `.              `.....        \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"                  `\u0027`\u0027`\u0027`---..,___`;.-\u0027         \\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * Constructor for the Ui class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        scanner \u003d new Scanner(System. in);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        graphContainerString \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        System.out.println(\"This is not a valid input from the file!!!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (\"ERROR: \" + message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void appendToOutput(String msg) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString +\u003d msg;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void clearOutputString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getGraphContainerString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return graphContainerString;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void clearGraphContainerString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        graphContainerString \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void appendToGraphContainer(String msg) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        graphContainerString +\u003d msg;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getLogo() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 46,
      "cctt1014": 41,
      "therealnickcheong": 20
    }
  },
  {
    "path": "src/main/java/controlpanel/UndoCommandHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * This class is in charge of storing and retrieving the last 5 commands issued to the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class UndoCommandHandler {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private static Stack\u003cMoneyCommand\u003e lastIssuedCommands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@ author Chianhaoplanks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * The constructor initializes the stack that is used to store previously issued commands to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public UndoCommandHandler() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        lastIssuedCommands \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * This method stores the last 5 commands issued to the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @param c MoneyCommand to be stored into stack of lastIssuedCommands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void updateLastIssuedCommands(MoneyCommand c) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        lastIssuedCommands.push(c);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (lastIssuedCommands.size() \u003e 5) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            lastIssuedCommands.remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * This method gets the last command issued to the program from the stack and pops it from the stack."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return the last MoneyCommand that was entered into the program"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @throws DukeException when there are no commands left in the stack"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public MoneyCommand getLastIssuedCommand() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (lastIssuedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"No commands to undo!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            MoneyCommand c \u003d lastIssuedCommands.lastElement();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            lastIssuedCommands.pop();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * This method gets the size of the stack."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     * @return size of the stack"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public int getLastIssuedCommandsSize() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return lastIssuedCommands.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 54,
      "ChenChao19": 1
    }
  },
  {
    "path": "src/main/java/guicontroller/CircleChart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicontroller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CircleChart extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private PieChart chart \u003d new PieChart();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private CircleChart(String title) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/CircleChart.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        chart.setTitle(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function packs the input data and the title into a pie chart and "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * returns the pie chart in order to show on the user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param title The title of the graph"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataX The data of the x coordinate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataY The data of the y coordinate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The pie chart with the input x,y data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static CircleChart getCircleChart(String title, ArrayList\u003cString\u003e dataX, ArrayList\u003cFloat\u003e dataY) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CircleChart circleChart \u003d new CircleChart(title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 0; i \u003c dataX.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            pieChartData.add(new PieChart.Data(dataX.get(i), dataY.get(i)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        circleChart.chart.setData(pieChartData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return circleChart;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 47
    }
  },
  {
    "path": "src/main/java/guicontroller/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicontroller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method give the GUI in the form of a Dialog Box."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param text string written on the GUI."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param img image show on the GUI."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return guicontroller.DialogBox a GUI to interact with the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 5,
      "therealnickcheong": 62
    }
  },
  {
    "path": "src/main/java/guicontroller/Histogram.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicontroller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class Histogram extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private CategoryAxis axisX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private NumberAxis axisY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private BarChart\u003cString, Number\u003e barChart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Histogram(String title, String nameX, String nameY) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Histogram.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        barChart.setTitle(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        axisX.setLabel(nameX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        axisY.setLabel(nameY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method receives and packs the input data into a one-series histogram and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * returns the histogram."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param title The title of the graph"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataX The data of the x coordinate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataY The data of the y coordinate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The one-series histogram with the input data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static Histogram getHistogram(String title, ArrayList\u003cString\u003e dataX, ArrayList\u003cFloat\u003e dataY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Histogram histogram \u003d new Histogram(title, \"Category\", \"Amount\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString,Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c dataY.size(); index++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(dataX.get(index), dataY.get(index)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        histogram.barChart.getData().add(series);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return histogram;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method receives and packs the input data into a two-series histogram and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * returns the histogram."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param title The title of the graph"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataX The data of the x coordinate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataY1 The data of the y coordinate in the first series"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataY2 The data of the y coordinate in the second series"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The two-series histogram with the input data"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static Histogram getTwoSeriesHistogram(String title, ArrayList\u003cString\u003e dataX, ArrayList\u003cFloat\u003e dataY1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                                                  ArrayList\u003cFloat\u003e dataY2) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        final Histogram histogram \u003d new Histogram(title, \"Month\", \"Amount\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series1 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series2 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c dataY1.size(); index++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series1.getData().add(new XYChart.Data\u003c\u003e(dataX.get(index), dataY1.get(index)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c dataY2.size(); index++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series2.getData().add(new XYChart.Data\u003c\u003e(dataX.get(index), dataY2.get(index)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        series1.setName(\"Income\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        series2.setName(\"Expenditure\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        histogram.barChart.getData().add(series1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        histogram.barChart.getData().add(series2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return histogram;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 82
    }
  },
  {
    "path": "src/main/java/guicontroller/LineGraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicontroller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class LineGraph extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private CategoryAxis axisX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private NumberAxis axisY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LineChart\u003cString, Number\u003e lineChart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LineGraph(String title) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/LineGraph.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        lineChart.setTitle(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        axisX.setLabel(\"Category\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        axisY.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This function produces a one-series line graph with the given parameter of data as the input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * It packs the data and the title into lineGraph variables then return it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param title The title of the graph"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataX The data of the x coordinate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param dataY The data of the y coordinate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The one-series line graph with the input x,y data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public static LineGraph getLineGraph(String title, ArrayList\u003cString\u003e dataX, ArrayList\u003cFloat\u003e dataY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LineGraph lineGraph \u003d new LineGraph(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        XYChart.Series\u003cString,Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int index \u003d 0; index \u003c dataY.size(); index++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(dataX.get(index), dataY.get(index)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        lineGraph.lineChart.getData().add(series);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return lineGraph;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 53
    }
  },
  {
    "path": "src/main/java/guicontroller/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicontroller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.FG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.GraphSelector;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import help.AutoComplete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import help.History;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.controlsfx.control.textfield.AutoCompletionBinding;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * Controller for guicontroller.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ScrollPane scrollPane2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public VBox graphContainer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private TextField searchBar;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private FG financialGhost;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private UserIcon userIcon;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private History previousFunctions \u003d new History();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * Initialises scroll bar and outputs controlpanel.Duke Welcome message on startup of GUI."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author {therealnickcheong}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void initialize() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        scrollPane2.vvalueProperty().bind(graphContainer.heightProperty());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        userIcon \u003d new UserIcon();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        userImage \u003d userIcon.getIcon();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                userInput.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This connects the respective containers with CLI duke."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param d the CLI duke"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setFG(FG d) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        financialGhost \u003d d;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String logo \u003d financialGhost.getUi().getLogo();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        boolean isNewUser \u003d financialGhost.getAccount().isToInitialize();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (isNewUser) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DialogBox.getDukeDialog(\"enter start to begin\", dukeImage));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    DialogBox.getDukeDialog(logo, dukeImage));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing controlpanel."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * Duke\u0027s reply and then appends them to."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void handleUserInput() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (input.equals(\"change icon\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            userIcon.changeIcon();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            userImage \u003d userIcon.getIcon();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String[] response \u003d financialGhost.getResponse(input);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                DialogBox.getDukeDialog(response[0], dukeImage)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (input.startsWith(\"graph\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            GraphSelector graphSelector \u003d new GraphSelector();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    graphSelector.getTheGraph(input, financialGhost.getAccount())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            );"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (!response[1].equals(\"\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    DialogBox.getDukeDialog(response[1], dukeImage));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        previousFunctions.addingCommandsEntered(userInput.getText());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        previousFunctions.setCurrIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private void handleSearchInput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String input \u003d searchBar.getText();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String[] response \u003d financialGhost.getResponse(\"find# \" + input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (!response[1].equals(\"\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                graphContainer.getChildren().clear();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                graphContainer.getChildren().addAll("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        DialogBox.getDukeDialog(response[1], dukeImage));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * AutoComplete function where the T extField userInput will be bind with an"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * auto completed list of commands."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private void autoCompleteFunction() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        AutoComplete autoComplete \u003d new AutoComplete();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        AutoCompletionBinding\u003cString\u003e suggestions \u003d TextFields.bindAutoCompletion(userInput, sc -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            TreeSet\u003cString\u003e suggestedCommands \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            for (String i: autoComplete.getCommandList()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                if (!sc.getUserText().isEmpty() \u0026\u0026 !i.equals(sc.getUserText())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        \u0026\u0026 i.startsWith(sc.getUserText())) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    suggestedCommands.add(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            return suggestedCommands;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        });"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        suggestions.setVisibleRowCount(4);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        suggestions.setPrefWidth(700);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Calls the autoCompleteFunction and overrides the handler of"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * some key events to memorise the history of the commands type"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * in by the user. Press up for previous commands typed in the Textfield"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * userInput and down for next commands."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private void help() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoCompleteFunction();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        userInput.setPromptText(\"Commands\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        userInput.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                if (ke.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    userInput.clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (previousFunctions.getMaxIndex() !\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        previousFunctions.setFlagTrue();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        userInput.appendText(previousFunctions.getPreviousCommand() + \"\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                } else if (ke.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    if (previousFunctions.getMaxIndex() !\u003d 0) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        if (previousFunctions.getCurrIndex() \u003d\u003d previousFunctions.getMaxIndex() - 1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            userInput.clear();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            previousFunctions.setFlagForFirstPress();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            userInput.clear();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            previousFunctions.setFlagFalse();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                            userInput.appendText(previousFunctions.getNextCommand() + \"\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        });"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 70,
      "chengweixuan": 1,
      "cctt1014": 54,
      "therealnickcheong": 74
    }
  },
  {
    "path": "src/main/java/guicontroller/UserIcon.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package guicontroller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class UserIcon {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Image icon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String initialPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This constructor initialize the user icon related files and directory. Then it will"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * load the initial icon depending on whether the file exists or not. If the initial file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * does not exist, the constructor will assign the default icon. Otherwise, it will"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * load the icon according to the data in the existing file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The initial exception"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public UserIcon() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        File iconDir \u003d new File(\"dataFG/userCustomizedIcons\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (!iconDir.isDirectory()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            iconDir.mkdir();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        File iconFile \u003d new File(\"dataFG/iconPath.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (!iconFile.isFile()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            iconFile.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"dataFG/iconPath.txt\", false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.write(\"/images/DaUser.png\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            initialPath \u003d \"/images/DaUser.png\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            icon \u003d new Image(this.getClass().getResourceAsStream(initialPath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            FileReader fileReader \u003d new FileReader(iconFile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            initialPath \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            icon \u003d new Image(initialPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The getter which is used to return the current user icon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return THe image of the current user icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public Image getIcon() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return icon;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method handle the command to change user icon. It will call a file selector"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * for the user to choose his/her own pictures. Then it will copy the image to a specific"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * folder to store and save it as the current user icon."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws IOException The IOE exception"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void changeIcon() throws IOException, DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(\"dataFG/iconPath.txt\", false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        FileChooser chooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        chooser.setTitle(\"Select a picture:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        File defaultDirectory \u003d new File(\".\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        chooser.setInitialDirectory(defaultDirectory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        File selectedFile \u003d chooser.showOpenDialog(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (selectedFile \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.write(initialPath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (!selectedFile.isFile()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"You have not selected a image, so your icon will keep the same as before.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Path from \u003d Paths.get(selectedFile.toURI());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Path to \u003d Paths.get(\"dataFG/userCustomizedIcons/\" + selectedFile.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            File newIcon \u003d new File(\"dataFG/userCustomizedIcons/\" + selectedFile.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            icon \u003d new Image(newIcon.toURI().toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.write(newIcon.toURI().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 98
    }
  },
  {
    "path": "src/main/java/help/AutoComplete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This class is created to parse out the list of all the commands available to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * the userInput TextField."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AutoComplete {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private final String[] list \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"init [existing savings] [Avg Monthly Expenditure]\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        \"add income [desc] /amt [amount in dollars] /on [date]\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        \"spent [desc] /amt [amount in dollars] /cat [category] /on [date]\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete income [index]\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete expenditure [index]\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all income\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all expenditure\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list month income\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list month expenditure\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"check income [month] [year]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"check expenditure [month] [year]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"goal [desc] /amt [cost] /by [d/M/yyyy] /priority [priority level]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete goal [index]\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list goals\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"done goal [index]\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"commit goal [index 1, index 2,...]\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"add instalment [desc] /amt [cost] /within [number of months] months \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            + \"/from [d/M/yyyy] /percentage [annual interest rate]\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete instalment [index]\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all instalments\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"lent [other party] /amt [cost] /on [date]\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"borrowed [other party] /amt [cost] /on [date]\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete loan [index]\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all loans\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list incoming loans\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list outgoing loans\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"paid [amount] /to [other party]\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"received [amount] /from [other party]\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"bank-account [desc] /amt [initial amount of money] /at [initial date] /rate [interest rate]\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete bank-account [index of the tracker]\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"check-balance [desc] /at [the future date]\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"deposit [amount] [desc] /at [date]\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"withdraw [amount] [desc] /at [date]\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list bank trackers\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report histogram\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report line_graph\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report pie_chart\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend histogram\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend line_graph\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend pie_chart\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend histogram\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend line_graph\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend pie_chart\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \"graph finance status /until [date]\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \"change icon\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"undo\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"bye\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private List\u003cString\u003e commandList \u003d Arrays.asList(list);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This is the constructor for the AutoComplete class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * It automatically sorts the list of all commands when it instantiates."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AutoComplete() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Collections.sort(commandList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method is the getter for the list of commands."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return The list of the sorted commands."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public List\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 78,
      "chengweixuan": 2,
      "cctt1014": 2
    }
  },
  {
    "path": "src/main/java/help/History.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This class is created to memorise previous commands type in by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class History {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int currIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private ArrayList\u003cString\u003e commandsEntered;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean flagForFirstPress;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This is the constructor for recording previous commands type in by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public History() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        commandsEntered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.flagForFirstPress \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.flag \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ArrayList getCommandsEntered() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return commandsEntered;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFlagTrue() { //the command before this is up"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        flag \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFlagFalse() { //the command before this is down"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        flag \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean getFlag() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void addingCommandsEntered(String commands) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        commandsEntered.add(commands);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getCurrIndex() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return currIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setCurrIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        currIndex \u003d commandsEntered.size(); //0-based indexing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getMaxIndex() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return commandsEntered.size(); //0-based indexing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFlagForFirstPress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        flagForFirstPress \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean getFlagForFirstPress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return flagForFirstPress;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method gets the previous command that the user type into the TextField"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * userInput. It is called when the user pressed the up button on the keyboard"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * and triggers a key event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return The previous command entered by the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if (flagForFirstPress) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            currIndex \u003d getMaxIndex() - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            flagForFirstPress \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (currIndex !\u003d 0 \u0026\u0026 flag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                currIndex -\u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return commandsEntered.get(currIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method gets the next command that the user type into the TextField"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * userInput. It is called when the user pressed the down button on the keyboard"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * and triggers a key event."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return The next command entered by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if (currIndex \u003d\u003d getMaxIndex()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            currIndex \u003d getMaxIndex() - 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } else if (!flag) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (currIndex !\u003d getMaxIndex() - 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                currIndex +\u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return commandsEntered.get(currIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 98
    }
  },
  {
    "path": "src/main/java/money/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This class is created to store the information of the user\u0027s financial information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cIncome\u003e incomeListTotal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cExpenditure\u003e expListTotal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cGoal\u003e shortTermGoals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private ArrayList\u003cInstalment\u003e instalments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cBankTracker\u003e bankTrackerList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cLoan\u003e loans;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float totalSavings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float baseSavings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float goalSavings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private boolean toInitialize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor of the Account Object to record financial information of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This constructor is used when initializing a new account."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public Account() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        incomeListTotal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        expListTotal \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        shortTermGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        bankTrackerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        loans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        toInitialize \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor of the Account Object to record financial information of the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This constructor is used when a previous account is parsed in as a parameter."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param account A previously existing account that is parsed in."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public Account(Account account) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        incomeListTotal \u003d account.getIncomeListTotal();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        expListTotal \u003d account.getExpListTotal();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        shortTermGoals \u003d account.getShortTermGoals();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalments \u003d account.getInstalments();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        bankTrackerList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        loans \u003d account.getLoans();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        toInitialize \u003d account.isToInitialize();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        baseSavings \u003d account.getBaseSavings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        updateSavings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        //if (account.isInitialised()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        //    toInitialize \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        //} else { toInitialize \u003d true; }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method is to initialize the user account when he uses Financial Ghost for the first time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param userSavings The initial savings the user have in his account"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param avgExp The average Expenditure per month of the user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void initialize(float userSavings, float avgExp) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LocalDate nowDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income initialSavings;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (userSavings \u003e avgExp * 6) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.baseSavings \u003d avgExp * 6;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.goalSavings \u003d userSavings - baseSavings;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            initialSavings \u003d new Income(userSavings, \"Initial Savings\", nowDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            incomeListTotal.add(initialSavings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            initialSavings \u003d new Income(userSavings, \"Initial Savings\", nowDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            incomeListTotal.add(initialSavings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.baseSavings \u003d totalSavings;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.goalSavings \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        toInitialize \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ArrayList\u003cIncome\u003e getIncomeListTotal() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return incomeListTotal;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ArrayList\u003cExpenditure\u003e getExpListTotal() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return expListTotal;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ArrayList\u003cInstalment\u003e getInstalments() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return instalments;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ArrayList\u003cGoal\u003e getShortTermGoals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return shortTermGoals;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cLoan\u003e getLoans() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return loans;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method iterates through all the loans and sum them up."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return The total amount of all the loans"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public float getLoansTotal() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loans) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method iterate through all the loans and select the outgoing loans and put them in a list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return The list of outgoing loans."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cLoan\u003e getOutgoingLoans() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cLoan\u003e outgoingLoans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loans) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (l.type \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                outgoingLoans.add(l);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return outgoingLoans;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method iterate through all the loans and select the incoming loans and put them in a list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return The list of incoming loans."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ArrayList\u003cLoan\u003e getIncomingLoans() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cLoan\u003e incomingLoans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loans) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (l.type \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                incomingLoans.add(l);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return incomingLoans;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method sorts the short term goal with a custom comparator function."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param shortTermGoals The lists of short term goals"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void sortShortTermGoals(ArrayList\u003cGoal\u003e shortTermGoals) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Collections.sort(shortTermGoals, new Comparator\u003cGoal\u003e() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            public int compare(Goal g1, Goal g2) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (g1.getPriority() \u003d\u003d g2.getPriority()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    return g1.getDescription().compareTo(g2.getDescription());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    return g1.getPriority().compareTo(g2.getPriority());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ArrayList\u003cBankTracker\u003e getBankTrackerList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return bankTrackerList;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setBaseSavings(float baseSavings) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.baseSavings \u003d baseSavings;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method iterate through the list of the income and"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * sum them up."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return The sum of all the income"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getTotalIncome() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        for (Income i : incomeListTotal) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method iterate through the list of the expenditure and"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * sum them up."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return The sum of all the expenditure"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getTotalExp() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        for (Expenditure i : expListTotal) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            total +\u003d i.getPrice();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getTotalSavings() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        totalSavings \u003d getTotalIncome() - getTotalExp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return totalSavings;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getBaseSavings() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return baseSavings;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getGoalSavings() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        goalSavings \u003d getTotalSavings() - getBaseSavings();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return goalSavings;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void updateSavings() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        totalSavings \u003d getTotalIncome() - getTotalExp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        goalSavings \u003d getTotalSavings() - getBaseSavings();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isToInitialize() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return toInitialize;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void setToInitialize(boolean initStatus) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        this.toInitialize \u003d initStatus;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method helps to find the corresponding bank account tracker by given description(name)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param name The given description"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The corresponding tracker"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws DukeException Handle the case when there is no such account"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public BankTracker findTrackerByName(String name) throws DukeException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d null;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (BankTracker b : bankTrackerList) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (b.getDescription().equals(name)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                bankTracker \u003d b;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (bankTracker \u003d\u003d null) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"Sorry, FG does not find this account...\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return bankTracker;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 1,
      "ChenChao19": 106,
      "chengweixuan": 54,
      "cctt1014": 28,
      "therealnickcheong": 59
    }
  },
  {
    "path": "src/main/java/money/BankTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class represents a bank account tracker which can be used to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * store the related information of a bank account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * (account description, balance, the latest update date and the interest rate)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class BankTracker {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private float amt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private LocalDate latestDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private double rate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor of this class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param accountDescription The description or the name for this bank account"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param initialAmt The balance in this bank account"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param initialDate The initial date of this account"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param interestRate The interest rate of this bank account"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public BankTracker(String accountDescription, float initialAmt, LocalDate initialDate, double interestRate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        description \u003d accountDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt \u003d initialAmt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        latestDate \u003d  initialDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        rate \u003d interestRate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get a formatted string which contains"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * all the information of a bank account tracker."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return A string which contains all the information of a bank account tracker"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getBankAccountInfo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String balance \u003d decimalFormat.format(amt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return \"  Name: \" + description + \"\\n  Balance: \" + balance + \"\\n  Latest Update Date: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + dateTimeFormatter.format(latestDate) + \"\\n  Interest Rate: \" + rate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the description of the bank account."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The description of the bank account"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the latest update date for the account tracker."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The latest update date for the account tracker"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public LocalDate getLatestDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return latestDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the balance at the latest update date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The balance at the latest update date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public float getAmt() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return amt;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The method is a getter to get the interest rate."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return The interest rate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public double getRate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return rate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method adds the given value to the current balance and update the balance based on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * the current amount and the given interest rate."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param value The given value (can be negative)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void addAmt(double value) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt +\u003d value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method updates the balance based on the given date and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * changes the latest date to the given date."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param date The latest update date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void updateDate(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (date.isBefore(latestDate)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The new date cannot be before the current latest update date!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Period period \u003d Period.between(latestDate, date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int length \u003d period.getMonths() + period.getYears() * 12;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        amt *\u003d Math.pow((1 + rate), length);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        latestDate \u003d date;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This methods just predicts the future balance on the given date"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * without changing the balance and the latest update date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param date the given date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return the future balanced based on the given date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public float predictAmt(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (date.isBefore(latestDate)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The date cannot be early than the current latest update date!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Period period \u003d Period.between(latestDate, date);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int length \u003d period.getMonths() + period.getYears() * 12;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return (float) (amt * Math.pow((1 + rate), length));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "cctt1014": 118,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/money/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Expenditure extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate boughtDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    protected DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the Expenditure Object to record expenditure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Price of the item spent on"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info on the item"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param category Category the item is grouped under"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param boughtDate Date which the item is bought"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Expenditure(float price, String description, String category, LocalDate boughtDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        super(price, description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.boughtDate \u003d boughtDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return \"[E]\" + super.toString() + \"(on: \" + getBoughtDate() + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public LocalDate getDateBoughtDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return boughtDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getBoughtDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return boughtDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 3,
      "ChenChao19": 1,
      "chengweixuan": 32,
      "therealnickcheong": 7
    }
  },
  {
    "path": "src/main/java/money/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Goal extends Expenditure {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public enum Priority {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        HIGH,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MEDIUM,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LOW"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * contructor for the Goal class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param price price of goal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param description desc of goal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param category category of goal."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param goalBy due date of goal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param priorityLevel priority level of goal"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException throws exception is command entered is wrong."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Goal(float price, String description, String category, LocalDate goalBy, String priorityLevel)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        super(price, description, category, goalBy);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        switch (priorityLevel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"LOW\" :"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"low\" : {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"medium\": {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        case \"high\": {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            this.priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"goal \u003cdesc\u003e /amt \u003camount\u003e /by \u003cdate\u003e /priority \u003cHIGH/MEDIUM/LOW\u003e\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[GS]\" + \" \" + super.getDescription() + \"(target: $\" + super.getPriceStr() + \")\\n (to achieve by: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + getGoalBy() + \") \" + getPriorityString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getPriorityString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return priority.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to return goal due date as a string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return goal due date as a string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getGoalBy() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String goalByDateTime \u003d super.getBoughtDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String goalByDate \u003d goalByDateTime.split(\" \")[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return goalByDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return super.getCategory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 1,
      "therealnickcheong": 79
    }
  },
  {
    "path": "src/main/java/money/Income.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Income extends Item {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private LocalDate payday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * The constructor for the Income Object to record income sources."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param price Money in from the income source"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description info of the income source"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param payday Date which the income is received"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Income(float price, String description, LocalDate payday) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        super(price, description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.payday \u003d payday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public LocalDate getPayday() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return payday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return \"[I]\" + \" \" + super.getDescription() + \"(salary: $\" + super.getPriceStr() + \") (Paid On: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + getPaidTime() + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getPaidTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return payday.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "chengweixuan": 27,
      "therealnickcheong": 5
    }
  },
  {
    "path": "src/main/java/money/Instalment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.lang.Math;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This class is created for the Instalments of the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class Instalment extends Expenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int numOfPaymentsReq;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private float annualInterestRate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private float monthlyInterestRate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int  paymentsMade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private float percentage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean payForTheMonth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private boolean fullyPaid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor of the Instalment Object to record the instalments."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param price Total cost of the item that the user bought"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param description The item that the Instalment is paying for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param category The type of money object that the user is recording"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param boughtDate The date when the user buy the item"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param numOfPaymentsReq The total number of months of payment required for the user to pay his Instalment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param annualIR The Annual Interest Rate that the user is paying"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public Instalment(float price, String description, String category,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                      LocalDate boughtDate, int numOfPaymentsReq, float annualIR) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        super(price, description, category, boughtDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.numOfPaymentsReq \u003d numOfPaymentsReq;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.annualInterestRate \u003d annualIR / 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.monthlyInterestRate \u003d annualInterestRate / 12;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.endDate \u003d setEndTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.payForTheMonth \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.fullyPaid \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void isPayTheMonth() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        payForTheMonth \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void isNotPayTheMonth() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        payForTheMonth \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean getPayForTheMonth() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return payForTheMonth;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method is the internal algorithm used to calculate the monthly payment"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * which is called the equal monthly instalment paying method."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @return the monthly payment required by the user for the particular item that"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     *         the user bought"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float equalMonthlyInstalment() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return (float) ((getPrice() * monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numOfPaymentsReq))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                / (Math.pow(1 + monthlyInterestRate, numOfPaymentsReq) - 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getPaymentsMade() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return paymentsMade;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method sets the percentage that the user has paid for the Instalment."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param payments The number of payments made by the user in total"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void percentPay(int payments) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.paymentsMade \u003d payments;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if (paymentsMade \u003e\u003d numOfPaymentsReq) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            this.percentage \u003d 100;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        this.percentage \u003d (float) paymentsMade / numOfPaymentsReq * 100;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getPercentage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return percentage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float totalAmount() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return equalMonthlyInstalment() * numOfPaymentsReq;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public LocalDate setEndTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return getDateBoughtDate().plusMonths(numOfPaymentsReq);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return \"[INS]\" + \"$\" + getPriceStr() + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            + getDescription() + \"(on: \" + getBoughtDate() + \")\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return super.getCategory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getBoughtDate() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return getDateBoughtDate().format(dateTimeFormatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public String getDateEndDate() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return getEndDate().format(dateTimeFormatter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public int getNumOfPayments() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return numOfPaymentsReq;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public float getAnnualInterestRate() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return annualInterestRate;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method is called when the Instalment is fully paid for."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setFullyPaid() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        fullyPaid \u003d true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean getFullyPaid() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return fullyPaid;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 138
    }
  },
  {
    "path": "src/main/java/money/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Item(float price, String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public float getPrice() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return this.price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getPriceStr() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return decimalFormat.format(price);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return \"$\" + getPriceStr() + \" \" + description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 27,
      "therealnickcheong": 6
    }
  },
  {
    "path": "src/main/java/money/Loan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class Loan extends Item {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public enum Type {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        OUTGOING,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        INCOMING,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ALL"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    protected LocalDate endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isSettled;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float outstandingLoan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    Type type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the Loan Object to record outgoing and incoming loans."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param amount Total amount of the loan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description Party which to loan is lent to/borrowed from"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param startDate Date which the loan was made"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param type Type determining the loan is incoming or outgoing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Loan(float amount, String description, LocalDate startDate, Type type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        super(amount, description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.isSettled \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.outstandingLoan \u003d amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Method returns a String with the information of the loan."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * String contains the type of loan, whether the loan is settled or outstanding,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and the endDate if the loan is settled, or the outstanding amount if the loan is outstanding."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String containing information of the loan"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String typeStr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String loanDirectionStr;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Type.OUTGOING) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            typeStr \u003d \" [O]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            loanDirectionStr \u003d \"Lent\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (type \u003d\u003d Type.INCOMING) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            typeStr \u003d \" [I]\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            loanDirectionStr \u003d \"Borrowed\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            typeStr \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            loanDirectionStr \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String status \u003d isSettled ? \"[Settled]\" : \"[Outstanding]\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return status + typeStr + \" \" + super.getDescription() + \"(loan: $\" + super.getPriceStr() + \") (\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + loanDirectionStr + \" On: \" + getStartDate() + \")\" + getEndDateString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return isSettled;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the status of the Loan as either 1 or 0."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return Integer 1 or 0"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public int getStatusInt() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (isSettled) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public float getOutstandingLoan() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return outstandingLoan;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method is called to settle the loan if it is repaid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If the entire loan is settled, the loan is set as settled."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param amount Amount repaid to the loan"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void settleLoanDebt(float amount) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        outstandingLoan -\u003d amount;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (outstandingLoan \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            isSettled \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            endDate \u003d Parser.shortcutTime(\"now\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            isSettled \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            endDate \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return startDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the formatted endDate if the loan has been settled. Returns an"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * empty String if otherwise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String representing the endDate of the Loan"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return endDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method creates a String that represents the state of the loan."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If loan is settled, returns the endDate of the loan, else it prints"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the outstanding amount of the loan."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String representing state of the loan"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String getEndDateString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \" Outstanding Amount: $\" + decimalFormat.format(outstandingLoan);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return \" (Paid Back On: \" + getEndDate() + \")\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method is called to update an existing loan with its data from the save file during"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the load process on start up of Financial Ghost."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param typeStr String denoting the type of loan"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param endDate String representing endDate of loan"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param status Integer representing status of loan"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param outstandingLoan Float of the outstanding amount of the loan"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void updateExistingLoan(String typeStr, String endDate, int status, float outstandingLoan) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (typeStr.equals(\"INCOMING\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.type \u003d Type.INCOMING;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (typeStr.equals(\"OUTGOING\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.type \u003d Type.OUTGOING;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.type \u003d Type.ALL;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (endDate.equals(\"\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            this.endDate \u003d null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.isSettled \u003d status \u003d\u003d 1;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        this.outstandingLoan \u003d outstandingLoan;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 1,
      "chengweixuan": 166
    }
  },
  {
    "path": "src/main/java/moneycommands/AddExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds an expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate boughtTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add expenditure command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the expenditure data within the user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public AddExpenditureCommand(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceFirst(\"spent \", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add expenditure command. Takes the input from user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and adds an expenditure to the Total Expenditure List."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            description \u003d splitStr[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] furSplit \u003d splitStr[1].split(\"/cat \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            price \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] morSplit \u003d furSplit[1].split(\"/on \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            category \u003d morSplit[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            boughtTime \u003d Parser.shortcutTime(morSplit[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"spent \u003cdescription\u003e /amt \u003camount\u003e /cat \u003ccategory\u003e /on \u003cdate\u003e\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (price \u003c\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Expenditure must be more than zero!\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e \u003d new Expenditure(price, description, category, boughtTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this to your total spending: \\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getExpListTotal().get(account.getExpListTotal().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getExpListTotal().size() - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Expenditure exp \u003d account.getExpListTotal().get(lastIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().remove(exp);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(exp.toString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 14,
      "chengweixuan": 66,
      "therealnickcheong": 10
    }
  },
  {
    "path": "src/main/java/moneycommands/AddGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This command adds a short-term goal to the Short-Term Goals List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    float price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    LocalDate byDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    String priorityLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    String category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the add short-term goal command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * with the goal data within the user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd add command inputted from user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public AddGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the add goal command. Takes input from user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * and adds a  goal to the Goals List"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            desc \u003d inputString.split(\"/amt \")[0].replaceFirst(\"goal \", \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            price \u003d Float.parseFloat(inputString.split(\"/amt \")[1].split(\"/by \")[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            byDate \u003d Parser.shortcutTime(inputString.split(\"/by \")[1].split(\" /priority \")[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            priorityLevel \u003d inputString.split(\"/priority \")[1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            category \u003d \"GS\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (price \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                throw new DukeException(\"Price must be more than zero!\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (byDate.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                throw new DukeException(\"Target date must be before current date!\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"goal \u003cdesc\u003e /amt \u003camount\u003e /by \u003cdate\u003e /priority \u003cHIGH/MEDIUM/LOW\u003e\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"goal \u003cdesc\u003e /amt \u003camount\u003e /by \u003cdate\u003e /priority \u003cHIGH/MEDIUM/LOW\u003e\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(price, desc, category, byDate, priorityLevel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this Goal: \\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"     \" + account.getShortTermGoals().get(account.getShortTermGoals().size() - 1).toString()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" Goals in the list.\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getShortTermGoals().size() - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Goal g \u003d account.getShortTermGoals().get(lastIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().remove(g);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(g.toString() + \"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" goals listed\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 18,
      "chengweixuan": 2,
      "therealnickcheong": 83
    }
  },
  {
    "path": "src/main/java/moneycommands/AddIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds an income source to the Total Income List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class AddIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float salary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate payDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add income command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the income source data within the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public AddIncomeCommand(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceFirst(\"add income \", \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add income command. Takes the input data from user and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * adds an income source to the Total Income List."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] splitStr \u003d inputString.split(\"/amt \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            description \u003d splitStr[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] furSplit \u003d splitStr[1].split(\"/on \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            salary \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            payDay \u003d Parser.shortcutTime(furSplit[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"add income \u003cdescription\u003e /amt \u003camount\u003e /on \u003cdate\u003e\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (salary \u003c\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Income source must be more than zero!\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i \u003d new Income(salary, description, payDay);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this income source: \\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getIncomeListTotal().get(account.getIncomeListTotal().size() - 1).toString()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income sources listed\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getIncomeListTotal().size() - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Income i \u003d account.getIncomeListTotal().get(lastIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getIncomeListTotal().remove(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size() + \" income sources listed\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 13,
      "chengweixuan": 65,
      "therealnickcheong": 11
    }
  },
  {
    "path": "src/main/java/moneycommands/AddInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This command adds an Instalment to the Instalments List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AddInstalmentCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    float amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    int numOfPaymentsReq;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    LocalDate boughtDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    float annualIR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    String category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor of the command which initialises the add instalment command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * with the instalment data within the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param cmd add command inputted from user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AddInstalmentCommand(String cmd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method executes the add instalment command. Takes input from user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * and adds an Instalment to the Instalment List"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            desc \u003d inputString.split(\" /amt \")[0].replaceFirst(\"add instalment \", \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            amount \u003d Float.parseFloat(inputString.split(\" /amt \")[1].split(\" /within \")[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            numOfPaymentsReq \u003d Integer.parseInt(inputString.split(\" /within \")[1].split(\" months /from \")[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            boughtDate \u003d Parser.shortcutTime(inputString.split(\" months /from \")[1].split(\" /percentage \")[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            annualIR \u003d Float.parseFloat(inputString.split(\" /percentage \")[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            category \u003d \"INS\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    + \"add instalment \u003cdesc\u003e /amt \u003camount\u003e /within \u003cnumber of months of payment\u003e months \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    + \"/from \u003cdate\u003e /percentage \u003cannual interest rate\u003e%\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if (amount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            throw new DukeException(\"Instalment amount must be more than zero!\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment ins \u003d new Instalment(amount, desc, category, boughtDate, numOfPaymentsReq, annualIR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(ins);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this to your instalments: \\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(account.getInstalments().get(account.getInstalments().size() - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" You are paying $\" + df.format(ins.equalMonthlyInstalment()) + \" per month\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" For \" + ins.getNumOfPayments() + \" months\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Until \" + ins.getDateEndDate() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" The total amount you will pay is $\" + ins.totalAmount() + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand update \u003d new AutoUpdateInstalmentCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand list \u003d new ListInstalmentCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        update.execute(account, ui, storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getInstalments().size() - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment ins \u003d account.getInstalments().get(lastIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().remove(ins);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(ins.toString() + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 12,
      "ChenChao19": 96
    }
  },
  {
    "path": "src/main/java/moneycommands/AddLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command adds a loan to the Loan List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class AddLoanCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Loan.Type type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private float amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private static final int PLACEHOLDER_INT \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the add loan command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the loan data within the user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Differentiates between an add outgoing loan or incoming loan according to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * data in user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command add command inputted from user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public AddLoanCommand(String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (command.startsWith(\"lent\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"lent \", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.OUTGOING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (command.startsWith(\"borrowed\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"borrowed \", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.INCOMING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Checks if the description entered is unique."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param loanList ArrayList of loans"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param description description inputted by the user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return True if the description is unique, else returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isUnique(ArrayList\u003cLoan\u003e loanList, String description) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cString\u003e descList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loanList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            descList.add(l.getDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return !descList.contains(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the add loan command. Takes the input data from user and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * adds an incoming or outgoing loan to the Loan List."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] splitStr \u003d inputString.split(\" /amt \", 2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            description \u003d splitStr[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] furSplit \u003d splitStr[1].split(\"/on \", 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            amount \u003d Float.parseFloat(furSplit[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            startDate \u003d Parser.shortcutTime(furSplit[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"lent/borrowed \u003cperson\u003e /amt \u003camount\u003e /on \u003cdate\u003e\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (amount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Loan must be more than zero!\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        boolean isUnique \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            isUnique \u003d isUnique(account.getOutgoingLoans(), description);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (type \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            isUnique \u003d isUnique(account.getIncomingLoans(), description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (!isUnique) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Description of the loan must be unique!\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan l \u003d new Loan(amount, description, startDate, type);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(l);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int loanTypeSize \u003d PLACEHOLDER_INT;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            loanTypeSize \u003d account.getIncomingLoans().size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (type \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            loanTypeSize \u003d account.getOutgoingLoans().size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. I\u0027ve added this \" + l.getType().toString().toLowerCase() + \" loan: \\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(account.getLoans().get(account.getLoans().size() - 1).toString()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getLoans().size() + \" loans listed\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" and \" + loanTypeSize + \" \" + l.getType().toString().toLowerCase() + \" loans\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getLoans().size() - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Loan l \u003d account.getLoans().get(lastIndex);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().remove(l);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getLoans().size() + \" loans listed\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 12,
      "chengweixuan": 122
    }
  },
  {
    "path": "src/main/java/moneycommands/AutoUpdateInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This command automatically updates the payment make by the user monthly."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AutoUpdateInstalmentCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Default Constructor for AutoUpdateInstalmentCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AutoUpdateInstalmentCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method executes the AutoUpdateInstalmentCommand. Automatically updates the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * when he needs to pay for and instalment and automatically add it into his expenditure list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        for (Instalment ins : account.getInstalments()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (ins.getFullyPaid()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            Period diff \u003d Period.between(ins.getDateBoughtDate(), currDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            int paymentsMade \u003d diff.getMonths() + diff.getYears() * 12;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            ins.percentPay(paymentsMade);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (diff.getDays() !\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ins.isNotPayTheMonth();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (diff.getDays() \u003d\u003d 0 \u0026\u0026 !ins.getPayForTheMonth()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                Expenditure e \u003d new Expenditure(ins.equalMonthlyInstalment(), ins.getDescription(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        ins.getCategory(), currDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ins.isPayTheMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                paymentsMade +\u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ins.percentPay(paymentsMade);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            if (ins.getNumOfPayments() \u003d\u003d ins.getPaymentsMade()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ins.setFullyPaid();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void setCurrDate(LocalDate date) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        currDate \u003d date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public LocalDate getCurrDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return currDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "ChenChao19": 75
    }
  },
  {
    "path": "src/main/java/moneycommands/CheckFutureBalanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class allow user to estimate their future balance in an account."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CheckFutureBalanceCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LocalDate futureDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor parses the input command and gets the description and the date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param inputString The command typed in by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public CheckFutureBalanceCommand(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            description \u003d inputString.split(\" /at \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            description \u003d description.replaceFirst(\"check-balance \", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            futureDate \u003d Parser.shortcutTime(inputString.split(\" /at \")[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return this command will not cease the overall program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method firstly find the account based on the description then calculate the number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * of months between the future date and the latest update date. Based on the interest rate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * it can get the future balance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class record all the financial information of the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param storage The class used to store the information to the local disk"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws DukeException The self-defined exceptions to handle the invalid future date and the non-existing account"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d account.findTrackerByName(description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        LocalDate currDate \u003d bankTracker.getLatestDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (futureDate.isBefore(currDate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The input date is invalid! It should be a \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    + \"date later then the latest update date.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Period period \u003d Period.between(currDate, futureDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        int length \u003d period.getMonths() + period.getYears() * 12;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        float balance \u003d bankTracker.getAmt();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        double rate \u003d bankTracker.getRate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        balance *\u003d  Math.pow((1 + rate),length);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String stringBalance \u003d decimalFormat.format(balance);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"  The future balance in \" + description + \" :\\n    \" + stringBalance + \" at \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + dateTimeFormatter.format(futureDate) + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "cctt1014": 78
    }
  },
  {
    "path": "src/main/java/moneycommands/CommitGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class CommitGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private ArrayList\u003cGoal\u003e goalsAfterCommit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float goalSavingsAfterCommit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private static final int TICK_NO \u003d 0x2713;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the commit goal command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd command input by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public CommitGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to calculate the percentage progress the user has made towards his goals."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param goalSavings current goal savings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param currGoalPrice the price of the goal to calculate."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return String of the percentage progress."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String percentageProgress(float goalSavings, float currGoalPrice) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float percentageProgress \u003d (goalSavings / currGoalPrice) * 100;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[\" + df.format(percentageProgress) + \"%]\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to calculate the savings per month to achieve the set goal."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param goalSavings current goal savings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param currGoalPrice price of the goal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param monthsBetween months left to achieve the goal."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return the amount of  money to save per month for the goal."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float savingsPerGoal(float goalSavings, float currGoalPrice, float monthsBetween) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (monthsBetween \u003c\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return currGoalPrice - goalSavings;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return (currGoalPrice - goalSavings) / monthsBetween;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String[] args \u003d inputString.split(\"commit goal \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"commit goal \u003cindex 1, index 2,...\u003e\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String combinedArgs \u003d args[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String[] indivArgs \u003d combinedArgs.split(\",\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            goalsAfterCommit \u003d  new ArrayList\u003c\u003e(account.getShortTermGoals());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            goalSavingsAfterCommit \u003d account.getGoalSavings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ArrayList\u003cInteger\u003e indexOfCommittedGoals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                for (String i: indivArgs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    int index \u003d Integer.parseInt(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    indexOfCommittedGoals.add(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                throw new DukeException(\"The indexes must be a number\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Set\u003cInteger\u003e noDuplicateSet \u003d new HashSet\u003c\u003e(indexOfCommittedGoals);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            indexOfCommittedGoals.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            indexOfCommittedGoals.addAll(noDuplicateSet);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Collections.sort(indexOfCommittedGoals, Collections.reverseOrder());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (int j: indexOfCommittedGoals) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (j \u003e account.getShortTermGoals().size() || (j \u003c 1)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    throw new DukeException(\"The serial number of the Goal is Out Of Bounds!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    Goal committedGoal \u003d  goalsAfterCommit.get(j - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    float price \u003d committedGoal.getPrice();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    if (goalSavingsAfterCommit \u003c price) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        throw new DukeException(\"Goals committed exceeds Goal Savings\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalsAfterCommit.remove(j - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalSavingsAfterCommit -\u003d price;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            float savingsReqPerMonth \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d goalsAfterCommit.size();i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                Goal currGoal \u003d goalsAfterCommit.get(i - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                float currGoalPrice \u003d currGoal.getPrice();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                LocalDate goalDate \u003d currGoal.getDateBoughtDate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                float monthsBetween \u003d ChronoUnit.MONTHS.between(LocalDate.now(), goalDate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                String goalProgress \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                if (goalSavingsAfterCommit \u003e\u003d currGoalPrice) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalProgress \u003d \"[\" + Character.toString((char)TICK_NO) + \"]\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    goalProgress \u003d percentageProgress(goalSavingsAfterCommit, currGoalPrice);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    savingsReqPerMonth +\u003d savingsPerGoal(goalSavingsAfterCommit, currGoalPrice, monthsBetween);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.appendToOutput(\" \" + i + \".\" + goalProgress + goalsAfterCommit.get(i - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\"Goal Savings after commit: $\" + decimalFormat.format(goalSavingsAfterCommit) + \"\\n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToOutput(\"Target Savings for the Month after commit: $\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + decimalFormat.format(savingsReqPerMonth) + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "chengweixuan": 2,
      "therealnickcheong": 146
    }
  },
  {
    "path": "src/main/java/moneycommands/CreateBankAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class create a bank account tracker for the user to track their"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * different bank account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CreateBankAccountCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private BankTracker newTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor analyzes the input command and get the information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * (account description, initial amount, initial date and interest rate)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * of the new bank account tracker and pack it as a new bank-tracker."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param inputString The command line typed in by the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public CreateBankAccountCommand(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String desc \u003d inputString.split(\" /amt \")[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String info \u003d inputString.split(\" /amt \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            desc \u003d desc.replaceFirst(\"bank-account \",\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String[] words \u003d info.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            LocalDate initialDate \u003d Parser.shortcutTime(words[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (Integer.parseInt(words[0]) \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"Sorry. The input initial balance should not be a negative number.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            newTracker \u003d new BankTracker(desc, Integer.parseInt(words[0]),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    initialDate, Double.parseDouble(words[4]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The format for the numbers is wrong, please check and type in again.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * Since the new bank account tracker has been packed in the constructor,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * in this method, Financial Ghost will append the information of the new"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * tracker to the list in the Account class and write the new information"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * into the local file for storage purpose. Finally, it will append a confirm"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * message to the output string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class record all the financial information of the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param storage The class used to store the information to the local disk"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws DukeException The self-defined exception to handle the duplicate description"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cBankTracker\u003e currList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (BankTracker b : currList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (b.getDescription().equals(newTracker.getDescription())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"There is a account with the same name! Please change the description!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().add(newTracker);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Income newIncome \u003d new Income(newTracker.getAmt(), \"Initialize account: \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + newTracker.getDescription(), newTracker.getLatestDate());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getIncomeListTotal().add(newIncome);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"New bank account tracker has been added to the list: \\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(newTracker.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int lastIndex \u003d account.getBankTrackerList().size() - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        BankTracker b \u003d account.getBankTrackerList().get(lastIndex);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getBankTrackerList().remove(b);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(b.toString() + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getBankTrackerList().size()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + \" bank accounts listed\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 16,
      "chengweixuan": 1,
      "cctt1014": 87,
      "therealnickcheong": 1
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteBankAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * This class is used to delete the bank tracker from the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " * and withdraw the money from the total saving as a expenditure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DeleteBankAccountCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public DeleteBankAccountCommand(String inputString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        inputString \u003d inputString.replaceFirst(\"delete bank-account \", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        index \u003d Integer.parseInt(inputString) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d account.getBankTrackerList().size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The index number is out of bound!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker deletedBank \u003d account.getBankTrackerList().get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Expenditure expenditure \u003d new Expenditure(deletedBank.getAmt(), \"Withdraw from \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + deletedBank.getDescription(), \"bank\", Parser.shortcutTime(\"now\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getExpListTotal().add(expenditure);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.addDeletedBank(deletedBank);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"The bank account tracker below has been removed: \\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(deletedBank.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        BankTracker bt \u003d storage.getDeletedBankTracker();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().remove(account.getExpListTotal().size() - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getBankTrackerList().add(index, bt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(account.getBankTrackerList().get(index).getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + account.getBankTrackerList().size() + \" banks listed\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 12,
      "cctt1014": 48
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes an expenditure from the Total Expenditure List according to index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete expenditure command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public DeleteExpenditureCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String tempStr \u003d inputString.replaceFirst(\"delete expenditure \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String tempStr1 \u003d tempStr.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            serialNo \u003d Integer.parseInt(tempStr1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter a numerical number as the index of the expenditure to be deleted\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete expenditure command. Takes the index of the item"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Total Expenditure List and checks for the item."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (serialNo \u003e account.getExpListTotal().size() || serialNo \u003c\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"The serial number of the expenditure is Out Of Bounds!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure deletedEntryExp \u003d account.getExpListTotal().get(serialNo - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this expenditure:\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"  \" + deletedEntryExp.toString() + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getExpListTotal().size() - 1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" expenses in the list.\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().remove(serialNo - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.addDeletedEntry(deletedEntryExp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item deletedEntry \u003d storage.getDeletedEntry();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntry instanceof  Expenditure) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getExpListTotal().add(serialNo - 1, (Expenditure)deletedEntry);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            storage.writeToFile(account);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(account.getExpListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Now you have \" + account.getExpListTotal().size() + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Last deleted entry is of invalid type!!\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 17,
      "chengweixuan": 51,
      "therealnickcheong": 11
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": " * This command deletes a short-term goal from the Short-Term Goal List according to index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the delete goal command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd delete command inputted from user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DeleteGoalCommand(String cmd) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String temp \u003d inputString.replaceAll(\"delete goal \", \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"done goal \u003cindex\u003e\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the delete goal command. Takes the index of the item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * to be deleted from the Goals List and checks for the item."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Deletes the item from the list if the item is found."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui Handles interaction with the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (serialNo \u003e account.getShortTermGoals().size() || serialNo \u003c\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the task is Out Of Bounds!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal deletedEntryG \u003d account.getShortTermGoals().get(serialNo - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this Goal:\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + deletedEntryG.toString() + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getShortTermGoals().size() - 1) + \" goals in the list.\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().remove(serialNo - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.addDeletedEntry(deletedEntryG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item deletedEntry \u003d storage.getDeletedEntry();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntry instanceof Goal) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getShortTermGoals().add(serialNo - 1, (Goal)deletedEntry);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            storage.writeToFile(account);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(account.getShortTermGoals().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" goals listed\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            list.execute(account, ui, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Last deleted entry is of invalid type!!\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 21,
      "chengweixuan": 2,
      "therealnickcheong": 66
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes an income source from the Total Income List according to index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DeleteIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete income command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public DeleteIncomeCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String temp \u003d inputString.replaceFirst(\"delete income \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String tempStr \u003d temp.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            serialNo \u003d Integer.parseInt(tempStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter a numerical number as \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"the index of the income source to be deleted\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete income command. Takes the index of the item"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Total Income List and checks for the item"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (serialNo \u003e account.getIncomeListTotal().size() || serialNo \u003c\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"The serial number of the income is Out Of Bounds!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income deletedEntryInc \u003d account.getIncomeListTotal().get(serialNo - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this income source:\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"  \" + deletedEntryInc.toString() + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getIncomeListTotal().size() - 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" income sources in the list.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().remove(serialNo - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.addDeletedEntry(deletedEntryInc);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item deletedEntry \u003d storage.getDeletedEntry();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntry instanceof  Income) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getIncomeListTotal().add(serialNo - 1, (Income)deletedEntry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            storage.writeToFile(account);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(account.getIncomeListTotal().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Now you have \" + account.getIncomeListTotal().size()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    + \" income sources listed\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Last deleted entry is of invalid type!!\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 19,
      "chengweixuan": 52,
      "therealnickcheong": 11
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This command deletes an Instalment from the Instalment List according to index extracted from the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class DeleteInstalmentCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor of the command which initialises the delete instalment command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * with the index of the item to be deleted within the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public DeleteInstalmentCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            inputString \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            String temp \u003d inputString.replaceAll(\"delete instalment \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            throw new DukeException(\"Please enter a numerical number as the index of the instalment to be deleted\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method executes the delete instalment command. Takes the index of the item"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * to be deleted from the Instalment List and checks for the item"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Deletes the item from the list if the item is found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        if (serialNo \u003e account.getInstalments().size() || serialNo \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            throw new DukeException(\"The serial number of the Instalments is Out Of Bounds!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment deletedEntryIns \u003d account.getInstalments().get(serialNo - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().remove(serialNo - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        storage.addDeletedEntry(deletedEntryIns);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this Instalment:\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\"  \" + deletedEntryIns.toString() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getInstalments().size())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \" instalments in the list.\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand update \u003d new AutoUpdateInstalmentCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand list \u003d new ListInstalmentCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        update.execute(account, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        list.execute(account, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item deletedEntry \u003d storage.getDeletedEntry();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntry instanceof Instalment) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getInstalments().add(serialNo - 1, (Instalment)deletedEntry);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            storage.writeToFile(account);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(account.getInstalments().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Last deleted entry is of invalid type!!\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 16,
      "ChenChao19": 70
    }
  },
  {
    "path": "src/main/java/moneycommands/DeleteLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command deletes a loan from the Loans List according to index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class DeleteLoanCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int serialNo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the delete expenditure command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the index of the item to be deleted within the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command delete command inputted from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public DeleteLoanCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String temp \u003d inputString.replaceFirst(\"delete loan \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            temp \u003d temp.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            serialNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter a numerical number as the index of the loan to be deleted\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the delete loan command. Takes the index of the item"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be deleted from the Loans List and checks for the item."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Deletes the item from the list if the item is found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Note that the index given is for the Total Loans List and not the Outgoing Loans List"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * or Incoming Loans List."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the index given is out of bounds of the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (serialNo \u003e account.getLoans().size() || serialNo \u003c\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"The serial number of the loan is Out Of Bounds!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan deletedEntryLoan \u003d account.getLoans().get(serialNo - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String typeStr \u003d deletedEntryLoan.getType().toString().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Noted. I\u0027ve removed this \" + typeStr + \" loan:\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"  \" + account.getLoans().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getLoans().size() - 1) + \" total loans.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().remove(serialNo - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.addDeletedEntry(deletedEntryLoan);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item deletedEntry \u003d storage.getDeletedEntry();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntry instanceof Loan) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getLoans().add(serialNo - 1, (Loan)deletedEntry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            storage.writeToFile(account);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(account.getLoans().get(serialNo - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Now you have \" + account.getLoans().size() + \" loans listed\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Last deleted entry is of invalid type!!\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 16,
      "chengweixuan": 65
    }
  },
  {
    "path": "src/main/java/moneycommands/DoneGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class DoneGoalCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private int indexNo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the command which initialises the add short-term goal command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * with the goal data within the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd add command inputted from user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public DoneGoalCommand(String cmd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dateTimeFormatter  \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String temp \u003d inputString.replaceAll(\"done goal \", \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            indexNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"done goal \u003cindex\u003e\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (indexNo \u003e account.getShortTermGoals().size() || (indexNo \u003c 1)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The serial number of the Goal is Out Of Bounds!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal doneGoal \u003d  account.getShortTermGoals().get(indexNo - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float price \u003d doneGoal.getPrice();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String desc \u003d doneGoal.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String category \u003d doneGoal.getCategory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LocalDate doneDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (account.getGoalSavings() \u003c price) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Goal Price exceeds Goal Savings\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e \u003d new Expenditure(price, desc, category, doneDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().remove(indexNo - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.addDeletedEntry(doneGoal);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Nice! This Goal is Completed:\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"  \" + doneGoal.toString() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\" Now you have \" + (account.getShortTermGoals().size()) + \" goals in the list.\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand list \u003d new ListGoalsCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        list.execute(account,ui,storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //remove from getExpListTotal, add back to getShortTermGoals()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().remove(account.getExpListTotal().size() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String temp \u003d inputString.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        int indexNo \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Item deletedEntry \u003d storage.getDeletedEntry();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        if (deletedEntry instanceof  Goal) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getShortTermGoals().add(indexNo - 1, (Goal)deletedEntry);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(account.getShortTermGoals().get(indexNo - 1).toString() + \" added to goals\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ui.appendToOutput(\" Now you have \" + account.getShortTermGoals().size() + \" goals listed\\nand \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    + account.getExpListTotal().size()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                    + \" expenses listed\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            throw new DukeException(\"Last deleted entry is of invalid type!!\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 20,
      "therealnickcheong": 77
    }
  },
  {
    "path": "src/main/java/moneycommands/ExitMoneyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ExitMoneyCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ExitMoneyCommand(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"     Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "ChenChao19": 3,
      "cctt1014": 15,
      "therealnickcheong": 6
    }
  },
  {
    "path": "src/main/java/moneycommands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class FindCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String find;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public FindCommand(String cmd) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to search for goal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param itemList goal list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param result search results holder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param keyword keyword to search."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return search results."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String searchGoal(ArrayList\u003cGoal\u003e itemList, StringBuilder result, String keyword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        result.setLength(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Goal goal: itemList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (goal.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                result.append(findCounter).append(\".\").append(goal.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (result.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            result.append(\"No Goals Match Your Search!\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to search for Income."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param itemList Income list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param result search results holder."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param keyword keyword to search."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return keyword to search."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String searchIncome(ArrayList\u003cIncome\u003e itemList, StringBuilder result, String keyword) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        result.setLength(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Income income: itemList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (income.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                result.append(findCounter).append(\".\").append(income.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (result.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            result.append(\"No Income Items Match Your Search!\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to search for Expenditure."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param itemList Expenditure list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param result search results holder."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param keyword keyword to search."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return keyword to search."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String searchExpenditure(ArrayList\u003cExpenditure\u003e itemList, StringBuilder result, String keyword) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        result.setLength(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Expenditure expenditure: itemList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (expenditure.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                result.append(findCounter).append(\".\").append(expenditure.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (result.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            result.append(\"No Expenditure Items Match Your Search!\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to search for Loans."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param itemList Loan list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param result search results holder."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param keyword keyword to search."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return keyword to search."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String searchLoan(ArrayList\u003cLoan\u003e itemList, StringBuilder result, String keyword) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        result.setLength(0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Loan loan: itemList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (loan.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                result.append(findCounter).append(\".\").append(loan.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (result.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            result.append(\"No Loans Match Your Search!\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to search for Instalments."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param itemList Instalment list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param result search results holder."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param keyword keyword to search."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return keyword to search."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String searchInstalment(ArrayList\u003cInstalment\u003e itemList, StringBuilder result, String keyword) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        result.setLength(0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (Instalment instalment: itemList) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (instalment.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                result.append(findCounter).append(\".\").append(instalment.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (result.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            result.append(\"No Instalments Match Your Search!\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (inputString.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"The description of a find cannot be empty.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                find \u003d inputString.split(\"find# \")[1];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                throw new DukeException(\"Only Alphanumeric Search Inputs are Supported\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            StringBuilder descSearch \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String descSearchOutput \u003d searchGoal(account.getShortTermGoals(), descSearch, find);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Goals Found:\\n\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d searchIncome(account.getIncomeListTotal(), descSearch, find);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Income Items Found:\\n\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d searchExpenditure(account.getExpListTotal(), descSearch, find);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Expenditure Items Found:\\n\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d searchLoan(account.getLoans(), descSearch, find);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Loan Items Found:\\n\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            descSearchOutput \u003d searchInstalment(account.getInstalments(), descSearch, find);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer((\"Instalment Items Found:\\n\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(descSearchOutput + \"\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "therealnickcheong": 190
    }
  },
  {
    "path": "src/main/java/moneycommands/GraphCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class GraphCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public GraphCommand(String inputString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd \u003d inputString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (cmd.equals(\"change icon\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToOutput(\"Done.\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else if (cmd.startsWith(\"graph monthly report\") || cmd.startsWith(\"graph income trend\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                || cmd.startsWith(\"graph expenditure trend\") || cmd.startsWith(\"graph finance status /until \")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                if (cmd.startsWith(\"graph finance status /until \")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    String dateString \u003d cmd.split(\" /until \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    LocalDate date \u003d Parser.shortcutTime(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                ui.appendToOutput(\"Got it, graph will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"Check your command. This input graph command is invalid.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "cctt1014": 48
    }
  },
  {
    "path": "src/main/java/moneycommands/InitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class InitCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float userSavings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private float avgExp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * command to initialise Financial Ghost."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param cmd command entered by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param isNewUser checks if is a first time user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException if is an existing user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public InitCommand(String cmd, boolean isNewUser) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        inputString \u003d cmd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (!isNewUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"You\u0027re an existing user\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            userSavings \u003d Float.parseFloat(inputString.split(\" \")[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            avgExp \u003d Float.parseFloat(inputString.split(\" \")[2]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"init [existing savings] [Avg Monthly Expenditure]\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.initialize(userSavings,avgExp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Initialised, you\u0027re ready to use Financial Ghosts\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "therealnickcheong": 50
    }
  },
  {
    "path": "src/main/java/moneycommands/InternalTransferCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class InternalTransferCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private boolean add;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private float amt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * The constructor for this class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param inputString The input command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @throws ParseException The parse exception"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public InternalTransferCommand(String inputString) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String status \u003d inputString.split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (status.equals(\"deposit\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                add \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                inputString \u003d inputString.replaceFirst(\"deposit \", \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            } else if (status.equals(\"withdraw\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                add \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                inputString \u003d inputString.replaceFirst(\"withdraw \", \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            amt \u003d Float.parseFloat(inputString.split(\" \")[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (amt \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"The format for the numbers is wrong, please check and type in again.\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            date \u003d Parser.shortcutTime(inputString.split(\" /at \")[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            String temp \u003d inputString.split(\" /at \")[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            description \u003d temp.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            throw new DukeException(\"The format for the numbers is wrong, please check and type in again.\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return this command will not cease the overall program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker bankTracker \u003d account.findTrackerByName(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        if (add) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.updateDate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.addAmt(amt);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Income income \u003d new Income(amt, \"Deposit to \" + bankTracker.getDescription(), date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            account.getIncomeListTotal().add(income);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            if (bankTracker.predictAmt(date) \u003c amt) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                throw new DukeException(\"Sorry, FG only allow non-zero balance. Here is the account info: \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                        + bankTracker.getBankAccountInfo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.updateDate(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            bankTracker.addAmt(0 - amt);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            Expenditure expenditure \u003d new Expenditure(amt, \"Withdraw from \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                    + bankTracker.getDescription(), \"withdraw from bank\", date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            account.getExpListTotal().add(expenditure);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"  Got it. Here is the current information about this account:\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + bankTracker.getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "cctt1014": 89
    }
  },
  {
    "path": "src/main/java/moneycommands/ListBankTrackerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * This class responds to \"list bank trackers\" command to list down all the existing bank account trackers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ListBankTrackerCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public ListBankTrackerCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method labels whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @return Whether this command means ceasing the overall program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * This method execute the list command to list down all the existing bank"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * account trackers by getting the information from account object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param account The class record all the financial information of the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     * @param storage The class used to store the information to the local disk"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ArrayList\u003cBankTracker\u003e accountList \u003d account.getBankTrackerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToGraphContainer(\"Here are the bank accounts and their info:\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        for (int i \u003d 0; i \u003c accountList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToGraphContainer((i + 1) + \". ----------------------------------------\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToGraphContainer(accountList.get(i).getBankAccountInfo() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            ui.appendToGraphContainer(\"-------------------------------------------\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 10,
      "cctt1014": 41,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/main/java/moneycommands/ListGoalsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * This command lists all short-term goals within the Short-Term Goal List to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListGoalsCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private static final int TICK_NO \u003d 0x2713;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public ListGoalsCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * calculate the percentage progress the user has made towards their goals."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param goalSavings current goal savings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param currGoalPrice price of the goal."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return returns a percentage progress of the goal achieved."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String percentageProgress(float goalSavings, float currGoalPrice) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float percentageProgress \u003d (goalSavings / currGoalPrice) * 100;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return \"[\" + df.format(percentageProgress) + \"%]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * rounds of a float to 2 decimal places."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param f the float to rouond off."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return returns the rounded off float."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public String dpRounding(float f) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return df.format(f);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * calculate the savings required by the user in the month per goal."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param goalSavings current goal savings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param currGoalPrice the price of the goal."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param monthsBetween months till the due date of the goal."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @return returns the amount to save per goal."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public float savingsPerGoal(float goalSavings, float currGoalPrice, float monthsBetween) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (monthsBetween \u003c\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return currGoalPrice - goalSavings;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            return (currGoalPrice - goalSavings) / monthsBetween;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * This method executes the list goals command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * Displays all short-term goals in the Short-Term Goals List to the user according to index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        float savingsReqPerMonth \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d account.getShortTermGoals().size();i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            Goal currGoal \u003d account.getShortTermGoals().get(i - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            float currGoalPrice \u003d currGoal.getPrice();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            LocalDate goalDate \u003d currGoal.getDateBoughtDate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            float monthsBetween \u003d ChronoUnit.MONTHS.between(LocalDate.now(), goalDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            String goalProgress \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            if (account.getGoalSavings() \u003e\u003d currGoalPrice) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                goalProgress \u003d \"[\" + Character.toString((char)TICK_NO) + \"]\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                goalProgress \u003d percentageProgress(account.getGoalSavings(), currGoalPrice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                savingsReqPerMonth +\u003d savingsPerGoal(account.getGoalSavings(), currGoalPrice, monthsBetween);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            ui.appendToGraphContainer(\" \" + i + \".\" + goalProgress"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + account.getShortTermGoals().get(i - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String savingsPerMonth \u003d dpRounding(savingsReqPerMonth);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"current Goal Savings: $\" + decimalFormat.format(account.getGoalSavings()) + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Target Savings for the Month: $\" + decimalFormat.format(savingsReqPerMonth) + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 9,
      "chengweixuan": 3,
      "therealnickcheong": 103
    }
  },
  {
    "path": "src/main/java/moneycommands/ListInstalmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " * This command lists all Instalments within the Instalments List to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class ListInstalmentCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    //@@author ChenChao19"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ListInstalmentCommand(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * This method executes the list instalments command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * Displays all Instalments in the Instalments List to the user according to index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        for (Instalment i : account.getInstalments()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".[\" + df.format(i.getPercentage()) + \"%] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    + i.getDescription() + \" ($\" + df.format(i.equalMonthlyInstalment())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    + \" per month until \" + i.getDateEndDate() + \")\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "ChenChao19": 51
    }
  },
  {
    "path": "src/main/java/moneycommands/ListLoansCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists either the outgoing, incoming or all loans in the Loans List"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * according to user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ListLoansCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command. Isolates the command that determines what type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of loans to list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command List command inputted from user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ListLoansCommand(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        command \u003d command.replaceFirst(\"list \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        command \u003d command.replace(\"loans\", \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        inputString \u003d command.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method calculates the total monetary amount of a type of loan."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param type Type of loan specified by user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return Float monetary amount of the type of loan"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String totalLoanAmount(Loan.Type type, Account account) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case OUTGOING:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getOutgoingLoans()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case INCOMING:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getIncomingLoans()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getLoans()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                total +\u003d l.getPrice();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            total \u003d -1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return decimalFormat.format(total);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list loans command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Determines the type of loan to list and searches the Loan List for the type of"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * loan specified. Returns all loans of that type with the total monetary amount"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of that type of loan and prints to user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException if invalid date is parsed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan.Type searchType;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        switch (inputString) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"incoming\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d Loan.Type.INCOMING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"outgoing\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d Loan.Type.OUTGOING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d Loan.Type.ALL;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            searchType \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (searchType \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getIncomingLoans()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (searchType \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getOutgoingLoans()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (searchType \u003d\u003d Loan.Type.ALL) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            for (Loan l : account.getLoans()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + l.toString() + \"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Oops! Type of list invalid! Please list either incoming, outgoing or all loans\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(\"Total amount of \" + searchType.toString() + \" Loans: $\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(totalLoanAmount(searchType, account) + \"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Got it! List of \" + searchType.toString() + \" Loans printed in the other pane! \\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 4,
      "chengweixuan": 127
    }
  },
  {
    "path": "src/main/java/moneycommands/ListTotalExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all expenditures within the Total Expenditure List to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListTotalExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ListTotalExpenditureCommand(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list all expenditure command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all expenditures in the Total Expenditure List to the user according to index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String totalExpStr \u003d decimalFormat.format(account.getTotalExp());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(\"Total expenditure so far: $\" + totalExpStr + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 7,
      "chengweixuan": 41,
      "therealnickcheong": 8
    }
  },
  {
    "path": "src/main/java/moneycommands/ListTotalIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command lists all income sources within the Total Income List to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class ListTotalIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the list command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ListTotalIncomeCommand(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the list all income command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Displays all income sources in the Total Income List to the user according to index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String totalIncomeStr \u003d decimalFormat.format(account.getTotalIncome());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(\"Total income so far: $\" + totalIncomeStr + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 7,
      "chengweixuan": 40,
      "therealnickcheong": 8
    }
  },
  {
    "path": "src/main/java/moneycommands/MoneyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public abstract class MoneyCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public MoneyCommand(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    public abstract void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public abstract void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "cctt1014": 8,
      "therealnickcheong": 9
    }
  },
  {
    "path": "src/main/java/moneycommands/SettleLoanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command settles the debt of an incoming/outgoing loan in the Loans List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class SettleLoanCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String inputString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private static float amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private static int serialNo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private static Loan.Type type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private static final int SETTLE_ALL_FLAG \u003d -2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private static final int UNDEFINED_TYPE_FLAG \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String loanToString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private boolean isSettled;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String payDirection;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the settle loan command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Determines the type of of loan to settle specified in the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Settle command inputted by user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public SettleLoanCommand(String command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (command.startsWith(\"paid\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"paid \", \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.INCOMING;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (command.startsWith(\"received\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d command.replaceFirst(\"received \", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d Loan.Type.OUTGOING;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            inputString \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            type \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method scans a given ArrayList of loans and returns an ArrayList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * of all the names of the involved party in the loans."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param loanList ArrayList of loans to be scanned"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return ArrayList of names of parties"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private ArrayList\u003cString\u003e getListOfNames(ArrayList\u003cLoan\u003e loanList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ArrayList\u003cString\u003e listOfNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Loan l : loanList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            listOfNames.add(l.getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return listOfNames;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Method returns the index of the loan becoming to the person whose name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * is specified. If the loan is not found, throws a DukeException."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param loanList ArrayList of loans to be checked"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param name String name of the person"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return Integer index of the loan"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When loan is not found"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int getSerialNo(ArrayList\u003cLoan\u003e loanList, String name) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Other party name is empty!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (getListOfNames(loanList).contains(name)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return getListOfNames(loanList).indexOf(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(name + \" does not have an \" + type.toString().toLowerCase() + \" loan\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the serial number of the loan belonging to the person who is specified in"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the user input according to the loan type."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param outgoingLoans ArrayList of outgoing loans to be checked"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param incomingLoans ArrayList of incoming loans to be checked"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param name String name of the person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return Integer index of the loan"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When loan is not found"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int getTypeSerialNo(ArrayList\u003cLoan\u003e outgoingLoans, ArrayList\u003cLoan\u003e incomingLoans, String name)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (type \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return getSerialNo(outgoingLoans, name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else if (type \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            return getSerialNo(incomingLoans, name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return UNDEFINED_TYPE_FLAG;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method settles the debt of a loan."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Sets loan to settled if the entire debt is paid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param loanList ArrayList of loans containing the loan"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param serialNo Integer index of the loan"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the amount is greater than the outstanding debt"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private void setLoanToSettled(ArrayList\u003cLoan\u003e loanList, int serialNo) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (amount \u003e loanList.get(serialNo).getOutstandingLoan()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Whoa! The amount entered is more than debt! \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"Type \u0027all\u0027 to settle the entire debt\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (loanList.get(serialNo).getOutstandingLoan() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Whoa! The loan has already been settled!\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan l \u003d loanList.get(serialNo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        amount \u003d (amount \u003d\u003d SETTLE_ALL_FLAG) ? l.getOutstandingLoan() : amount;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        l.settleLoanDebt(amount);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        description \u003d l.getDescription();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        loanToString \u003d l.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        isSettled \u003d l.getStatus();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        loanList.set(serialNo, l);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the settle loan command. According to the type of loan"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * to be settled specified by user, checks the incoming/outgoing loans for the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * incoming/outgoing loan entry to be settled."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Searches for the loan specified by the user in either the incoming/outgoing"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * ArrayList of loans according the name or index, depending on user input, and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * settles his/her loan with the amount inputted by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If the amount repaid settles the entire debt, the loan is set as settled. Else,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * the amount repaid is deducted from outstanding amount in the loan."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If an outgoing loan is settled, the debt repaid is entered into Total Income List."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * If an incoming loan is settled, the debt repaid is entered into Total Expenditure List."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String regex \u003d type \u003d\u003d Loan.Type.INCOMING ? \" /to \" : \" /from \";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            String[] splitStr \u003d inputString.split(regex, 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (splitStr[0].equals(\"all\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                amount \u003d SETTLE_ALL_FLAG;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                amount \u003d Float.parseFloat(splitStr[0]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (amount \u003c\u003d 0 \u0026\u0026 amount !\u003d SETTLE_ALL_FLAG) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"Amount settled must be more than zero!\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (Parser.isNumeric(splitStr[1])) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                serialNo \u003d Integer.parseInt(splitStr[1]) - 1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                serialNo \u003d getTypeSerialNo(account.getOutgoingLoans(), account.getIncomingLoans(), splitStr[1]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Please enter in the format: \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"paid/received \u003camount\u003e /(to/from) \u003cperson/serialNo\u003e\\n\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (type \u003d\u003d Loan.Type.OUTGOING) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                payDirection \u003d \" from \";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                setLoanToSettled(account.getOutgoingLoans(), serialNo);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Income i \u003d new Income(amount, \"From \" + description, Parser.shortcutTime(\"now\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } else if (type \u003d\u003d Loan.Type.INCOMING) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                payDirection \u003d \" to \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                setLoanToSettled(account.getIncomingLoans(), serialNo);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                Expenditure e \u003d new Expenditure(amount, \"To \" + description, \"Loan Repayment\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        Parser.shortcutTime(\"now\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"The serial number of the loan is Out Of Bounds!\\n\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\" Got it. An amount of $\" + decimalFormat.format(amount) + \" has been paid\" + payDirection);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(description + \" for the following loan: \\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"     \" + loanToString + \"\\n\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (isSettled) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            ui.appendToOutput(\"The \" + type.toString().toLowerCase() + \" loan has been settled\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Loan l;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        case OUTGOING:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getIncomeListTotal().remove(account.getIncomeListTotal().size() - 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            l \u003d account.getOutgoingLoans().get(serialNo);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            l.settleLoanDebt(-amount);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getOutgoingLoans().set(serialNo, l);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        case INCOMING:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getExpListTotal().remove(account.getExpListTotal().size() - 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            l \u003d account.getIncomingLoans().get(serialNo);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            l.settleLoanDebt(-amount);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            account.getIncomingLoans().set(serialNo, l);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage.writeToFile(account);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(\" Last command undone: \\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.appendToOutput(loanToString + \" reverted back to previous state.\\n\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 28,
      "chengweixuan": 202
    }
  },
  {
    "path": "src/main/java/moneycommands/StartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class StartCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    //@@author therealnickcheong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * command to start Financial Ghost if is a first time user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @param isNewUser check is the user is a first time user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * @throws DukeException tells user to use the init command if is a first time user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public StartCommand(boolean isNewUser) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        if (isNewUser) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            message \u003d \"You are a new user please type: init [existing savings] [Avg Monthly Expenditure]\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            throw new DukeException(\"You\u0027re an existing user\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        //System.out.println(\"current Goal Savings: $\" + account.getGoalSavings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.appendToOutput(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 5,
      "therealnickcheong": 39
    }
  },
  {
    "path": "src/main/java/moneycommands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " * This command lets the program know that the user wishes to undo the previous command issued."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class UndoCommand extends  MoneyCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public UndoCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return  false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 33
    }
  },
  {
    "path": "src/main/java/moneycommands/ViewPastExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command allows users to check the expenditure"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * for a previous or future month specified by the user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ViewPastExpenditureCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the check expenditure command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the data for the month and year to check as given in the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Check command inputted from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ViewPastExpenditureCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (command.equals(\"list month\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            month \u003d currDate.getMonthValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            year \u003d currDate.getYear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                String inputString \u003d command.replaceFirst(\"check expenditure \", \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                String[] splitStr \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                month \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                year \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"Please include the year!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"Please input in the format: check expenditure \u003cmonth\u003e \u003cyear\u003e\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the name of a month given the index of the month from 1-12."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param month Index of the month"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String of the month name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String getMonth(int month) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return new DateFormatSymbols().getMonths()[month - 1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the check expenditure command. Takes the input from the user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and checks the Total Expenditure List for expenditures which occur in the month specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the user input. Prints the expenditures found and computes the total expenditure for that"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * month and prints to the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Month is invalid! Please pick a month from 1-12\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (year \u003c 1000 || year \u003e 9999) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Only years dated from 1000-9999 are accepted by Financial Ghost :)\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float totalMonthExpenditure \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Expenditure i : account.getExpListTotal()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (i.getDateBoughtDate().getMonthValue() \u003d\u003d month \u0026\u0026 i.getDateBoughtDate().getYear() \u003d\u003d year) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                totalMonthExpenditure +\u003d i.getPrice();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(\"Total expenditure for \" + getMonth(month) + \" of \" + year + \" : $\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(decimalFormat.format(totalMonthExpenditure) + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "chengweixuan": 97
    }
  },
  {
    "path": "src/main/java/moneycommands/ViewPastIncomeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * This command allows users to check the income"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " * for a previous or future month specified by the user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ViewPastIncomeCommand extends MoneyCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    //@@author chengweixuan"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Constructor of the command which initialises the check income command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * with the data for the month and year to check as given in the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param command Check command inputted from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public ViewPastIncomeCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (command.equals(\"list month\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            month \u003d currDate.getMonthValue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            year \u003d currDate.getYear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                String inputString \u003d command.replaceFirst(\"check income \", \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                String[] splitStr \u003d inputString.split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                month \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                year \u003d Integer.parseInt(splitStr[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"Please include the year!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                throw new DukeException(\"Please input in the format: check income \u003cmonth\u003e \u003cyear\u003e\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * Returns the name of a month given the index of the month from 1-12."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param month Index of the month"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @return String of the month name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private String getMonth(int month) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return new DateFormatSymbols().getMonths()[month - 1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * This method executes the check income command. Takes the input from the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * and checks the Total Income List for expenditures which occur in the month specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * in the user input. Prints the income sources found and computes the total income for that"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * month and prints to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param account Account object containing all financial info of user saved on the programme"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param ui Handles interaction with the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @param storage Saves and loads data into/from the local disk"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws ParseException If invalid date is parsed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     * @throws DukeException When the command is invalid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    public void execute(Account account, Ui ui, MoneyStorage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Month is invalid! Please pick a month from 1-12\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        if (year \u003c 1000 || year \u003e 9999) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            throw new DukeException(\"Only years dated from 1000-9999 are accepted by Financial Ghost :)\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        float totalMonthIncome \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        for (Income i : account.getIncomeListTotal()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            if (i.getPayday().getMonthValue() \u003d\u003d month \u0026\u0026 i.getPayday().getYear() \u003d\u003d year) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.appendToGraphContainer(\" \" + counter + \".\" + i.toString() + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                totalMonthIncome +\u003d i.getPrice();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToOutput(\"Got it, list will be printed in the other pane!\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(\"Total income for \" + getMonth(month) + \" of \" + year + \" : $\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.appendToGraphContainer(decimalFormat.format(totalMonthIncome) + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    //@@author Chianhaoplanks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    public void undo(Account account, Ui ui, MoneyStorage storage) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        throw new DukeException(\"Command can\u0027t be undone!\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 6,
      "chengweixuan": 94,
      "therealnickcheong": 2
    }
  },
  {
    "path": "src/main/resources/view/CircleChart.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c!-- @@author cctt1014 --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root prefHeight\u003d\"261.0\" prefWidth\u003d\"331.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003cPieChart fx:id\u003d\"chart\" layoutX\u003d\"-4.0\" prefHeight\u003d\"337.0\" prefWidth\u003d\"409.0\" titleSide\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 11
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c!-- @@author therealnickcheong --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1e9\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"520.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "therealnickcheong": 18
    }
  },
  {
    "path": "src/main/resources/view/Histogram.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c!-- @@author cctt1014 --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root prefHeight\u003d\"261.0\" prefWidth\u003d\"331.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChart\" layoutX\u003d\"-4.0\" prefHeight\u003d\"337.0\" prefWidth\u003d\"409.0\" titleSide\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"axisX\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cNumberAxis fx:id\u003d\"axisY\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 20
    }
  },
  {
    "path": "src/main/resources/view/LineGraph.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c!-- @@author cctt1014 --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003cfx:root prefHeight\u003d\"261.0\" prefWidth\u003d\"331.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003cLineChart fx:id\u003d\"lineChart\" layoutX\u003d\"-4.0\" prefHeight\u003d\"337.0\" prefWidth\u003d\"409.0\" titleSide\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" fx:id\u003d\"axisX\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" fx:id\u003d\"axisY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "      \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c!-- @@author therealnickcheong --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"640.0\" prefWidth\u003d\"1080.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"guicontroller.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.5\" prefHeight\u003d\"501.0\" prefWidth\u003d\"910.0\" AnchorPane.bottomAnchor\u003d\"178.66666666666669\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "         \u003citems\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "              \u003c!--\u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"834.0\" layoutY\u003d\"600.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "              \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hmax\u003d\"10.0\" hvalue\u003d\"10.0\" pannable\u003d\"true\" prefHeight\u003d\"505.0\" prefWidth\u003d\"539.0\" vmax\u003d\"10.0\" vvalue\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                      \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"536.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "              \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane2\" hbarPolicy\u003d\"NEVER\" hmax\u003d\"10.0\" hvalue\u003d\"10.0\" pannable\u003d\"true\" prefHeight\u003d\"500.0\" prefWidth\u003d\"538.0\" vvalue\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                  \u003cVBox fx:id\u003d\"graphContainer\" prefWidth\u003d\"409.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "         \u003c/items\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.5, 0.5\" layoutY\u003d\"461.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"181.0\" prefWidth\u003d\"1080.0\" AnchorPane.bottomAnchor\u003d\"-2.333333333333343\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "         \u003citems\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "              \u003cTextField fx:id\u003d\"searchBar\" onKeyReleased\u003d\"#handleSearchInput\" prefHeight\u003d\"30\" prefWidth\u003d\"369.0\" promptText\u003d\"Search\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "              \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#help\" prefHeight\u003d\"41.0\" prefWidth\u003d\"830.0\" promptText\u003d\"Commands\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "              \u003cVBox prefHeight\u003d\"30.0\" prefWidth\u003d\"238.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "         \u003c/items\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 1,
      "therealnickcheong": 35
    }
  },
  {
    "path": "src/test/java/FindTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import money.Loan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class FindTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private LocalDate testDate \u003d LocalDate.parse(\"9/10/2015\", dateTimeFormatter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private LocalDate testDate2 \u003d LocalDate.parse(\"9/10/2050\", dateTimeFormatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    FindTest() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testFindCommand()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i1 \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i2 \u003d new Income(1000, \"crypto\", testDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e1 \u003d new Expenditure(500, \"straw\", \"E\", testDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e2 \u003d new Expenditure(1000, \"cup\", \"E\", testDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g1 \u003d new Goal(1000, \"watch\", \"GS\", testDate2, \"HIGH\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g2 \u003d new Goal(2000, \"car\", \"GS\", testDate2, \"MEDIUM\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my bros\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"my daddy\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\", testDate, 120, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Instalment instalment1 \u003d new Instalment(100000, \"mortgage\", \"instalments\", testDate, 180, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getInstalments().add(instalment1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"find# a\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand findGoalCommand \u003d  new FindCommand(testInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        findGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\"Goals Found:\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"1.[GS] watch(target: $1000.00)\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" (to achieve by: 9/10/2050) HIGH\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"2.[GS] car(target: $2000.00)\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" (to achieve by: 9/10/2050) MEDIUM\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"\\n\" + \"Income Items Found:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"1.[I] TA Pay(salary: $2000.00) (Paid On: 9/10/2015)\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"\\n\" + \"Expenditure Items Found:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"1.[E]$500.00 straw(on: 9/10/2015)\\n\" + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"Loan Items Found:\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"1.[Outstanding] [I] my daddy(loan: $1000.00)\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \" (Borrowed On: 9/10/2015) Outstanding Amount: $1000.00\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"\\n\" + \"Instalment Items Found:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"1.[INS]$5000.00 car(on: 9/10/2015)\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"2.[INS]$100000.00 mortgage(on: 9/10/2015)\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"\\n\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getGraphContainerString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    void testBlankFind() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i1 \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e1 \u003d new Expenditure(500, \"straw\", \"E\", testDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g1 \u003d new Goal(1000, \"watch\", \"GS\", testDate2, \"HIGH\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my bros\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\", testDate, 120, 3);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"find \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand findGoalCommand \u003d  new FindCommand(testInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            findGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            assertThat(e.getMessage(), is(\"The description of a find cannot be empty.\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 2,
      "chengweixuan": 1,
      "therealnickcheong": 141
    }
  },
  {
    "path": "src/test/java/controlpanel/UndoCommandHandlerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "package controlpanel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.AddIncomeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.ListTotalIncomeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "public class UndoCommandHandlerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private UndoCommandHandler undoCommandHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    private MoneyStorage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    UndoCommandHandlerTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        undoCommandHandler \u003d new UndoCommandHandler();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        storage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testFixedSizeStack() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ListTotalIncomeCommand dummy \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            undoCommandHandler.updateLastIssuedCommands(dummy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(5, undoCommandHandler.getLastIssuedCommandsSize());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testEmptyStackException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            ListTotalIncomeCommand dummy \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            undoCommandHandler.updateLastIssuedCommands(dummy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                MoneyCommand c \u003d undoCommandHandler.getLastIssuedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                c.execute(account, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoableCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ListTotalIncomeCommand dummy \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        undoCommandHandler.updateLastIssuedCommands(dummy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            MoneyCommand c \u003d undoCommandHandler.getLastIssuedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            c.undo(account, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 62,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/test/java/help/AutoCompleteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AutoCompleteTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private final String[] list \u003d {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"init [existing savings] [Avg Monthly Expenditure]\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"add income [desc] /amt [amount in dollars] /on [date]\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"spent [desc] /amt [amount in dollars] /cat [category] /on [date]\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete income [index]\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete expenditure [index]\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all income\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all expenditure\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list month income\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list month expenditure\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"check income [month] [year]\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"check expenditure [month] [year]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"goal [desc] /amt [cost] /by [d/M/yyyy] /priority [priority level]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete goal [index]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list goals\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"done goal [index]\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"commit goal [index 1, index 2,...]\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"add instalment [desc] /amt [cost] /within [number of months] months \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"/from [d/M/yyyy] /percentage [annual interest rate]\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete instalment [index]\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all instalments\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"lent [other party] /amt [cost] /on [date]\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"borrowed [other party] /amt [cost] /on [date]\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete loan [index]\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list all loans\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list incoming loans\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list outgoing loans\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"paid [amount] /to [other party]\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"received [amount] /from [other party]\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"bank-account [desc] /amt [initial amount of money] /at [initial date] /rate [interest rate]\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"delete bank-account [index of the tracker]\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"check-balance [desc] /at [the future date]\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"deposit [amount] [desc] /at [date]\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"withdraw [amount] [desc] /at [date]\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"list bank trackers\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report histogram\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report line_graph\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph monthly report pie_chart\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend histogram\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend line_graph\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph income trend pie_chart\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend histogram\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend line_graph\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph expenditure trend pie_chart\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"graph finance status /until [date]\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        \"change icon\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"undo\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        \"bye\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private List\u003cString\u003e commandList \u003d Arrays.asList(list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AutoCompleteTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Collections.sort(commandList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testGetAutoComplete() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        AutoComplete autoComplete \u003d new AutoComplete();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(commandList, autoComplete.getCommandList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 73,
      "cctt1014": 1
    }
  },
  {
    "path": "src/test/java/help/HistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class HistoryTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testHistory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.addingCommandsEntered(\"This is command 1\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"This is command 1\", history.getCommandsEntered().get(0));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.addingCommandsEntered(\"This is command 2\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.addingCommandsEntered(\"This is command 3\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.setFlagFalse();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, history.getFlag());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.setFlagTrue();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, history.getFlag());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(3, history.getMaxIndex());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.setCurrIndex();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(3, history.getCurrIndex());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.setFlagForFirstPress();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, history.getFlagForFirstPress());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.getPreviousCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"This is command 3\", history.getCommandsEntered().get(history.getCurrIndex()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.getPreviousCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"This is command 2\", history.getCommandsEntered().get(history.getCurrIndex()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.getPreviousCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"This is command 1\", history.getCommandsEntered().get(history.getCurrIndex()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        history.getPreviousCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"This is command 1\", history.getCommandsEntered().get(history.getCurrIndex()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 38
    }
  },
  {
    "path": "src/test/java/help/TimingShortcutTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddIncomeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "class TimingShortcutTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private MoneyStorage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    TimingShortcutTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testNowTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on now\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + nowDate + \")\\n\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testTomorrowTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on tmr\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String tmrDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + tmrDate + \")\\n\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testYesterdayTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on ytd\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusDays(-1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String ytdDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + ytdDate + \")\\n\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testLastWeekTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on lstwk\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusWeeks(-1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String lastWeekDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + lastWeekDate + \")\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testNextWeekTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on nxtwk\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusWeeks(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nextWeekDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + nextWeekDate + \")\\n\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testLastMonthTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on lstmth\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusMonths(-1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String lastMonthDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + lastMonthDate + \")\\n\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testNextMonthTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on nxtmth\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusMonths(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nextMonthDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + nextMonthDate + \")\\n\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testLastYearTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on lstyr\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusYears(-1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String lastYearDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + lastYearDate + \")\\n\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testNextYearTimingShortcuts() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nowInput \u003d \"add income TA /amt 530 /on nxtyr\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addNowCommand \u003d new AddIncomeCommand(nowInput);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addNowCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now().plusYears(1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String nextYearDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $530.00) (Paid On: \" + nextYearDate + \")\\n\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 150
    }
  },
  {
    "path": "src/test/java/money/BankTrackerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class BankTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private BankTracker sample1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LocalDate sampleDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private LocalDate sampleDate2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    BankTrackerTest() throws IOException, ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sampleDate \u003d Parser.shortcutTime(\"10/10/2018\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sample1 \u003d new BankTracker(\"OCBC\", 100, sampleDate, 0.00);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void getBankAccountInfo_validInput_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"  Name: OCBC\\n  Balance: 100.00\\n  Latest Update Date: 10/10/2018\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"  Interest Rate: 0.0\", sample1.getBankAccountInfo());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void getDescription_validInput_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"OCBC\", sample1.getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void getLatestDate_validInput_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(sampleDate, sample1.getLatestDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void getAmt_validInput_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(100.00, sample1.getAmt());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void getRate_validInput_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(0.00, sample1.getRate());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void addAmt_validInput_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sample1.addAmt(100);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(200.00, sample1.getAmt());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void updateDate_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sampleDate2 \u003d Parser.shortcutTime(\"11/11/2019\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sample1.updateDate(sampleDate2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(sampleDate2, sample1.getLatestDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void updateDate_dateIsTooEarly_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sampleDate2 \u003d Parser.shortcutTime(\"1/1/2000\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e sample1.updateDate(sampleDate2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void predictAmt_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sampleDate2 \u003d Parser.shortcutTime(\"11/11/2020\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(100, sample1.predictAmt(sampleDate2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void predictAmt_dateIsTooEarly_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        sampleDate2 \u003d Parser.shortcutTime(\"1/1/2000\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e sample1.predictAmt(sampleDate2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 93
    }
  },
  {
    "path": "src/test/java/money/ExpenditureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ListTotalExpenditureCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.AddExpenditureCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class ExpenditureTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private MoneyStorage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate testDate \u003d LocalDate.parse(\"9/10/1997\", dateTimeFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    ExpenditureTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testAddExpenditure() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String testAdd \u003d \"spent sick sirloin steak /amt 30 /cat food /on 9/10/1997\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addExpenditureCommand \u003d new AddExpenditureCommand(testAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addExpenditureCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this to your total spending: \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [E]$30.00 sick sirloin steak (on: 9/10/1997)\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testListAllExpenditure() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e1 \u003d new Expenditure(70, \"Flowers for the lady\", \"present\", testDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e2 \u003d new Expenditure(50, \"Lego for the boy\", \"toy\", testDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand listAllExpenditureCommand \u003d new ListTotalExpenditureCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        listAllExpenditureCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[E]$70.00 Flowers for the lady(on: 9/10/1997)\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" 2.[E]$50.00 Lego for the boy(on: 9/10/1997)\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Total expenditure so far: $120.00\\n\", ui.getGraphContainerString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testDeleteExpenditure() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e2 \u003d new Expenditure(50, \"Doll for the girl\", \"toy\", testDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String deleteInput \u003d \"delete expenditure 1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand deleteExpenditureCommand \u003d new DeleteExpenditureCommand(deleteInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        deleteExpenditureCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this expenditure:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"  [E]$50.00 Doll for the girl(on: 9/10/1997)\\n\", ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"spent useless stuff /amt rubbish /cat 3209 \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand invalidAddCommand \u003d new AddExpenditureCommand(invalidInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please enter in the format: \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"spent \u003cdescription\u003e /amt \u003camount\u003e /cat \u003ccategory\u003e /on \u003cdate\u003e\\n\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidDateException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"spent useless stuff /amt 2000000 /cat rubbish /on 222/43/123431 \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand invalidAddCommand \u003d new AddExpenditureCommand(invalidInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"delete expenditure yo yo \";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidAddCommand \u003d new DeleteExpenditureCommand(invalidInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    is(\"Please enter a numerical number as the index of the expenditure to be deleted\\n\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoAddExpenditure() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String testAdd \u003d \"spent Flowers for the lady /amt 70 /cat present /on 9/10/1997\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        AddExpenditureCommand testcmd \u003d new AddExpenditureCommand(testAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        testcmd.execute(account, ui, storage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure exp \u003d new Expenditure(70, \"Flowers for the lady \", \"present\", testDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        testcmd.undo(account, ui, storage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + exp.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getExpListTotal().size() + \" expenses listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoDeleteExpenditure() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Expenditure e2 \u003d new Expenditure(50, \"Doll for the girl\", \"toy\", testDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().add(e2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        DeleteExpenditureCommand cmd \u003d new DeleteExpenditureCommand(\"delete expenditure 1\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        cmd.execute(account, ui, storage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        cmd.undo(account, ui, storage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + e2.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getExpListTotal().size() + \" expenses listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 28,
      "chengweixuan": 115,
      "therealnickcheong": 7
    }
  },
  {
    "path": "src/test/java/money/GoalsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.AddGoalCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.CommitGoalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.DeleteGoalCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.DoneGoalCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ListGoalsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class GoalsTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private LocalDate testDate \u003d LocalDate.parse(\"9/10/2021\", dateTimeFormatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private LocalDate testDate2 \u003d LocalDate.parse(\"9/10/2050\", dateTimeFormatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private static final int TICK_NO \u003d 0x2713;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    GoalsTest() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testAddGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"goal buy Motorbike /amt 10000 /by 15/1/2050 /priority HIGH\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand addGoalCommand \u003d  new AddGoalCommand(testInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        addGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this Goal: \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"     [GS] buy Motorbike (target: $10000.00)\\n (to achieve by: 15/1/2050) HIGH\\n\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testDeleteGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(1000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand deleteGoalCommand \u003d  new DeleteGoalCommand(\"delete goal 1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        deleteGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this Goal:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"  [GS] watch(target: $1000.00)\\n (to achieve by: 9/10/2021) HIGH\\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testDoneGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(1000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"done goal 1\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand doneGoalCommand \u003d  new DoneGoalCommand(testInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        doneGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        LocalDate doneDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String todayDate \u003d doneDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" Nice! This Goal is Completed:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"  [GS] watch(target: $1000.00)\\n (to achieve by: 9/10/2021) HIGH\\n\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\"[E]$1000.00 watch(on: \" + todayDate + \")\", account.getExpListTotal().get(0).toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testListGoal()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e \u003d new Expenditure(1000, \"straw\", \"E\", testDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g1 \u003d new Goal(1000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g2 \u003d new Goal(2000, \"car\", \"GS\", testDate, \"MEDIUM\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand listGoalCommand \u003d  new ListGoalsCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        listGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" 1.\" + \"[\" + Character.toString((char)TICK_NO) + \"]\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"[GS] watch(target: $1000.00)\\n (to achieve by: 9/10/2021) HIGH\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 2.[50%][GS] car(target: $2000.00)\\n (to achieve by: 9/10/2021) MEDIUM\\n\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getGraphContainerString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testCommitGoalUpcoming()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Expenditure e \u003d new Expenditure(500, \"straw\", \"E\", testDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().add(e);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g1 \u003d new Goal(1000, \"watch\", \"GS\", testDate2, \"HIGH\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g2 \u003d new Goal(2000, \"car\", \"GS\", testDate2, \"MEDIUM\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g3 \u003d new Goal(100, \"pen\", \"GS\", testDate2, \"LOW\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g4 \u003d new Goal(300, \"computer\", \"GS\", testDate2, \"LOW\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g4);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"commit goal 1,3\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand commitGoalCommand \u003d  new CommitGoalCommand(testInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        commitGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" 1.\" + \"[\" + Character.toString((char)TICK_NO) + \"]\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"[GS] watch(target: $1000.00)\\n (to achieve by: 9/10/2050) HIGH\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 2.[75%][GS] car(target: $2000.00)\\n (to achieve by: 9/10/2050) MEDIUM\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 3.\" + \"[\" + Character.toString((char)TICK_NO) + \"]\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"[GS] pen(target: $100.00)\\n (to achieve by: 9/10/2050) LOW\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 4.\" + \"[\" + Character.toString((char)TICK_NO) + \"]\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"[GS] computer(target: $300.00)\\n (to achieve by: 9/10/2050) LOW\\n\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getGraphContainerString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        assertEquals(\" 1.[20%][GS] car(target: $2000.00)\\n (to achieve by: 9/10/2050) MEDIUM\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" 2.\" + \"[\" + Character.toString((char)TICK_NO) + \"]\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"[GS] computer(target: $300.00)\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \" (to achieve by: 9/10/2050) LOW\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"Goal Savings after commit: $400.00\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"Target Savings for the Month after commit: $4.32\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"current Goal Savings: $1500.00\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"Target Savings for the Month: $1.35\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"Got it, list will be printed in the other pane!\\n\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testInvalidAmt()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"goal buy Motorbike /amt 1h2h2. /by 15/1/2050 /priority HIGH\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand addGoalCommand \u003d  new AddGoalCommand(testInput);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            addGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please enter in the format: \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                    + \"goal \u003cdesc\u003e /amt \u003camount\u003e /by \u003cdate\u003e /priority \u003cHIGH/MEDIUM/LOW\u003e\\n\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testInvalidAddGoalCommand()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"goalbuy a house/amt 100 /by 15/1/2050 /priority HIGH\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            MoneyCommand c \u003d Parser.moneyParse(testInput, false);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            c.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            assertThat(e.getMessage(), is(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testInvalidDate()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"goal buy Motorbike /amt 1000 /by 15 Jan 2050 /priority HIGH\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand addGoalCommand \u003d  new AddGoalCommand(testInput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            addGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            assertThat(e.getMessage(), is(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testDeleteExceedSerial()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(1000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand deleteGoalCommand \u003d  new DeleteGoalCommand(\"delete goal 2\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            deleteGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            assertThat(e.getMessage(), is(\"The serial number of the task is Out Of Bounds!\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testDoneGoalExceedSavings()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(3000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"done goal 1\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand doneGoalCommand \u003d  new DoneGoalCommand(testInput);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            doneGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "            assertThat(e.getMessage(), is(\"Goal Price exceeds Goal Savings\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoAddGoal() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"goal buy Motorbike /amt 10000 /by 9/10/2021 /priority HIGH\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand addGoalCommand \u003d  new AddGoalCommand(testInput);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Goal g \u003d new Goal(10000, \"buy Motorbike \", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addGoalCommand.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + g.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + account.getShortTermGoals().size() + \" goals listed\\ncurrent Goal Savings: $1000.00\\n\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"Target Savings for the Month: $.00\\n\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoDeleteGoal() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Goal g \u003d new Goal(1000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand deleteGoalCommand \u003d  new DeleteGoalCommand(\"delete goal 1\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteGoalCommand.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + g.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + account.getShortTermGoals().size() + \" goals listed\\ncurrent Goal Savings: $1000.00\\n\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"Target Savings for the Month: $.00\\n\""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoDoneGoal() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Income i \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Goal g \u003d new Goal(1000, \"watch\", \"GS\", testDate, \"HIGH\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getShortTermGoals().add(g);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String testInput \u003d \"done goal 1\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand doneGoalCommand \u003d  new DoneGoalCommand(testInput);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        doneGoalCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        doneGoalCommand.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + g.toString() + \" added to goals\\n Now you have \""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            + account.getShortTermGoals().size() + \" goals listed\\nand \" + account.getExpListTotal().size()"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "            + \" expenses listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getShortTermGoals().clear();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 51,
      "ChenChao19": 2,
      "therealnickcheong": 292
    }
  },
  {
    "path": "src/test/java/money/IncomeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.AddIncomeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.DeleteIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ListTotalIncomeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "public class IncomeTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private LocalDate testDate \u003d LocalDate.parse(\"9/10/2015\", dateTimeFormatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    private LocalDate testDate2 \u003d LocalDate.parse(\"9/10/2050\", dateTimeFormatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    IncomeTest() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testAddIncome() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String testInput \u003d \"add income TA /amt 560 /on 10/12/2040\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand addIncomeCommand \u003d new AddIncomeCommand(testInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        addIncomeCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this income source: \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"     [I] TA (salary: $560.00) (Paid On: 10/12/2040)\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testDeleteIncome() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        String testInput \u003d \"delete income 1\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand deleteIncomeCommand \u003d new DeleteIncomeCommand(testInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        deleteIncomeCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this income source:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"  [I] TA Pay(salary: $2000.00) (Paid On: 9/10/2015)\\n\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getOutputString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    public void testListAllIncome() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i1 \u003d new Income(2000, \"TA Pay\", testDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income i2 \u003d new Income(1000, \"crypto money\", testDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().add(i2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand listTotalIncomeCommand \u003d new ListTotalIncomeCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        listTotalIncomeCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[I] TA Pay(salary: $2000.00) (Paid On: 9/10/2015)\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \" 2.[I] crypto money(salary: $1000.00) (Paid On: 9/10/2015)\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                        + \"Total income so far: $3000.00\\n\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getGraphContainerString().split(\" Now\")[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidCommandException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"add income side job /amt rubbish  \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand invalidAddCommand \u003d new AddIncomeCommand(invalidInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please enter in the format: \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"add income \u003cdescription\u003e /amt \u003camount\u003e /on \u003cdate\u003e\\n\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidDateException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"add income amaze stuff /amt 2000000 /on 222/34234/123431 \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand invalidAddCommand \u003d new AddIncomeCommand(invalidInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"delete income yo yo ho\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidAddCommand \u003d new DeleteIncomeCommand(invalidInput);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    is(\"Please enter a numerical number as the index of the income source to be deleted\\n\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoAddIncome() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        AddIncomeCommand test \u003d new AddIncomeCommand(\"add income TA /amt 560 /on 9/10/2015\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        test.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        test.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Income incomeTest \u003d new Income(560, \"TA \", testDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Assertions.assertEquals(\" Last command undone: \\n\" + incomeTest.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getIncomeListTotal().size() + \" income sources listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoDeleteIncome() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Income i \u003d new Income(560, \"TA \", testDate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getIncomeListTotal().add(i);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        DeleteIncomeCommand deleteIncomeCommand \u003d new DeleteIncomeCommand(\"delete income 1\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteIncomeCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteIncomeCommand.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + i.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getIncomeListTotal().size() + \" income sources listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 29,
      "ChenChao19": 4,
      "chengweixuan": 61,
      "therealnickcheong": 73
    }
  },
  {
    "path": "src/test/java/money/InstalmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class InstalmentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String testDate \u003d \"9/10/1997\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate dateTestDate \u003d LocalDate.parse(testDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to initialise the data path for the tests to populate."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public InstalmentTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testInstalment() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                dateTestDate, 120, 3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalment.isPayTheMonth();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, instalment.getPayForTheMonth());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalment.isNotPayTheMonth();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, instalment.getPayForTheMonth());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"car\", instalment.getDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(5000.0, instalment.getPrice());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"instalments\", instalment.getCategory());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(120, instalment.getNumOfPayments());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"9/10/1997\", instalment.getBoughtDate());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"9/10/2007\", instalment.getDateEndDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"[INS]\" + \"$\" + instalment.getPriceStr() + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + instalment.getDescription() + \"(on: \" + instalment.getBoughtDate() + \")\", instalment.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 3,
      "ChenChao19": 61,
      "therealnickcheong": 4
    }
  },
  {
    "path": "src/test/java/money/LoansTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import controlpanel.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.AddLoanCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.DeleteLoanCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ListLoansCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.SettleLoanCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.MoneyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "import moneycommands.ExitMoneyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "class LoansTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private MoneyStorage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate testDate \u003d LocalDate.parse(\"9/10/1997\", dateTimeFormatter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    LoansTest() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testAddOutgoingLoan() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String addInput \u003d \"lent my friends /amt 500 /on 9/10/1997\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand addOutgoingLoanCommand \u003d new AddLoanCommand(addInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        addOutgoingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this outgoing loan: \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"     [Outstanding] [O] my friends(loan: $500.00) (Lent On: 9/10/1997) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $500.00\\n\" + \" Now you have \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + account.getLoans().size() + \" loans listed and \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + account.getOutgoingLoans().size() + \" outgoing loans\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testAddIncomingLoan() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String addInput \u003d \"borrowed my daddy /amt 1000 /on 9/10/1997\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand addIncomingLoanCommand \u003d new AddLoanCommand(addInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addIncomingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this incoming loan: \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"     [Outstanding] [I] my daddy(loan: $1000.00) (Borrowed On: 9/10/1997) \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $1000.00\\n\" + \" Now you have \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + account.getLoans().size() + \" loans listed and \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + account.getIncomingLoans().size() + \" incoming loans\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testListAllLoans() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my bros\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"my mama\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String listInput \u003d \"list all loans\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand listAllLoansCommand \u003d new ListLoansCommand(listInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        listAllLoansCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it! List of ALL Loans printed in the other pane! \\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[Outstanding] [O] my bros(loan: $500.00) (Lent On: 9/10/1997) \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $500.00\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" 2.[Outstanding] [I] my mama(loan: $1000.00) (Borrowed On: 9/10/1997) \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $1000.00\\n\" + \"Total amount of ALL Loans: $1500.00\\n\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getGraphContainerString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testListIncomingLoans() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my bros\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"my bras\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String listInput \u003d \"list incoming loans\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand listAllLoansCommand \u003d new ListLoansCommand(listInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        listAllLoansCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it! List of INCOMING Loans printed in the other pane! \\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[Outstanding] [I] my bras(loan: $1000.00) (Borrowed On: 9/10/1997) \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $1000.00\\n\" + \"Total amount of INCOMING Loans: $1000.00\\n\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getGraphContainerString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testListOutgoingLoans() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my buds\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"my mama\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String listInput \u003d \"list outgoing loans\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand listAllLoansCommand \u003d new ListLoansCommand(listInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        listAllLoansCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it! List of OUTGOING Loans printed in the other pane! \\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[Outstanding] [O] my buds(loan: $500.00) (Lent On: 9/10/1997) \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $500.00\\n\" + \"Total amount of OUTGOING Loans: $500.00\\n\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getGraphContainerString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testSettleOutgoingLoan() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan settleLoan \u003d new Loan(500, \"my friends\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(settleLoan);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String settleInput \u003d \"received 300 /from my friends\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand settleOutgoingLoanCommand \u003d new SettleLoanCommand(settleInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        settleOutgoingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. An amount of $300.00 has been paid from my friends for the\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" following loan: \\n\" + \"     [Outstanding] [O] my friends(loan: $500.00) \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"(Lent On: 9/10/1997) Outstanding Amount: $200.00\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String settleAllInput \u003d \"received all /from my friends\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand settleEntireLoanCommand \u003d new SettleLoanCommand(settleAllInput);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        settleEntireLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String passDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. An amount of $200.00 has been paid from my friends for the\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" following loan: \\n\" + \"     [Settled] [O] my friends(loan: $500.00) \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"(Lent On: 9/10/1997) (Paid Back On: \" + passDate + \")\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"The outgoing loan has been settled\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testSettleIncomingLoan() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan settleLoan \u003d new Loan(1000, \"my daddy\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(settleLoan);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String settleInput \u003d \"paid 400 /to my daddy\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand settleOutgoingLoanCommand \u003d new SettleLoanCommand(settleInput);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        settleOutgoingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. An amount of $400.00 has been paid to my daddy for the\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" following loan: \\n\" + \"     [Outstanding] [I] my daddy(loan: $1000.00) \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"(Borrowed On: 9/10/1997) Outstanding Amount: $600.00\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String settleAllInput \u003d \"paid all /to my daddy\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand settleEntireLoanCommand \u003d new SettleLoanCommand(settleAllInput);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        settleEntireLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String passDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Got it. An amount of $600.00 has been paid to my daddy for the\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" following loan: \\n\" + \"     [Settled] [I] my daddy(loan: $1000.00) \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"(Borrowed On: 9/10/1997) (Paid Back On: \" + passDate + \")\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"The incoming loan has been settled\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testDeleteLoans() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my bros\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"my daddy\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String deleteFirstInput \u003d \"delete loan 2\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand deleteLoanCommand \u003d new DeleteLoanCommand(deleteFirstInput);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        deleteLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String passDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this incoming loan:\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"  [Outstanding] [I] my daddy(loan: $1000.00) (Borrowed On: 9/10/1997) \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $1000.00\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" Now you have 1 total loans.\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String deleteSecondInput \u003d \"delete loan 1\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand deleteSecondLoanCommand \u003d new DeleteLoanCommand(deleteSecondInput);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        deleteSecondLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this outgoing loan:\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"  [Outstanding] [O] my bros(loan: $500.00) (Lent On: 9/10/1997) \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Outstanding Amount: $500.00\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \" Now you have 0 total loans.\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testExceedAmount() throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan settleLoan \u003d new Loan(500, \"my grandfather\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(settleLoan);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String exceedInput \u003d \"paid 600 /to 1\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand exceedSettleCommand \u003d new SettleLoanCommand(exceedInput);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            exceedSettleCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Whoa! The amount entered is more than debt! \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"Type \u0027all\u0027 to settle the entire debt\\n\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testExceedSerialNumber() throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"OutgoingLoan 1\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"IncomingLoan 1\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String settleOutgoingLoanInput \u003d \"received 20 /from -1\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand exceedOutgoingCommand \u003d new SettleLoanCommand(settleOutgoingLoanInput);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            exceedOutgoingCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"The serial number of the loan is Out Of Bounds!\\n\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String settleIncomingLoanInput \u003d \"paid 2 /to 100\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand exceedIncomingCommand \u003d new SettleLoanCommand(settleIncomingLoanInput);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            exceedIncomingCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"The serial number of the loan is Out Of Bounds!\\n\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testLoanDoesNotExist() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String notExistInput \u003d \"received 100 /from Brandon Frasier\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand notExistOutgoingCommand \u003d new SettleLoanCommand(notExistInput);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            notExistOutgoingCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Brandon Frasier does not have an outgoing loan\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String notExistSecondInput \u003d \"paid 400 /to Vivian Hsu\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand notExistIncomingCommand \u003d new SettleLoanCommand(notExistSecondInput);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            notExistIncomingCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Vivian Hsu does not have an incoming loan\"));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidAddInput() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"borrowed from my daddy /amt 200000     \";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand invalidAddCommand \u003d new AddLoanCommand(invalidInput);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidAddCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException | ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please enter in the format: \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"lent/borrowed \u003cperson\u003e /amt \u003camount\u003e /on \u003cdate\u003e\\n\"));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidDateInput \u003d \"lent my boys /amt 3000 /on blah blah blah\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand invalidDateCommand \u003d new AddLoanCommand(invalidDateInput);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidDateCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidDeleteInput() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"delete loan whoa whoa\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidDeleteCommand \u003d new DeleteLoanCommand(invalidInput);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidDeleteCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    is(\"Please enter a numerical number as the index of the loan to be deleted\\n\"));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidIndexInput \u003d \"delete loan -2\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidIndexCommand \u003d new DeleteLoanCommand(invalidIndexInput);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidIndexCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"The serial number of the loan is Out Of Bounds!\"));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoAddLoans() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String addInputOut \u003d \"lent my friends /amt 500 /on 9/10/1997\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand addOutgoingLoanCommand \u003d new AddLoanCommand(addInputOut);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addOutgoingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Loan l \u003d new Loan(500, \"my friends\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addOutgoingLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + l.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getLoans().size() + \" loans listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String addInputIn \u003d \"borrowed my daddy /amt 1000 /on 9/10/1997\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand addIncomingLoanCommand \u003d new AddLoanCommand(addInputIn);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addIncomingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        addIncomingLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Loan l1 \u003d new Loan(1000, \"my daddy\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + l1.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getLoans().size() + \" loans listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoDeleteLoans() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Loan outgoingLoan \u003d new Loan(500, \"my bros\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Loan incomingLoan \u003d new Loan(1000, \"my daddy\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().add(outgoingLoan);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().add(incomingLoan);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String deleteFirstInput \u003d \"delete loan 2\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand deleteLoanCommand \u003d new DeleteLoanCommand(deleteFirstInput);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + incomingLoan.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getLoans().size() + \" loans listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String deleteSecondInput \u003d \"delete loan 1\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand deleteSecondLoanCommand \u003d new DeleteLoanCommand(deleteSecondInput);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteSecondLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteSecondLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + outgoingLoan.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getLoans().size() + \" loans listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoSettleOutgoingLoan() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Loan settleLoan \u003d new Loan(500, \"my friends\", testDate, Loan.Type.OUTGOING);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().add(settleLoan);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String settleInput \u003d \"received 300 /from my friends\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand settleOutgoingLoanCommand \u003d new SettleLoanCommand(settleInput);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleOutgoingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleOutgoingLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + \"[Outstanding] [O] my friends(loan: $500.00) \""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + \"(Lent On: 9/10/1997) Outstanding Amount: $200.00\""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + \" reverted back to previous state.\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String settleAllInput \u003d \"received all /from my friends\";"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand settleEntireLoanCommand \u003d new SettleLoanCommand(settleAllInput);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleEntireLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleEntireLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String passDate \u003d currDate.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + \"[Settled] [O] my friends(loan: $500.00) \""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + \"(Lent On: 9/10/1997) (Paid Back On: \" + passDate + \") reverted back to previous state.\\n\","
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoSettleIncomingLoan() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Loan settleLoan \u003d new Loan(1000, \"my daddy\", testDate, Loan.Type.INCOMING);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().add(settleLoan);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String settleInput \u003d \"paid 400 /to my daddy\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand settleIncomingLoanCommand \u003d new SettleLoanCommand(settleInput);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleIncomingLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleIncomingLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + \"[Outstanding] [I] my daddy(loan: $1000.00) \""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"(Borrowed On: 9/10/1997) Outstanding Amount: $600.00\""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + \" reverted back to previous state.\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String settleAllInput \u003d \"paid all /to my daddy\";"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand settleEntireLoanCommand \u003d new SettleLoanCommand(settleAllInput);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleEntireLoanCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String passDate \u003d dateTimeFormatter.format(currDate);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        settleEntireLoanCommand.undo(account, ui, storage);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + \"[Settled] [I] my daddy(loan: $1000.00) \""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \"(Borrowed On: 9/10/1997) (Paid Back On: \" + passDate"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                        + \") reverted back to previous state.\\n\","
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getLoans().clear();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d new ExitMoneyCommand();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 106,
      "ChenChao19": 2,
      "chengweixuan": 297,
      "therealnickcheong": 10
    }
  },
  {
    "path": "src/test/java/moneycommands/AddInstalmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AddInstalmentTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String testDate \u003d \"9/10/1997\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate dateTestDate \u003d LocalDate.parse(testDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * the method to initialise the data path for the tests to populate."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AddInstalmentTest() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testAddInstalmentCommand() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String testInput \u003d \"add instalment mortgage /amt 100000 /within 200 months /from 12/12/2010 /percentage 6\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand addInstalmentCommand \u003d  new AddInstalmentCommand(testInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, addInstalmentCommand.isExit());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        addInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        int last \u003d account.getInstalments().size() - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this to your instalments: \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + account.getInstalments().get(last).toString() + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" Now you have \" + account.getInstalments().size() + \" instalments listed\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" You are paying $\" + df.format(account.getInstalments().get(last).equalMonthlyInstalment())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" per month\\n\" + \" For \" + account.getInstalments().get(last).getNumOfPayments() + \" months\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" Until \" + account.getInstalments().get(last).getDateEndDate() + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" The total amount you will pay is $\" + account.getInstalments().get(last).totalAmount()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \"Got it, list will be printed in the other pane!\\n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testAddInvalidNumbers()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String testInvalidAmount \u003d \"add instalment mortgage /amt 100gse2 /within 200 months \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"/from 12/12/2010 /percentage 6\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String testInvalidNoOfMonths \u003d \"add instalment mortgage /amt 100000 /within 2e0 months\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"/from 12/12/2010 /percentage 6\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String testInvalidInterestRate \u003d \"add instalment mortgage /amt 100000 /within 200 months \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                + \"/from 12/12/2010 /percentage f\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand addInstalmentCommand1 \u003d  new AddInstalmentCommand(testInvalidAmount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand addInstalmentCommand2 \u003d  new AddInstalmentCommand(testInvalidNoOfMonths);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand addInstalmentCommand3 \u003d  new AddInstalmentCommand(testInvalidInterestRate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            addInstalmentCommand1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            addInstalmentCommand2.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            addInstalmentCommand3.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please enter in the format: \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                    + \"add instalment \u003cdesc\u003e /amt \u003camount\u003e /within \u003cnumber of months of payment\u003e months \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                    + \"/from \u003cdate\u003e /percentage \u003cannual interest rate\u003e%\\n\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testInvalidDate()throws ParseException, DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String testInput \u003d \"add instalment mortgage /amt 100000 /within 200 months /from 12/12201 /percentage 6\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand addInstalmentCommand \u003d  new AddInstalmentCommand(testInput);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            addInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            assertThat(e.getMessage(), is(\"Invalid date! Please enter date in the format: d/m/yyyy\\n\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoAddInstalment() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        AddInstalmentCommand cmd \u003d new AddInstalmentCommand(\"add instalment mortgage /amt 100000 \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                + \"/within 200 months /from 9/10/1997 /percentage 6\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "        Instalment instalment \u003d new Instalment(100000, \"mortgage\", \"instalments\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "                dateTestDate, 200, 6);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        cmd.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + instalment.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getInstalments().size() + \" instalments listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 14,
      "ChenChao19": 111,
      "chengweixuan": 1,
      "therealnickcheong": 8
    }
  },
  {
    "path": "src/test/java/moneycommands/AutoUpdateInstalmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class AutoUpdateInstalmentTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String testDate \u003d \"9/10/1997\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate dateTestDate \u003d LocalDate.parse(testDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to initialise the data path for the tests to populate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public AutoUpdateInstalmentTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testAutoUpdateInstalment() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment instalment \u003d new Instalment(50000, \"car\", \"instalments\", currDate, 100, 3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        AutoUpdateInstalmentCommand autoUpdateInstalmentCommand \u003d new AutoUpdateInstalmentCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, autoUpdateInstalmentCommand.isExit());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(LocalDate.now(), autoUpdateInstalmentCommand.getCurrDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoUpdateInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        LocalDate testDate1 \u003d autoUpdateInstalmentCommand.getCurrDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(testDate1, currDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        LocalDate testDate2 \u003d testDate1.plusMonths(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(testDate2, currDate.plusMonths(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoUpdateInstalmentCommand.setCurrDate(testDate2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoUpdateInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(1, account.getExpListTotal().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, instalment.getPayForTheMonth());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        testDate2 \u003d testDate2.plusDays(2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoUpdateInstalmentCommand.setCurrDate(testDate2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        autoUpdateInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, instalment.getPayForTheMonth());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        instalment.setFullyPaid();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(true, instalment.getFullyPaid());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 70,
      "therealnickcheong": 4
    }
  },
  {
    "path": "src/test/java/moneycommands/CheckExpenditureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class CheckExpenditureTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private MoneyStorage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate testDate1 \u003d LocalDate.parse(\"9/10/1997\", dateTimeFormatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate testDate2 \u003d LocalDate.parse(\"4/9/2015\", dateTimeFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    CheckExpenditureTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testCheckExpenditure() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e1 \u003d new Expenditure(120, \"A Jays 5\", \"present\", testDate1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e2 \u003d new Expenditure(94, \"HHN VIP Tickets\", \"gift\", testDate2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String checkInput1 \u003d \"check expenditure 10 1997\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand checkExpenditure1 \u003d new ViewPastExpenditureCommand(checkInput1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        checkExpenditure1.execute(account, ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[E]$120.00 A Jays 5(on: 9/10/1997)\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Total expenditure for October of 1997 : $120.00\\n\", ui.getGraphContainerString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String checkInput2 \u003d \"check expenditure 9 2015\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand checkExpenditure2 \u003d new ViewPastExpenditureCommand(checkInput2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        checkExpenditure2.execute(account, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[E]$94.00 HHN VIP Tickets(on: 4/9/2015)\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Total expenditure for September of 2015 : $94.00\\n\", ui.getGraphContainerString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testCheckMonthExpenditure() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currMonth \u003d LocalDate.now().getMonthValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currMonthDate \u003d LocalDate.parse(\"4/\" + currMonth + \"/\" + currYear, dateTimeFormatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e1 \u003d new Expenditure(40, \"blue shirt\", \"gift\", currMonthDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Expenditure e2 \u003d new Expenditure(94, \"HHN VIP Tickets\", \"gift\", testDate2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getExpListTotal().add(e2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String checkInput \u003d \"list month\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand checkMonthExpenditure \u003d new ViewPastExpenditureCommand(checkInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        checkMonthExpenditure.execute(account, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String currMontStr \u003d new DateFormatSymbols().getMonths()[currMonth - 1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[E]$40.00 blue shirt(on: 4/\" + currMonth + \"/\" + currYear + \")\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                 + \"Total expenditure for \" + currMontStr + \" of \" + currYear + \" : $40.00\\n\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getGraphContainerString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String emptyYearInput \u003d \"check expenditure 5\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidYearCommand \u003d new ViewPastExpenditureCommand(emptyYearInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidYearCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please include the year!\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"check expenditure yo yo bro\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidInputCommand \u003d new ViewPastExpenditureCommand(invalidInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidInputCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException | NumberFormatException  e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please input in the format: check expenditure \u003cmonth\u003e \u003cyear\u003e\\n\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidMonthInput \u003d \"check expenditure 45 1994\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidMonthCommand \u003d new ViewPastExpenditureCommand(invalidMonthInput);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidMonthCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException | NumberFormatException  e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Month is invalid! Please pick a month from 1-12\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidYearInput \u003d \"check expenditure 10 839\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidYearCommand \u003d new ViewPastExpenditureCommand(invalidYearInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidYearCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Only years dated from 1000-9999 are accepted by Financial Ghost :)\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 124
    }
  },
  {
    "path": "src/test/java/moneycommands/CheckFutureBalanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CheckFutureBalanceTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_CREATE_TRACKER1 \u003d \"bank-account OCBC /amt 30 /at 27/7/2017 /rate 0.005\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String WRONG_CHECK_DATE \u003d \"check-balance OCBC /at /2/2020\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    CheckFutureBalanceTest() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void createNewTrackerWithSample1() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd \u003d new CreateBankAccountCommand(SAMPLE_CREATE_TRACKER1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void executeCheckBalanceCmd(String inputString) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd \u003d new CheckFutureBalanceCommand(inputString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void undoCheckBalanceCmd(String anyInputString) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CheckFutureBalanceCommand cmd \u003d new CheckFutureBalanceCommand(anyInputString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void isExit_success() throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertFalse(new CheckFutureBalanceCommand(\"check-balance OCBC /at 8/2/2016\").isExit());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void constructor_invalidDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new CheckFutureBalanceCommand(WRONG_CHECK_DATE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_tooEarlyFutureDate_exceptionThrown() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "            () -\u003e executeCheckBalanceCmd(\"check-balance OCBC /at 8/2/2016\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        executeCheckBalanceCmd(\"check-balance OCBC /at 8/2/2020\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"  The future balance in OCBC\" + \" :\\n    34.84 at 8/2/2020\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void undo_anyInput_exceptionThrown() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e undoCheckBalanceCmd(\"check-balance OCBC /at 8/2/2020\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 1,
      "cctt1014": 78
    }
  },
  {
    "path": "src/test/java/moneycommands/CheckIncomeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Income;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "public class CheckIncomeTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private MoneyStorage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate testDate1 \u003d LocalDate.parse(\"9/10/1997\", dateTimeFormatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    private LocalDate testDate2 \u003d LocalDate.parse(\"5/6/2018\", dateTimeFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    CheckIncomeTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        storage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testCheckIncome() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i1 \u003d new Income(2000, \"TA Pay\", testDate1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i2 \u003d new Income(1000, \"Slave Job\", testDate2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String checkInput1 \u003d \"check income 10 1997\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand checkIncome1 \u003d new ViewPastIncomeCommand(checkInput1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        checkIncome1.execute(account, ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[I] TA Pay(salary: $2000.00) (Paid On: 9/10/1997)\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Total income for October of 1997 : $2000.00\\n\", ui.getGraphContainerString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String checkInput2 \u003d \"check income 6 2018\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand checkIncome2 \u003d new ViewPastIncomeCommand(checkInput2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        checkIncome2.execute(account, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[I] Slave Job(salary: $1000.00) (Paid On: 5/6/2018)\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Total income for June of 2018 : $1000.00\\n\", ui.getGraphContainerString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testCheckMonthIncome() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currMonth \u003d LocalDate.now().getMonthValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        int currYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        LocalDate currMonthDate \u003d LocalDate.parse(\"4/\" + currMonth + \"/\" + currYear, dateTimeFormatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i1 \u003d new Income(4000, \"day job\", currMonthDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        Income i2 \u003d new Income(3000, \"night job\", testDate2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        account.getIncomeListTotal().add(i2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearGraphContainerString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String checkInput \u003d \"list month\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        MoneyCommand checkMonthIncome \u003d new ViewPastIncomeCommand(checkInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        checkMonthIncome.execute(account, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String currMontStr \u003d new DateFormatSymbols().getMonths()[currMonth - 1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\" 1.[I] day job(salary: $4000.00) (Paid On: 4/\" + currMonth + \"/\" + currYear + \")\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                + \"Total income for \" + currMontStr + \" of \" + currYear + \" : $4000.00\\n\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "                ui.getGraphContainerString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    void testInvalidInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String emptyYearInput \u003d \"check income 10\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidYearCommand \u003d new ViewPastIncomeCommand(emptyYearInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidYearCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please include the year!\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidInput \u003d \"check income lorem ipsumNonsense\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidInputCommand \u003d new ViewPastIncomeCommand(invalidInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidInputCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException | NumberFormatException  e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Please input in the format: check income \u003cmonth\u003e \u003cyear\u003e\\n\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidMonthInput \u003d \"check income 0 1994\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidMonthCommand \u003d new ViewPastIncomeCommand(invalidMonthInput);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidMonthCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException | NumberFormatException  e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Month is invalid! Please pick a month from 1-12\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        String invalidYearInput \u003d \"check income 10 839\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            MoneyCommand invalidYearCommand \u003d new ViewPastIncomeCommand(invalidYearInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            invalidYearCommand.execute(account, ui, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "            assertThat(e.getMessage(), is(\"Only years dated from 1000-9999 are accepted by Financial Ghost :)\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chengweixuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chengweixuan": 124
    }
  },
  {
    "path": "src/test/java/moneycommands/CreateBankAccountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.BankTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class CreateBankAccountTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_INPUT1 \u003d \"bank-account OCBC /amt 30 /at 27/7/2017 /rate 0.005\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT1 \u003d \"bank-account OCBC /amt -100 /at 27/7/2017 /rate 0.005\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT2 \u003d \"bank-account OCBC /amt 100 /at haha /rate 0.005\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT3 \u003d \"bank-account OCBC /amt 100 /at 27/7/2017 /rate 0.005%%\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT4 \u003d \"bank-account OCBC /amt %^haha i m tired100 /at 27/7/2017 /rate 0.005%%\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    CreateBankAccountTest() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void constructor_wrongNumberFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new CreateBankAccountCommand(INVALID_INPUT3));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new CreateBankAccountCommand(INVALID_INPUT4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void constructor_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new CreateBankAccountCommand(INVALID_INPUT2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void constructor_negativeInitialAmt_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new CreateBankAccountCommand(INVALID_INPUT1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void isExit_success() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertFalse(new CreateBankAccountCommand(SAMPLE_INPUT1).isExit());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_duplicateName_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd1 \u003d new CreateBankAccountCommand(SAMPLE_INPUT1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd2 \u003d new CreateBankAccountCommand(SAMPLE_INPUT1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e cmd2.execute(account, ui, moneyStorage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_validNewTracker_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd1 \u003d new CreateBankAccountCommand(SAMPLE_INPUT1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"New bank account tracker has been added to the list: \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + account.getBankTrackerList().get(0).getBankAccountInfo() + \"\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void undo_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd1 \u003d new CreateBankAccountCommand(SAMPLE_INPUT1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        BankTracker b \u003d account.getBankTrackerList().get(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd1.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\" Last command undone: \\n\" + b.toString() + \"\\n\" + \" Now you have \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + account.getBankTrackerList().size() + \" bank accounts listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 1,
      "cctt1014": 87
    }
  },
  {
    "path": "src/test/java/moneycommands/DeleteBankAccountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class DeleteBankAccountTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_CREATE_TRACKER1 \u003d \"bank-account OCBC /amt 30 /at 27/7/2017 /rate 0.005\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_INPUT_OUT_OF_BOUND1 \u003d \"delete bank-account 100\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_VALID_INPUT1 \u003d \"delete bank-account 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    DeleteBankAccountTest() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void createNewTrackerWithSample1() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd \u003d new CreateBankAccountCommand(SAMPLE_CREATE_TRACKER1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void executeDeleteCmd(String inputString) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd \u003d new DeleteBankAccountCommand(inputString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void isExit_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertFalse(new DeleteBankAccountCommand(SAMPLE_VALID_INPUT1).isExit());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_outOfBound_exceptionThrown() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e executeDeleteCmd(SAMPLE_INPUT_OUT_OF_BOUND1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        executeDeleteCmd(SAMPLE_VALID_INPUT1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"The bank account tracker below has been removed: \\n  Name: OCBC\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"  Balance: 30.00\\n  Latest Update Date: 27/7/2017\\n  Interest Rate: 0.005\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 1,
      "cctt1014": 63
    }
  },
  {
    "path": "src/test/java/moneycommands/DeleteInstalmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class DeleteInstalmentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String testDate \u003d \"9/10/1997\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate dateTestDate \u003d LocalDate.parse(testDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to initialise the data path for the tests to populate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public DeleteInstalmentTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testDeleteInstalment() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\", dateTestDate, 120, 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment instalment1 \u003d new Instalment(100000, \"mortgage\", \"instalments\", dateTestDate, 180, 4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String deleteFirstInput \u003d \"delete instalment 2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand deleteInstalmentCommand \u003d new DeleteInstalmentCommand(deleteFirstInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, deleteInstalmentCommand.isExit());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        deleteInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this Instalment:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \"  \" + instalment1.toString() + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" Now you have \" + (account.getInstalments().size()) + \" instalments in the list.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \"Got it, list will be printed in the other pane!\\n\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String deleteSecondInput \u003d \"delete instalment 1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand deleteSecondInstalmentCommand \u003d new DeleteInstalmentCommand(deleteSecondInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        deleteSecondInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this Instalment:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \"  \" + instalment.toString() + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" Now you have \" + (account.getInstalments().size()) + \" instalments in the list.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \"Got it, list will be printed in the other pane!\\n\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testDeleteInstalmentException() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String deleteEmptyInstalmentList \u003d \"delete instalment 1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand deleteInstalmentCommand \u003d new DeleteInstalmentCommand(deleteEmptyInstalmentList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            deleteInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            assertThat(e.getMessage(), is(\"The serial number of the Instalments is Out Of Bounds!\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                dateTestDate, 120, 3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment instalment1 \u003d new Instalment(100000, \"mortgage\", \"instalments\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                dateTestDate, 180, 4);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String deleteFirstInput \u003d \"delete instalment 3\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand deleteInstalmentCommand1 \u003d new DeleteInstalmentCommand(deleteFirstInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            deleteInstalmentCommand1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "            assertThat(e.getMessage(), is(\"The serial number of the Instalments is Out Of Bounds!\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    void testUndoDeleteInstalment() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                dateTestDate, 120, 3);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        Instalment instalment1 \u003d new Instalment(100000, \"mortgage\", \"instalments\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                dateTestDate, 180, 4);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().add(instalment1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        String deleteFirstInput \u003d \"delete instalment 2\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand deleteInstalmentCommand \u003d new DeleteInstalmentCommand(deleteFirstInput);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        deleteInstalmentCommand.undo(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        assertEquals(\" Last command undone: \\n\" + instalment1.toString() + \"\\n Now you have \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "                + account.getInstalments().size() + \" instalments listed\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Chianhaoplanks"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chianhaoplanks": 26,
      "ChenChao19": 100,
      "therealnickcheong": 3
    }
  },
  {
    "path": "src/test/java/moneycommands/GraphCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class GraphCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT1 \u003d \"graph financial status /until 11/11/2019\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT2 \u003d \"graph monthly histogram\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String VALID_COMMAND \u003d \"graph monthly report\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    GraphCommandTest() throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd1 \u003d new GraphCommand(INVALID_INPUT1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e cmd1.execute(account, ui, moneyStorage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd2 \u003d new GraphCommand(INVALID_INPUT2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e cmd2.execute(account, ui, moneyStorage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd1 \u003d new GraphCommand(VALID_COMMAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"Got it, graph will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 47
    }
  },
  {
    "path": "src/test/java/moneycommands/InternalTransferTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class InternalTransferTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_CREATE_TRACKER1 \u003d \"bank-account OCBC /amt 30 /at 27/7/2017 /rate 0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_DEPOSIT1 \u003d \"deposit 200 OCBC /at 3/3/2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_WITHDRAW1 \u003d \"withdraw 200 OCBC /at 3/3/2019\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT1 \u003d \"deposit -200 OCBC /at 3/3/2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT2 \u003d \"deposit %%200 OCBC /at 3/3/2018\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String INVALID_INPUT3 \u003d \"deposit 200 OCBC /at i wanna sleep\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    InternalTransferTest() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void constructor_invalidInputFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new InternalTransferCommand(INVALID_INPUT1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new InternalTransferCommand(INVALID_INPUT2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e new InternalTransferCommand(INVALID_INPUT3));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void createNewTrackerWithSample1() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        CreateBankAccountCommand cmd \u003d new CreateBankAccountCommand(SAMPLE_CREATE_TRACKER1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private void executeInternalTransferCmd(String inputString) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd \u003d new InternalTransferCommand(inputString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_withdrawTooMuch_exceptionThrown() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e executeInternalTransferCmd(SAMPLE_WITHDRAW1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_validDepositAndWithdraw_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        createNewTrackerWithSample1();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        executeInternalTransferCmd(SAMPLE_DEPOSIT1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"  Got it. Here is the current information about this account:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"  Name: OCBC\\n  Balance: 230.00\\n  Latest Update Date: 3/3/2018\\n  Interest Rate: 0.0\\n\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        executeInternalTransferCmd(SAMPLE_WITHDRAW1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"  Got it. Here is the current information about this account:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"  Name: OCBC\\n  Balance: 30.00\\n  Latest Update Date: 3/3/2019\\n  Interest Rate: 0.0\\n\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                ui.getOutputString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 1,
      "cctt1014": 72
    }
  },
  {
    "path": "src/test/java/moneycommands/ListBankTrackerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "public class ListBankTrackerCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_INPUT1 \u003d \"bank-account OCBC /amt 30 /at 27/7/2017 /rate 0.05\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    private static String SAMPLE_INPUT2 \u003d \"bank-account DBS /amt 100 /at 20/7/2018 /rate 0.0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    //@@author cctt1014"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    ListBankTrackerCommandTest() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account \u003d new Account(moneyStorage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cctt1014"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    void execute_validInput_success() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        account.getBankTrackerList().clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd1 \u003d new CreateBankAccountCommand(SAMPLE_INPUT1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd1.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd2 \u003d new CreateBankAccountCommand(SAMPLE_INPUT2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd2.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        MoneyCommand cmd3 \u003d new ListBankTrackerCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        cmd3.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "        Assertions.assertEquals(\"Here are the bank accounts and their info:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"1. ----------------------------------------\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"  Name: OCBC\\n  Balance: 30.00\\n  Latest Update Date: 27/7/2017\\n  Interest Rate: 0.05\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"-------------------------------------------\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"2. ----------------------------------------\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"  Name: DBS\\n  Balance: 100.00\\n  Latest Update Date: 20/7/2018\\n  Interest Rate: 0.0\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "                + \"-------------------------------------------\\n\", ui.getGraphContainerString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cctt1014"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cctt1014": 48
    }
  },
  {
    "path": "src/test/java/moneycommands/ListInstalmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "package moneycommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.MoneyStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import controlpanel.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Account;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import money.Instalment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "public class ListInstalmentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private MoneyStorage moneyStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private String testDate \u003d \"9/10/1997\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    private LocalDate dateTestDate \u003d LocalDate.parse(testDate, dateTimeFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     * method to initialise the data path for the test code to populate."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealnickcheong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public ListInstalmentTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Path currentDir \u003d Paths.get(\"data/account-test.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        String filePath \u003d currentDir.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        moneyStorage \u003d new MoneyStorage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account \u003d new Account();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    public void testListInstalments() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment instalment \u003d new Instalment(5000, \"car\", \"instalments\", dateTestDate, 120, 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        Instalment instalment1 \u003d new Instalment(100000, \"mortgage\", \"instalments\", dateTestDate, 180, 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        account.getInstalments().add(instalment1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        df.setRoundingMode(RoundingMode.CEILING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand listInstalmentCommand \u003d new ListInstalmentCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(false, listInstalmentCommand.isExit());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        ui.clearOutputString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        listInstalmentCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\"Got it, list will be printed in the other pane!\\n\", ui.getOutputString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        assertEquals(\" 1.[\" + df.format(instalment.getPercentage()) + \"%] \" + instalment.getDescription() + \" ($\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + df.format(instalment.equalMonthlyInstalment()) + \" per month until \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + instalment.getDateEndDate() + \")\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + \" 2.[\" + df.format(instalment1.getPercentage()) + \"%] \" + instalment1.getDescription() + \" ($\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + df.format(instalment1.equalMonthlyInstalment()) + \" per month until \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                        + instalment1.getDateEndDate() + \")\\n\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "                ui.getGraphContainerString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        MoneyCommand exitCommand \u003d  new ExitMoneyCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "        exitCommand.execute(account, ui, moneyStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChenChao19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChenChao19": 63,
      "therealnickcheong": 3
    }
  }
]
