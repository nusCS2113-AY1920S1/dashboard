[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duke is a public class that contains the main function to drive the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It encapsulates a Storage object, a MealList object, and an Ui object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList tasks \u003d new MealList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Autocorrect autocorrect;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor of Duke to start the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.load(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            user \u003d storage.loadUser(); //load user inf"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Run is a function that generate the flow of duke program from beginning until the end."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.getIsSetup() \u003d\u003d false) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeNew();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeBack(user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        while (user.getIsSetup() \u003d\u003d false) { //setup user profile if it\u0027s empty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setup();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showUserSetupDone(user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                storage.saveUser(user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand(in);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand, autocorrect);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                c.execute(tasks, ui, storage, user);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the main function."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "GaryStu": 1,
      "koushireo": 33,
      "-": 70
    }
  },
  {
    "path": "src/main/java/duke/autocorrect/Autocorrect.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This is a class that will help to correct minor typo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class Autocorrect {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private HashMap\u003cString,int[]\u003e mapper \u003d new HashMap();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private ArrayList\u003cString\u003e words \u003d new ArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int[] counter \u003d new int[26];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public Autocorrect() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will store the pre defined correct words into the object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param word pre defined correct words to be stored."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void load(String word) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int[] counting \u003d new int[26];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i +\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counting[i] \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counting[word.charAt(i) - 97] +\u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        mapper.put(word, counting);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        words.add(word);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will store the user input word into the object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param word word to be stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWord(String word) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i +\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counter[i] \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length() - 1; i +\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if ((int)word.charAt(i) - 97 \u003e\u003d 0 \u0026\u0026 (int)word.charAt(i) - 97 \u003c 26) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                counter[(int) word.charAt(i) - 97] +\u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will compare the word in the object against."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * pre defined correct words and change it to those words"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int currentDistance \u003d 4;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int distance \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String likelyWord \u003d word;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c words.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (int j \u003d 0; j \u003c 26; j +\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                distance +\u003d Math.abs(counter[j] - mapper.get(words.get(i))[j]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (distance \u003c 4) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (distance \u003c currentDistance) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    likelyWord \u003d words.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    currentDistance \u003d distance;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            distance \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.word \u003d likelyWord;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getWord() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.word;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 4,
      "HashirZahir": 2,
      "koushireo": 73
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddCommand object encapsulates the current meal that is to be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor for AddCommand which create a new AddCommand object with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * the meal specified as the instance field meal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand(Meal meal) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"add\" command, updating the current tasks, ui, and storage in the process."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meal is supposed to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.addMeals(this.meal);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e mealData \u003d meals.getMealTracker().get(this.meal.getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showAdded(this.meal, mealData, user, this.meal.getDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 18,
      "koushireo": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/AddItemCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddItemCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddItemCommand object encapsulates the current meal that is to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddItemCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a constructor for AddCommand which create a new AddCommand object with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * the meal specified as the instance field meal."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddItemCommand(Meal meal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The object will execute the \"add\" command, updating the default meal data, ui, and storage in the process."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meal is supposed to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.addStoredItem(this.meal);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showAddedItem(this.meal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * ClearCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A ClearCommand object encapsulates the 2 dates between which all meal data will be cleared."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    Date startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    Date endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public ClearCommand(String startDateStr, String endDateStr) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            startDate \u003d dateFormat.parse(startDateStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            endDate \u003d dateFormat.parse(endDateStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + startDateStr + \" and \" + endDateStr + \" as dates.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList mealList, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        cal.setTime(startDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (cal.setTime(startDate); !cal.getTime().after(endDate); cal.add(Calendar.DATE, 1)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            mealList.deleteAllMealsOnDate(dateFormat.format(cal.getTime()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showCleared(dateFormat.format(startDate), dateFormat.format(endDate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(mealList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 36,
      "Fractalisk": 4
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Command is the abstract base class for all the command objects"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * which allow the child class to specify which command (e.g. add, delete, etc) to use."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this class is an abstract class that will change according to the inheritor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object in which the task is supposed to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public abstract void execute(MealList tasks, Ui ui, Storage storage, User user) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 11,
      "GaryStu": 1,
      "koushireo": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * DeleteCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A DeleteCommand object encapsulates the index of meal and date of the meal that is to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private final String helpText \u003d \"Please follow: delete \u003cindex\u003e /date \u003cdate\u003e or \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            + \"delete \u003cindex\u003e to delete for current day.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor DeleteCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param indexStr the index of meal on the date to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param date Date of meal to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(String indexStr, String date) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this(indexStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + date + \" as a date. \" + helpText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        currentDate \u003d dateFormat.format(temp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(String indexStr) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.index \u003d Integer.parseInt(indexStr.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + indexStr + \" as integer index. \" + helpText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"delete\" command, updating the current tasks, ui, and storage in the process."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealList the MealList object in which the the indexed meal is supposed to be deleted from"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of a \"delete\" command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the storage object for user info"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList mealList, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e mealList.getMealsList(currentDate).size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Index provided out of bounds for list of meals on \" + currentDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal currentMeal \u003d mealList.delete(currentDate, index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showDeleted(currentMeal, mealList.getMealsList(currentDate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(mealList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 28,
      "Fractalisk": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Meal updatedMeal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public EditCommand(Meal meal) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.updatedMeal \u003d meal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal \u003d meals.updateMeal(updatedMeal);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String dateStr \u003d updatedMeal.getDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showUpdated(this.updatedMeal, meals.getMealsList(this.updatedMeal.getDate()), user, dateStr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 21,
      "Fractalisk": 3
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * ExitCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * isExit() is a function that will return true if called, to indicate the the program is going to exit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the function is called"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function will execute the exit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"exit\" command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "koushireo": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The FindCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It encapsulates the String to find in the current MealList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * FindCommand is a constructor that store the string to find."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the string to find"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public FindCommand(String description, String date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.currentDate \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function will execute the \"find\" command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param tasks the MealList object in which the meal is supposed to be found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"find\" command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of Meals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e matchingMeals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMealsList(currentDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (Meal element: currentMeals) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String currentTaskString \u003d element.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (currentTaskString.contains(description)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                matchingMeals.add(element);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showList(matchingMeals);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 13,
      "GaryStu": 4,
      "koushireo": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ArrayList\u003cString\u003e helpLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        storage.loadHelp(helpLines);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showHelp(helpLines);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 21
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * ListCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public ListCommand(String date) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        currentDate \u003d dateFormat.format(temp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"list\" command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param tasks the MealList object in which the meal(s) is supposed to be listed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"list\" command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showCalorie(user);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMealsList(currentDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (!tasks.checkDate(currentDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(\"There isn\u0027t any food on \" + currentDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showList(currentMeals);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showRemainingCalorie(currentMeals, user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 9,
      "koushireo": 25,
      "-": 18
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * MarkDoneCommand is a public class that inherits form abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A MarkDoneCommand object encapsulates the index of meal to be marked as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param type the type of meal"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date which meals are to be marked as done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand(String type, String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.type \u003d type.substring(0, 1).toUpperCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.currentDate \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The object will execute the \"mark done\" command, updating the current meals, ui, and storage in the process."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param tasks the MealList object to be marked done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"mark done\" command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ArrayList\u003cMeal\u003e matchingMeals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMealsList(currentDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        for (Meal element: currentMeals) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (element.getType().equals(type)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                element.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                matchingMeals.add(element);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showDone(matchingMeals);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showRemainingCalorie(currentMeals, user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 11,
      "GaryStu": 15,
      "koushireo": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/UpdateWeightCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateWeightCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateWeightCommand(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String[] temp \u003d description.split(\"/date\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (temp.length \u003e 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setWeight(Integer.parseInt(temp[0].trim()), temp[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            user.setWeight(Integer.parseInt(temp[0]));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        storage.saveUser(user);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koushireo": 33
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Dinner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Breakfast;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Lunch;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser is a public class that help to parse the command that is inputted from the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * And generate the appropriate command with their appropriate arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static Calendar currentDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the main function that parse the command inputted by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the string the user input in the CLI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @return \u003ccode\u003enew ExitCommand()\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         if the user input \"bye\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Breakfast())\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"breakfast\" followed by the description of the meal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Lunch()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"lunch\" followed by the description of the meal"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Dinner()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"dinner\" followed by the description of the meal"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew ListCommand()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew MarkDoneCommand(index)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"done\" followed by the index of the meal to be marked completed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew FindCommand(description)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"find\" followed by the string that needs to be added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew DeleteCommand(index) \u003c/code\u003e if the sure input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"delete\" followed by the index of the task to be deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when the command is not recognized or command syntax is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public static Command parse(String fullCommand, Autocorrect autocorrect) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d splitCommand[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        command \u003d autocorrect.getWord();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitCommand.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            description \u003d splitCommand[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (command.equals(\"done\") || command.equals(\"breakfast\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                || command.equals(\"lunch\") || command.equals(\"dinner\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                || command.equals(\"edit\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String info;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"breakfast\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (description.contains(\"/\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    name \u003d description.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    return new AddCommand(new Breakfast(name, info, autocorrect));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(new Breakfast(description, \"\", autocorrect));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"lunch\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (description.contains(\"/\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    name \u003d description.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    return new AddCommand(new Lunch(name, info, autocorrect));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(new Lunch(description, \"\", autocorrect));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"dinner\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (description.contains(\"/\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    name \u003d description.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    return new AddCommand(new Dinner(name, info, autocorrect));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(new Dinner(description, \"\", autocorrect));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"add\" :"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                name \u003d description.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddItemCommand(new Item(name, info, autocorrect));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (splitCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    return new ListCommand(splitCommand[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                name \u003d description.split(\" /date \", 2)[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                if (description.split(\" /date \").length \u003e 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    date \u003d description.split(\" /date \")[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    return new MarkDoneCommand(name, date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The done command was not entered correctly\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                name \u003d description.split(\" /date \", 2)[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                if (description.split(\" /date \").length \u003e 1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    date \u003d description.split(\" /date \")[1];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    return new FindCommand(name, date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new FindCommand(name);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                if (splitCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    // user specifies date and index."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    if (description.split(\"/date\").length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        String[] splitArgs \u003d description.split(\"/date\", 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        return new DeleteCommand(splitArgs[0], splitArgs[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        // user only specifies index to delete for current day."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        return new DeleteCommand(description);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                throw new DukeException(\"Please enter index of meal to delete on today\u0027s list or \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \"date and index of meal to delete\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                return new UpdateWeightCommand(description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            case \"clear\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                if (splitCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    String[] splitArgs \u003d description.split(\" \", 2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    if (splitArgs.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        return new ClearCommand(splitArgs[0], splitArgs[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                throw new DukeException(\"Please enter 2 dates; Start and End dates to clear meals from.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                name \u003d description.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new EditCommand(new Meal(name, info, autocorrect));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what \" + command + \" means :-(\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 45,
      "HashirZahir": 29,
      "GaryStu": 17,
      "koushireo": 28,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.user.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.Tuple;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Storage is a public class, a storage class encapsulates the filePath to read from disk and write to disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String line \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BufferedReader bufferedReader \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private BufferedWriter bufferedWriter \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private File nameFile \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private File wordFile \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The function will act to load txt file specified by the filepath, parse it and store it in a new task ArrayList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * to be added in that MealList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if either the object is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void load(MealList meals) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        file \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            + sep + \"Data\" + sep + \"duke.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Unable to access file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                //TODO: Parse the line"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                loadFile(line, mealTracker, meals);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Unable to open file\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Error reading file\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.setMealTracker(mealTracker);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function acts as a parser from the text file which is used to store data from the previous session."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line the line input from the input file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealTracker the meal arraylist that will store the meals from the input file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the structure that encapsulates the meal data for this session"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void loadFile(String line, HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker, MealList meals) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] splitLine \u003d line.split(\"\\\\|\",4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskType \u003d splitLine[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean isDone \u003d splitLine[1].equals(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String description \u003d splitLine[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] nutritionalValue \u003d splitLine[3].split(\"\\\\|\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal newMeal \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (taskType.equals(\"B\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Breakfast(description, nutritionalValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"L\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Lunch(description, nutritionalValue);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Dinner(description, nutritionalValue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"S\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Item(description, nutritionalValue);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (taskType.equals(\"S\") \u003d\u003d false) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                newMeal.markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealDate \u003d newMeal.getDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (!mealTracker.containsKey(mealDate)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                mealTracker.put(mealDate, new ArrayList\u003cMeal\u003e());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                mealTracker.get(mealDate).add(newMeal);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                mealTracker.get(mealDate).add(newMeal);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.addStoredItem(newMeal);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will update the input/output file from the current arraylist of meals."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealData the structure that will store the tasks from the input file"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    //TODO: maybe we can put the errors in the ui file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateFile(MealList mealData) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e meals \u003d mealData.getMealTracker();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e storedItems \u003d mealData.getStoredList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i : meals.keySet()) { //write process for stored food entries"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ArrayList\u003cMeal\u003e mealsInDay \u003d meals.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                for (int j \u003d 0; j \u003c meals.get(i).size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    Meal currentMeal \u003d mealsInDay.get(j);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    String status \u003d \"0\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (currentMeal.getIsDone()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        status \u003d \"1\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String toWrite \u003d currentMeal.getType() + \"|\" + status + \"|\" + currentMeal.getDescription()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \"|date|\" + currentMeal.getDate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    HashMap\u003cString, Integer\u003e nutritionData \u003d currentMeal.getNutritionalValue();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (nutritionData.size() !\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite +\u003d \"|\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        for (String k : nutritionData.keySet()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            toWrite +\u003d k + \"|\" + nutritionData.get(k) + \"|\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite \u003d toWrite.substring(0, toWrite.length() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i : storedItems.keySet()) { //write process for stored default food values"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                toWrite +\u003d \"S|0|\" + i;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                HashMap\u003cString, Integer\u003e nutritionData \u003d storedItems.get(i);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (nutritionData.size() !\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    toWrite +\u003d \"|\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    for (String k : nutritionData.keySet()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite +\u003d k + \"|\" + nutritionData.get(k) + \"|\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    toWrite \u003d toWrite.substring(0, toWrite.length() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will load user info from user.txt."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User loadUser() throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        User tempUser;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        nameFile \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                + sep + \"Data\" + sep + \"user.txt\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (nameFile.length() \u003d\u003d 0) { //user.txt has nothing"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(nameFile));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String line \u003d  bufferedReader.readLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String[] splitLine \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String name \u003d splitLine[0];"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int age \u003d Integer.parseInt(splitLine[1]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int height \u003d Integer.parseInt(splitLine[2]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int activityLevel \u003d Integer.parseInt(splitLine[3]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            boolean loseWeight \u003d Boolean.parseBoolean(splitLine[4]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String sex \u003d splitLine[5];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (sex.equals(\"M\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                tempUser \u003d new User(name, age, height, Gender.MALE, activityLevel, loseWeight);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                tempUser \u003d new User(name, age, height, Gender.FEMALE, activityLevel, loseWeight);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                String[] splitWeightInfo \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                tempUser.setWeight(Integer.parseInt(splitWeightInfo[1]), splitWeightInfo[0]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return tempUser;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will store the user information into a file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the user class that contains all personal information to be stored."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void saveUser(User user) throws DukeException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String toWrite \u003d user.getName() + \"|\" + user.getAge() + \"|\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + user.getHeight() + \"|\" + user.getActivityLevel() + \"|\" + user.getLoseWeight() + \"|\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getSex() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d \"M\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d \"F\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cTuple\u003e allWeight \u003d user.getAllWeight();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c user.getAllWeight().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d \"\\n\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String date \u003d allWeight.get(i).date;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int weight \u003d allWeight.get(i).weight;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d date + \"|\" + weight;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(nameFile));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will load all the words to be autocorrected to."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void loadWord(Autocorrect autocorrect) throws DukeException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        wordFile \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                + sep + \"Data\" + sep + \"word.txt\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(wordFile));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                autocorrect.load(line.trim());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void loadHelp(ArrayList\u003cString\u003e lines) throws DukeException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        file \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                            + sep + \"Data\" + sep + \"help.txt\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Unable to access help file\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                lines.add(line);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Error reading help file\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 78,
      "HashirZahir": 1,
      "GaryStu": 27,
      "koushireo": 77,
      "-": 80
    }
  },
  {
    "path": "src/main/java/duke/tasks/Breakfast.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * breakfast is a public class that extends from meal."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Breakfast extends Meal {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of breakfast object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public Breakfast(String description, String details, Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        super(description, details, autocorrect);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"B\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of breakfast object for storage parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Breakfast(String description, String[] details) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"B\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a breakfast object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[B]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[B]\" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 32,
      "koushireo": 4
    }
  },
  {
    "path": "src/main/java/duke/tasks/Dinner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * dinner is a public class that inherits from abstract class meal."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A dinner object encapsulates the String that express deadline date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Dinner extends Meal {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of dinner object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the dinner object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public Dinner(String description, String details, Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        super(description, details, autocorrect);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of dinner object for storage parsing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Dinner(String description, String[] details) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a dinner object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[D]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[D]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 33,
      "koushireo": 4
    }
  },
  {
    "path": "src/main/java/duke/tasks/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Item extends Meal {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of item object, which is used to store default meal info."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the item object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Item(String description, String details, Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details, autocorrect);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"S\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of item object for storage parsing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the item object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Item(String description, String[] details) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 0; i \u003c details.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            super.nutritionValue.put(details[i], Integer.valueOf(details[i + 1]));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the description and info of the meal"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.description + \" | \" + temp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 39
    }
  },
  {
    "path": "src/main/java/duke/tasks/Lunch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * lunch is a public class that inherits form abstract class meal."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A lunch object encapsulates the String that expresses the duration of the lunch"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Lunch extends Meal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of lunch object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public Lunch(String description, String details, Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        super(description, details, autocorrect);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"L\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of lunch object for storage parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Lunch(String description, String[] details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"L\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a lunch object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[L]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[L]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 34,
      "koushireo": 4
    }
  },
  {
    "path": "src/main/java/duke/tasks/Meal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Task is a public class that represents the tasks in duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * A task object encapsulates the description of the task, the type of task it is, and whether"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * the task is done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Meal {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected SimpleDateFormat dateparser \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String date \u003d dateparser.format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected HashMap\u003cString, Integer\u003e nutritionValue \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of Task object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public Meal(String description, String details, Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //todo: date input can only be accepted at the back of the statement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.contains(\"/date\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString \u003d details.split(\"/date\", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Date day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                day \u003d dateparser.parse(splitString[1].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //todo something here"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            details \u003d splitString[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString1 \u003d details.split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String data : splitString1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (data.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String[] partitionedData \u003d data.split(\" \", 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    autocorrect.setWord(partitionedData[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    autocorrect.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    String nutrient \u003d autocorrect.getWord();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.valueOf(partitionedData[1].trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(nutrient, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of Task object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * used mainly in storage parsing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, String[] details) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Date day;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            day \u003d dateparser.parse(details[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            //toDo exception catching added here"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 2; i \u003c details.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionValue.put(details[i], Integer.valueOf(details[i + 1]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the no argument constructor for meal task object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * used to satisfy requirement for default constructor, not used otherwise"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function checks whether the particular task object is done and return the string accordingly."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003e[\\u2713]\u003c/code\u003e if the task is done"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *          \u003ccode\u003e[\\u2718]\u003c/code\u003e if the task is not done"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return (isDone ? \"[YES]\" : \"[NO]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for description."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a setter for isDone."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for isDone."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return isDone status of the task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the type."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return type of the task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the date."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return date of the meal"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getNutritionalValue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.nutritionValue;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void addNutritionalValue(String keyStr, int value) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.nutritionValue.put(keyStr, value);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return the status icon and the description of the task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.description + \" | \" + temp;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        //TODO: refactor this by using type also"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 86,
      "HashirZahir": 4,
      "GaryStu": 55,
      "koushireo": 7
    }
  },
  {
    "path": "src/main/java/duke/tasks/MealList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * TaskList is a public class that represents the list of meals under DIYeats."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A MealList object encapsulates the ArrayList of meals."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class MealList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e storedItems \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of MealList object if there is no argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The MealList object will initialise a new empty arraylist of meals."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MealList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to delete the task of a particular index."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param date date of the meal to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param index the index of task to be deleted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Returns the meal that was deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public Meal delete(String date, int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal deletedMeal \u003d this.mealTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.mealTracker.get(date).remove(index - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return deletedMeal;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void deleteAllMealsOnDate(String dateStr) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            this.mealTracker.get(dateStr).clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void addMeal(Meal meal) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String dateStr \u003d meal.getDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (!mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            mealTracker.put(dateStr, new ArrayList\u003cMeal\u003e());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        mealTracker.get(dateStr).add(meal);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Update existing meal from mealList based on date and description given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param newMeal Meal to be updated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Returns updated meal information."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws DukeException Exception thrown if meal description or date not found in current list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public Meal updateMeal(Meal newMeal) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String dateStr \u003d newMeal.getDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ArrayList\u003cMeal\u003e meals \u003d getMealsList(dateStr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            for (int idx \u003d 0; idx \u003c meals.size(); idx++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                Meal currMeal \u003d meals.get(idx);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                if (isSameMeal(currMeal, newMeal)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    HashMap\u003cString, Integer\u003e newNutrition \u003d newMeal.getNutritionalValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    for (String keyStr : newNutrition.keySet()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        currMeal.addNutritionalValue(keyStr, newNutrition.get(keyStr));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    meals.set(idx, currMeal);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    newMeal \u003d currMeal;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    mealTracker.replace(dateStr, meals);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    return newMeal;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"No meal matches description of \" + newMeal.getDescription() + \" on \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + newMeal.getDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"No meal found on \" + newMeal.getDate());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public boolean isSameMeal(Meal meal1, Meal meal2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return meal1.getDescription().equals(meal2.getDescription()) \u0026\u0026 meal1.getDate().equals(meal2.getDate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setMealTracker(HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker \u003d mealTracker;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addMeals(Meal data) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e mealList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(data.getDate())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealList \u003d mealTracker.get(data.getDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(data.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealList \u003d mealTracker.get(data.getDate());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //match meal description to stored meals. If it matches a stored meal, compare nutrition data,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        // and fill in any missing fields"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (storedItems.get(data.getDescription()) !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e storedNutritionValue \u003d storedItems.get(data.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e nutritionValue \u003d data.getNutritionalValue();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i: storedNutritionValue.keySet()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (nutritionValue.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(i, storedNutritionValue.get(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (data.getNutritionalValue().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! It appears there are no default values associated with this meal\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     Please set a default value for this meal using the \\\"add\\\" command, or manually\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     specify nutritional values for this meal\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        mealList.add(data);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cMeal\u003e getMealsList(String inputDate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(inputDate)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(inputDate, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for the mealtracker HashMap."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return mealTracker the data structure storing the list of all meals"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e getMealTracker() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public boolean hasMealsOnDate(String date) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e temp \u003d getMealsList(date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return temp.size() \u003e 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to check if a entry with the corresponding date is stored."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date the date to be checked"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean checkDate(String date) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return mealTracker.containsKey(date);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to add or update default values for a specified meal item."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param item The data to be set as default for a meal item with matching descriptor"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addStoredItem(Meal item) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String keyword \u003d item.getDescription();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, Integer\u003e data \u003d item.getNutritionalValue();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (storedItems.get(keyword) \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedItems.put(keyword, data);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedItems.remove(keyword);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedItems.put(keyword, data);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getStoredItem(String keyword) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return storedItems.get(keyword);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void removeStoredItem(String keyword) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storedItems.remove(keyword);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for the StoredItems HashMap."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return storedItems the data structure storing the list of all meals"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e getStoredList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return storedItems;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 120,
      "HashirZahir": 55,
      "koushireo": 8
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String padding \u003d \"     \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String boundary \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Hello! I\u0027m DIYeats\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"What can I do for you?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void showPadding() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(padding);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"     \" + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showList(ArrayList\u003cMeal\u003e meals)  {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(\"Here are the meals in your list: \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d meals.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Meal currentMeal \u003d meals.get(i - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            showPadding();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(i + \". \" + currentMeal);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showDone(ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked these tasks as done:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d meals.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            Meal currentMeal \u003d meals.get(i - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showPadding();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(i + \". \" + currentMeal);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showAdded(Meal currentMeal, ArrayList\u003cMeal\u003e meals, User user, String dateStr) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve added this meal:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showCaloriesLeft(meals, user, dateStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showUpdated(Meal newMeal, ArrayList\u003cMeal\u003e meals, User user, String dateStr) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve updated this old meal with this: \" + newMeal);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showCaloriesLeft(meals, user, dateStr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Display remaining calories for specified date based on current meals plan."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals List of meals on the date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user User information which we want to query."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param dateStr Date in which remaining calories are computed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showCaloriesLeft(ArrayList\u003cMeal\u003e meals, User user, String dateStr) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int totalConsume \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            totalConsume +\u003d meals.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Now you have \" + (user.getDailyCalorie()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                - totalConsume) + \" calories left on \" + dateStr);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showAddedItem(Meal currentMeal) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve added the default values for this meal:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showDeleted(Meal currentMeal, ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Noted. I\u0027ve removed this meal:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Now you have \" + meals.size()  + \" meals in the list.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showCleared(String startDateStr, String endDateStr) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Noted. Meals from \" + startDateStr + \" to \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                + endDateStr + \" have been cleared\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(Scanner in) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + message);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"Failed to load file.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserLoadingError() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Unable to load user file.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeNew() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Welcome!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"I see that you\u0027re new.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Please enter your particulars to get started!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeBack(User user) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Welcome back, \"  + user.getName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserSetupDone(User user) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Thanks, \" + user.getName() + \"!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"We are done setting up!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showCalorie(User user) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"This is your daily limit\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + user.getDailyCalorie());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showRemainingCalorie(ArrayList\u003cMeal\u003e mealsOfDay, User user) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"You can consume this many calories today\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int limit \u003d user.getDailyCalorie();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int consumeTotal \u003d 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c mealsOfDay.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (mealsOfDay.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                consumeTotal +\u003d mealsOfDay.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + Integer.toString(limit - consumeTotal));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showHelp(ArrayList\u003cString\u003e helpLines) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + \"Here are the commands you need to know:\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        helpLines.forEach(line -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(padding + line);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 18,
      "HashirZahir": 18,
      "GaryStu": 18,
      "koushireo": 37,
      "-": 60
    }
  },
  {
    "path": "src/main/java/duke/user/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    MALE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    FEMALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "koushireo": 5
    }
  },
  {
    "path": "src/main/java/duke/user/Tuple.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * This is a class that will store weight at a specific date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Tuple {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a class that will store weight at a specific date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param date date of the input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight weight during the input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Tuple(String date, int weight) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 20
    }
  },
  {
    "path": "src/main/java/duke/user/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This is a class that will store user information to be used for processing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ArrayList\u003cTuple\u003e weight \u003d new ArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int height \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gender sex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean isSetup;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int activityLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private double[] factor \u003d {1.2, 1.375, 1.55, 1.725, 1.9};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean loseWeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to create an empty user profile."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to create an user profile with all the info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Used during loading."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param name name of user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param age age of user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param height height of user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param sex biological gender of user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param activityLevel how active the user is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param loseWeight if they would like to lose weight or maintain"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User(String name, int age, int height, Gender sex, int activityLevel, boolean loseWeight) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d loseWeight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to update an empty user profile with all the info."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Used during startup."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setup() throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int weight \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int height \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Input name\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        name \u003d in.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input age\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input weight\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            weight \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input height\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Input gender(Male/Female)\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String sex \u003d in.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (sex.charAt(0) \u003d\u003d \u0027M\u0027) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.sex \u003d Gender.MALE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.sex \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int activityLevel \u003d 5;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        while (activityLevel \u003e 4 || activityLevel \u003c 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input Activity Level\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     1) Sedentary (Little or no exercise, desk job\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     2) Lightly active (Light exercise/ sports 1-3 days/week\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     3) Moderately active (Moderate exercise/ sports 6-7 days/week)\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     4) Very active (Hard exercise every day, or exercising 2 xs/day) \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"     5) Extra active (Hard exercise 2 or more times per day, or training for\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"marathon, or triathlon, etc. )\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                activityLevel \u003d Integer.parseInt(in.nextLine()) - 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Would you like to lose weight?(Y/N)\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String choice \u003d in.nextLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (choice.charAt(0) \u003d\u003d \u0027Y\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.loseWeight \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setWeight(weight);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at time of input."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.add(new Tuple(currentDate, weight));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at input date."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param date String of the date in DD/MM/YYYY format"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight, String date) throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String currentDate \u003d dateFormat.format(temp.getTime());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.add(new Tuple(currentDate, weight));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setActivityLevel(int activityLevel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setLoseWeight() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setMaintainWeight() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getWeight() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight.get(this.weight.size() - 1).weight;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to obtain all the weight at different date."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cTuple\u003e getAllWeight() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.activityLevel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getDailyCalorie() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        double calorie;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.sex \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() + 5;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() - 161;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return (int)(((this.loseWeight) ? 0.8 : 1) * this.factor[this.activityLevel] * calorie);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getLoseWeight() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.loseWeight;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Gender getSex() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.sex;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to check if it\u0027s an empty profile."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getIsSetup() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.isSetup;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 20,
      "koushireo": 207
    }
  },
  {
    "path": "src/test/java/duke/autocorrect/AutocorrectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class AutocorrectTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void autocorrectTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"calorei\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"calorie\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"lunxh\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"lunch\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"cacium\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"calcium\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 28
    }
  },
  {
    "path": "src/test/java/duke/functions/FunctionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.functions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class FunctionTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList tasks \u003d new MealList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.load(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user \u003d storage.loadUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void addCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean exceptionThrown1 \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean exceptionThrown2 \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d Parser.parse(\"add burger /calorie 100 /sodium 100 /fats 100\", autocorrect);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c.execute(tasks, ui, storage, user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d Parser.parse(\"breakfast burger\", autocorrect);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c.execute(tasks, ui, storage, user);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d Parser.parse(\"breakfast burger /calorie 100\", autocorrect);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c.execute(tasks, ui, storage, user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exceptionThrown1 \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d Parser.parse(\"breakfast taco\", autocorrect);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c.execute(tasks, ui, storage, user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exceptionThrown2 \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertFalse(exceptionThrown1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertTrue(exceptionThrown2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 75
    }
  },
  {
    "path": "src/test/java/duke/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"bye\", autocorrect) instanceof ExitCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"breakfast burger\", autocorrect) instanceof AddCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"breakfast burger /calories 100\", autocorrect) instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"breakfast burger /calories 100 /date 1/1/2019\", autocorrect)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"lunch burger\", autocorrect) instanceof AddCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"lunch burger /calories 100\", autocorrect) instanceof AddCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"lunch burger /calories 100 /date 1/1/2019\", autocorrect)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"dinner burger\", autocorrect) instanceof AddCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"dinner burger /calories 100\", autocorrect) instanceof AddCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"dinner burger /calories 100 /date 1/1/2019\", autocorrect)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"add burger /calorie 100 /sodium 100 /fats 100\", autocorrect)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddItemCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"list\", autocorrect) instanceof ListCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\", autocorrect) instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Something is wrong with the parser\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 20,
      "-": 18
    }
  },
  {
    "path": "src/test/java/duke/user/UserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user \u003d new User(\"Foo Chi Hen\", 22, 100, Gender.MALE, 0, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void user() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user.setWeight(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getWeight(), 100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getName(), \"Foo Chi Hen\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getHeight(), 100);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getActivityLevel(), 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getLoseWeight(), true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getAge(), 22);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertTrue(user.getAllWeight() instanceof ArrayList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "koushireo": 27
    }
  }
]
