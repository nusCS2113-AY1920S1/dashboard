[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duke is a public class that contains the main function to drive the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * It encapsulates a Storage object, a TaskList object, and an Ui object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor of Duke to start the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList(storage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            user \u003d storage.loadUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Run is a function that generate the flow of duke program from beginning until the end."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.getIsSetup() \u003d\u003d false) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeNew();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeBack(user);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        while (user.getIsSetup() \u003d\u003d false) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setup();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showUserSetupDone(user);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                storage.saveUser(user);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand(in);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                c.execute(tasks, ui, storage, user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the main function."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 4,
      "koushireo": 25,
      "-": 71,
      "Ivan Andika": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An AddCommand object encapsulates the current task that is to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor for AddCommand which create a new AddCommand object with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * the task specified as the instance field task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The task to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand(Meal meal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"add\" command, updating the current tasks, ui, and storage in the process."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the TaskList object in which the task is supposed to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chi Hen Foo"
        },
        "content": "  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (!meals.checkDate(this.meal.getDate())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            meals.setMeals(this.meal.getDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMeals(this.meal.getDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(this.meal.getDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        currentMeals.add(this.meal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showAdded(this.meal, currentMeals, user, this.meal.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals.getMealTracker());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 11,
      "Chi Hen Foo": 1,
      "koushireo": 7,
      "-": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Command is the abstract base class for all the command objects"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * which allow the child class to specify which command (e.g. add, delete, etc) to use."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * this class is an abstract class the will the specific command specified."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object in which the task is supposed to be added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public abstract void execute(MealList tasks, Ui ui, Storage storage, User user) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 10,
      "koushireo": 3,
      "-": 20,
      "Ivan Andika": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * DeleteCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A DeleteCommand object encapsulates the index of task that is to be deleted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor DeleteCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the index of task to be deleted"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"delete\" command, updating the current tasks, ui, and storage in the process."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object in which the the indexed task is supposed to be deleted from"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of a \"delete\" command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMeals(currentDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal currentMeal \u003d currentMeals.get(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.delete(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showDeleted(currentMeal, currentMeals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(tasks.getMealTracker());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 8,
      "koushireo": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * ExitCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * isExit() is a function that will return true if called, to indicate the the program is going to exit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the function is called"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function will execute the exit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"exit\" command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The FindCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It encapsulates the String to find in the current TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * FindCommand is a constructor that store the string to find."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description the description of the string to find"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function will execute the \"find\" command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object in which the task is supposed to be found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"find\" command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e matchingMeals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMeals(currentDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (Meal element: currentMeals) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            String currentTaskString \u003d element.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (currentTaskString.contains(description)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                matchingMeals.add(element);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showList(matchingMeals);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 9,
      "koushireo": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * ListCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public ListCommand(String date) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        currentDate \u003d dateFormat.format(temp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"list\" command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object in which the task(s) is supposed to be listed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"list\" command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showCalorie(user);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMeals(currentDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (!tasks.checkDate(currentDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(\"There isn\u0027t any food on \" + currentDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showList(currentMeals);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showRemainingCalorie(currentMeals, user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 7,
      "koushireo": 25,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * MarkDoneCommand is a public class that inherits form abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A MarkDoneCommand object encapsulates the index of task to be marked as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index the index of task to be marked done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The object will execute the \"mark done\" command, updating the current tasks, ui, and storage in the process."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks the TaskList object to be marked done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"mark done\" command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage the storage object that stores the list of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d tasks.getMeals(currentDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal currentMeal \u003d currentMeals.get(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        currentMeal.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(tasks.getMealTracker());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showDone(currentMeal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 9,
      "koushireo": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Dinner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Breakfast;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Lunch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser is a public class that help to parse the command that is inputted from the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * And generate the appropriate command with their appropriate arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static Calendar currentDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the main function that parse the command inputted by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand the string the user input in the CLI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @return \u003ccode\u003enew ExitCommand()\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         if the user input \"bye\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new ToDo())\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"todo\" followed by the description of the activity"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Event()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"event\" followed by the time the event is held"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew ListCommand()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew MarkDoneCommand(index)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"done\" followed by the index of the task to be marked done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew FindCommand(description)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"find\" followed by the string that needs to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew DeleteCommand(index) \u003c/code\u003e if the sure input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"delete\" followed by the index of the task to be deleted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException either there is no description in \"done\", \"todo\", \"event\", and \"deadline\" command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *                       or the command is not recognized"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //TODO: Put error for invalid input and what not"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d splitCommand[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (splitCommand.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            description \u003d splitCommand[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (command.equals(\"done\") || command.equals(\"breakfast\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                || command.equals(\"lunch\") || command.equals(\"dinner\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String info;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"breakfast\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                name \u003d description.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                return new AddCommand(new Breakfast(name, info));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"lunch\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                name \u003d description.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                return new AddCommand(new Lunch(name, info));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"dinner\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                name \u003d description.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                info \u003d \"/\" + description.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                return new AddCommand(new Dinner(name, info));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (splitCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    return new ListCommand(splitCommand[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                return (new MarkDoneCommand(index));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                return new FindCommand(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 20,
      "koushireo": 29,
      "-": 32,
      "Ivan Andika": 6
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Dinner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Lunch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Breakfast;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.user.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.user.Tuple;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": " * Storage is a public class, a storage class encapsulates the filePath to read from disk and write to disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Ivan Andika Lie"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String line \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private BufferedReader bufferedReader \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private BufferedWriter bufferedWriter \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private File nameFile \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The function will act to load txt file specified by the filepath, parse it and store it in a new task ArrayList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * to be added in that TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the ArrayList of task loaded from the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if either the object is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        file \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                            + sep + \"Data\" + sep + \"duke.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Unable to access file\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                //TODO: Parse the line"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                loadFile(line, mealTracker);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Unable to open file\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Error reading file\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function acts as a line by line parser from the text file which is used to load a particular type of task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line the line input from the input file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealTracker the task arraylist that will store the tasks from the input file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void loadFile(String line, HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] splitLine \u003d line.split(\"\\\\|\",4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskType \u003d splitLine[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean isDone \u003d splitLine[1].equals(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String description \u003d splitLine[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] nutritionalValue \u003d splitLine[3].split(\"\\\\|\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal newMeal \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (taskType.equals(\"B\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Breakfast(description, nutritionalValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"L\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Lunch(description, nutritionalValue);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Dinner(description, nutritionalValue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal.markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String mealDate \u003d newMeal.getDate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (!mealTracker.containsKey(mealDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(mealDate, new ArrayList\u003cMeal\u003e());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.get(mealDate).add(newMeal);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.get(mealDate).add(newMeal);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a function that will update the input/output file from the current arraylist of tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the task arraylist that will store the tasks from the input file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: maybe we can put the errors in the ui file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateFile(HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e meals) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i : meals.keySet()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ArrayList\u003cMeal\u003e mealsInDay \u003d meals.get(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                for (int j \u003d 0; j \u003c meals.get(i).size(); j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    Meal currentMeal \u003d mealsInDay.get(j);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                    String status \u003d \"0\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (currentMeal.getIsDone()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "                        status \u003d \"1\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String toWrite \u003d currentMeal.getType() + \"|\" + status + \"|\" + currentMeal.getDescription()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \"|date|\" + currentMeal.getDate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    HashMap\u003cString, Integer\u003e nutritionData \u003d currentMeal.getNutritionalValue();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (nutritionData.size() !\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite +\u003d \"|\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        for (String k : nutritionData.keySet()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            toWrite +\u003d k + \"|\" + nutritionData.get(k) + \"|\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite \u003d toWrite.substring(0, toWrite.length() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User loadUser() throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        User tempUser;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        nameFile \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                + sep + \"Data\" + sep + \"user.txt\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (nameFile.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(nameFile));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String line \u003d  bufferedReader.readLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String[] splitLine \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String name \u003d splitLine[0];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int age \u003d Integer.parseInt(splitLine[1]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int height \u003d Integer.parseInt(splitLine[2]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int activityLevel \u003d Integer.parseInt(splitLine[3]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            boolean loseWeight \u003d Boolean.parseBoolean(splitLine[4]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String sex \u003d splitLine[5];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (sex.equals(\"M\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                tempUser \u003d new User(name, age, height, Gender.MALE, activityLevel, loseWeight);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                tempUser \u003d new User(name, age, height, Gender.FEMALE, activityLevel, loseWeight);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                String[] splitWeightInfo \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                tempUser.setWeight(Integer.parseInt(splitWeightInfo[1]), splitWeightInfo[0]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return tempUser;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void saveUser(User user) throws DukeException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String toWrite \u003d user.getName() + \"|\" + user.getAge() + \"|\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + user.getHeight() + \"|\" + user.getActivityLevel() + \"|\" + user.getLoseWeight() + \"|\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getSex() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d \"M\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d \"F\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cTuple\u003e allWeight \u003d user.getAllWeight();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c user.getAllWeight().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d \"\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String date \u003d allWeight.get(i).date;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int weight \u003d allWeight.get(i).weight;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            toWrite +\u003d date + \"|\" + weight;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(nameFile));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 55,
      "koushireo": 52,
      "-": 74,
      "Hashir Zahir": 4,
      "Ivan Andika": 8
    }
  },
  {
    "path": "src/main/java/duke/tasks/Breakfast.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * breakfast is a public class that extends from meal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Breakfast extends Meal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of breakfast object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Breakfast(String description, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"B\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of breakfast object for storage parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Breakfast(String description, String[] details) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"B\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a breakfast object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[B]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[B]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 34
    }
  },
  {
    "path": "src/main/java/duke/tasks/Dinner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * dinner is a public class that inherits from abstract class meal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A dinner object encapsulates the String that express deadline date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Dinner extends Meal {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of dinner object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the dinner object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Dinner(String description, String details) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of dinner object for storage parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Dinner(String description, String[] details) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a dinner object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[D]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[D]\" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 35
    }
  },
  {
    "path": "src/main/java/duke/tasks/Lunch.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * lunch is a public class that inherits form abstract class meal."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A lunch object encapsulates the String that expresses the duration of the lunch"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Lunch extends Meal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of lunch object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Lunch(String description, String details) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"L\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of lunch object for storage parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Lunch(String description, String[] details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"L\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a lunch object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[L]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[L]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 38
    }
  },
  {
    "path": "src/main/java/duke/tasks/Meal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Task is a public class that represents the tasks in duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": " * A task object encapsulates the description of the task, the type of task it is, and whether"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * the task is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Meal {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected SimpleDateFormat dateparser \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String date \u003d dateparser.format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected HashMap\u003cString, Integer\u003e nutritionValue \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, String details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //todo: date input can only be accepted at the back of the statement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.contains(\"/date\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString \u003d details.split(\"/date\", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Date day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                day \u003d dateparser.parse(splitString[1].trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //todo something here"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            details \u003d splitString[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString1 \u003d details.split(\"/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String data : splitString1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (data.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String[] partitionedData \u003d data.split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String nutrient \u003d partitionedData[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.valueOf(partitionedData[1].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(nutrient, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, String[] details) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Date day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            day \u003d dateparser.parse(details[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            //toDo exception catching added here"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 2; i \u003c details.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionValue.put(details[i], Integer.valueOf(details[i + 1]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function checks whether the particular task object is done and return the string accordingly."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     * @return \u003ccode\u003e[\\u2713]\u003c/code\u003e if the task is done"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     *          \u003ccode\u003e[\\u2718]\u003c/code\u003e if the task is not done"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for description."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a setter for isDone."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for isDone."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     * @return isDone status of the task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the type."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     * @return type of the task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the date."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return date of the meal"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getNutritionalValue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.nutritionValue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     * @return the status icon and the description of the task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.description + \" \" + temp;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "        //TODO: refactor this by using type also"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 75,
      "koushireo": 1,
      "Ivan Andika": 56
    }
  },
  {
    "path": "src/main/java/duke/tasks/MealList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * TaskList is a public class that represents the list of tasks under duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A TaskList object encapsulates the ArrayList of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class MealList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of TaskList object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MealList(HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker \u003d mealTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of TaskList object if there is no argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The TaskList object will initialise a new empty arraylist of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MealList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to delete the task of a particular index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param index the index of task to be deleted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker.get(currentDate).remove(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setMeals(String inputDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        mealTracker.put(inputDate, new ArrayList\u003cMeal\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cMeal\u003e getMeals(String inputDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(inputDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(inputDate, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e getMealTracker() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean checkDate(String date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return mealTracker.containsKey(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 53,
      "koushireo": 9
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String padding \u003d \"     \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String logo \u003d padding + \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            + padding + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            + padding + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            + padding + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            + padding + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String boundary \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void showPadding() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(padding);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"     \" + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showList(ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d meals.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Meal currentMeal \u003d meals.get(i - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            showPadding();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(i + \". \" + currentMeal);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showDone(Meal currentMeal) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(\"  \" + currentMeal);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showAdded(Meal currentMeal, ArrayList\u003cMeal\u003e meals, User user, String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve added this meal:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int totalConsume \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            totalConsume +\u003d meals.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Now you have \" + (user.getDailyCalorie()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                - totalConsume) + \" calories left on \" + date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showDeleted(Meal currentMeal, ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Now you have \" + meals.size()  + \" tasks in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(Scanner in) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + message);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"Failed to load file.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserLoadingError() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Unable to load user file.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeNew() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Welcome!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"I see that you\u0027re new.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Please enter your particulars to get started!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ivan Andika"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeBack(User user) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Welcome back, \"  + user.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserSetupDone(User user) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Thanks, \" + user.getName() + \"!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"We are done setting up!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showCalorie(User user) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"This is your daily limit\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + user.getDailyCalorie());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showRemainingCalorie(ArrayList\u003cMeal\u003e mealsOfDay, User user) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"You can consume this many calorie today\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int limit \u003d user.getDailyCalorie();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int consumeTotal \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c mealsOfDay.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            consumeTotal +\u003d mealsOfDay.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + Integer.toString(limit - consumeTotal));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 13,
      "koushireo": 45,
      "-": 61,
      "Ivan Andika": 1
    }
  },
  {
    "path": "src/main/java/duke/user/Gender.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    MALE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    FEMALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "koushireo": 5
    }
  },
  {
    "path": "src/main/java/duke/user/Tuple.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Tuple {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int weight;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Tuple(String date, int weight) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 9
    }
  },
  {
    "path": "src/main/java/duke/user/User.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ArrayList\u003cTuple\u003e weight \u003d new ArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int height \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gender sex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean isSetup;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int activityLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private double[] factor \u003d {1.2, 1.375, 1.55, 1.725, 1.9};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean loseWeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User(String name, int age, int height, Gender sex, int activityLevel, boolean loseWeight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d loseWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setup() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int weight \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int height \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Input name\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        name \u003d in.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input age\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input weight\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            weight \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input height\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Input gender(Male/Female)\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String sex \u003d in.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (sex.charAt(0) \u003d\u003d \u0027M\u0027) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.sex \u003d Gender.MALE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.sex \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int activityLevel \u003d 5;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        while (activityLevel \u003e 4 || activityLevel \u003c 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input Activity Level\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     1) Sedentary (Little or no exercise, desk job\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     2) Lightly active (Light exercise/ sports 1-3 days/week\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     3) Moderately active (Moderate exercise/ sports 6-7 days/week)\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     4) Very active (Hard exercise every day, or exercising 2 xs/day) \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"     5) Extra active (Hard exercise 2 or more times per day, or training for\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"marathon, or triathlon, etc. )\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                activityLevel \u003d Integer.parseInt(in.nextLine()) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Would you like to lose weight?(Y/N)\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String choice \u003d in.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (choice.charAt(0) \u003d\u003d \u0027Y\u0027) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.loseWeight \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setWeight(weight);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.add(new Tuple(currentDate, weight));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight, String date) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String currentDate \u003d dateFormat.format(temp.getTime());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.add(new Tuple(currentDate, weight));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setActivityLevel(int activityLevel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setLoseWeight() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setMaintainWeight() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getWeight() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight.get(this.weight.size() - 1).weight;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cTuple\u003e getAllWeight() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.activityLevel;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getDailyCalorie() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        double calorie;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.sex \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() + 5;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() - 161;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return (int)(((this.loseWeight) ? 0.8 : 1) * this.factor[this.activityLevel] * calorie);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getLoseWeight() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.loseWeight;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Gender getSex() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.sex;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getIsSetup() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.isSetup;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 15,
      "koushireo": 167
    }
  },
  {
    "path": "src/test/java/duke/parsers/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"breakfast burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"breakfast burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"breakfast burger /calories 100 /date 1/1/2019\") instanceof AddCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"lunch burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"lunch burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"lunch burger /calories 100 /date 1/1/2019\") instanceof AddCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"dinner burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"dinner burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(Parser.parse(\"dinner burger /calories 100 /date 1/1/2019\") instanceof AddCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Something is wrong with the parser\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 9,
      "-": 22
    }
  }
]
