[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.gradle.build-scan\u0027 version \u00272.4.1\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \"8.23\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "version \u00271.2.1\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    archiveVersion \u003d \"1.2.1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java/\u0027]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 7,
      "Fractalisk": 1,
      "GaryStu": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Main is a public class that contains the main function to drive the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It encapsulates a Storage object, a MealList object, and an Ui object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList tasks \u003d new MealList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Autocorrect autocorrect;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private TransactionList transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a constructor of Duke to start the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.load(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            user \u003d storage.loadUser(); //load user inf"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            //TODO: Implement in different function"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            storage.loadTransactions(transactions, user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showLoadinngTransactionError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *  Run is a function that generate the flow of duke program from beginning until the end."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!user.getIsSetup()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeNew();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeBack(user);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        while (!user.getIsSetup()) { //setup user profile if it\u0027s empty"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setup();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showUserSetupDone(user);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                storage.saveUser(user);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Parser userParser \u003d new Parser(autocorrect);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                String fullCommand \u003d ui.readCommand(in);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Command c \u003d userParser.parse(fullCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                c.execute(tasks, ui, storage, user, in, transactions);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the main function."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23,
      "GaryStu": 54,
      "koushireo": 26
    }
  },
  {
    "path": "src/main/java/duke/commons/FilePaths.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class file defines all the filepaths that will be used in the storage component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class FilePaths {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final File DATA_FILE \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            + sep + \"Data\" + sep + \"duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final File DEFAULTS_FILE \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            + sep + \"Data\" + sep + \"defaultItems.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final File GOAL_FILE \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            + sep + \"Data\" + sep + \"goal.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final File USER_FILE \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            + sep + \"Data\" + sep + \"user.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final File AUTOCORRECT_FILE \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            + sep + \"Data\" + sep + \"word.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static final File TRANSACTION_FILE \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            + sep + \"Data\" + sep + \"transaction.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 20,
      "GaryStu": 2
    }
  },
  {
    "path": "src/main/java/duke/commons/definitions/CommandDefinitions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.commons.definitions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class defines all the command keywords that will be used in the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class CommandDefinitions {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_BREAKFAST_COMMAND \u003d \"breakfast\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_LUNCH_COMMAND \u003d \"lunch\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DINNER_COMMAND \u003d \"dinner\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_ADD_COMMAND \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_EDIT_COMMAND \u003d \"edit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_EXIT_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_UPDATE_WEIGHT_COMMAND \u003d \"update\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_SET_GOAL_COMMAND \u003d \"setgoal\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_HISTORY_COMMAND \u003d \"history\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_SUGGEST_COMMAND \u003d \"suggest\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DEPOSIT_COMMAND \u003d \"deposit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_PAYMENT_COMMAND \u003d \"pay\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * DukeException is an exception class that extends from the class Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the constructor of DukeException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message this is the error message generated from a DukeException"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ExceptionMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ExceptionMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String UNKNOWN_COMMAND \u003d \"\\u2639 I\u0027m sorry, but I don\u0027t know what the command \""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            + \"you have just entered means :-(\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6
    }
  },
  {
    "path": "src/main/java/duke/logic/autocorrect/Autocorrect.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This is a class that will help to correct minor typo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class Autocorrect {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private HashMap\u003cString,int[]\u003e mapper \u003d new HashMap();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private ArrayList\u003cString\u003e words \u003d new ArrayList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int[] counter \u003d new int[26];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public Autocorrect() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will store the pre defined correct words into the object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param word pre defined correct words to be stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void load(String word) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int[] counting \u003d new int[26];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i +\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counting[i] \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counting[word.charAt(i) - 97] +\u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        mapper.put(word, counting);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        words.add(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String runOnCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        setWord(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return getWord();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String runOnArgument(String userInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String correctedInput \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString1 \u003d userInput.split(\"/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (splitString1.length \u003e 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                for (String data : splitString1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (data.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        String[] partitionedData \u003d data.split(\" \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        setWord(partitionedData[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        execute();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        String nutrient \u003d getWord();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        userInput.replace(\"/\" + partitionedData[0], \"/\" + nutrient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will store the user input word into the object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param word word to be stored."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWord(String word) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i +\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counter[i] \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length() - 1; i +\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if ((int)word.charAt(i) - 97 \u003e\u003d 0 \u0026\u0026 (int)word.charAt(i) - 97 \u003c 26) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                counter[(int) word.charAt(i) - 97] +\u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will compare the word in the object against."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * pre defined correct words and change it to those words"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int currentDistance \u003d 4;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int distance \u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String likelyWord \u003d word;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c words.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (int j \u003d 0; j \u003c 26; j +\u003d 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                distance +\u003d Math.abs(counter[j] - mapper.get(words.get(i))[j]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (distance \u003c 4) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (distance \u003c currentDistance) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    likelyWord \u003d words.get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    currentDistance \u003d distance;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            distance \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.word \u003d likelyWord;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getWord() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.word;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 34,
      "HashirZahir": 2,
      "koushireo": 71
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddCommand object encapsulates the current meal that is to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for AddCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * the meal specified as the instance field meal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand(Meal meal) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes add command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meal is supposed to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException if there is a parsing error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.addMeals(this.meal);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e mealData \u003d meals.getMealTracker().get(this.meal.getDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showAdded(this.meal, mealData, user, this.meal.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 24,
      "GaryStu": 21,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddGoalCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddGoalCommand object encapsulates the goal object that is to be added."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * average kg loss per day should NOT be more than 0.13607787283kg (\u003e0.3 pounds)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * average calorie loss per day should NOT exceed 40% base calorie intake,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * balanced at around 20% (1kg \u003d 7700cal \u003d 7.7kcal)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddGoalCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for AddGoalCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param goal The goal to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddGoalCommand(Goal goal) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes AddGoalCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meal is supposed to be added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.addGoal(this.goal, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showAddedGoal(goal);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.updateGoal(meals);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String response \u003d ui.readCommand(in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (response.trim().equals(\"y\")  || response.trim().equals(\"Y\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                meals.addGoal(this.goal, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showAddedGoal(goal);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                storage.updateGoal(meals);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else if (response.trim().equals(\"n\")  || response.trim().equals(\"N\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(\"The set goal command has been canceled\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(\"An unknown response has been recorded \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"     The set goal command has been canceled\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 61,
      "GaryStu": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddItemCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddItemCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddItemCommand object encapsulates the current meal that is to be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddItemCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for AddItemCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddItemCommand(Meal meal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Execute the AddItemCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meal is supposed to be added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user, Scanner in, TransactionList transactions) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.addStoredItem(this.meal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showAddedItem(this.meal);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateDefaults(meals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 38,
      "GaryStu": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class AddTransactionCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Transaction transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList tasks, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        transactions.addTransaction(this.transaction);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        user.updateAccountBalance(transaction);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        storage.updateTransaction(transactions);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        storage.saveUser(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showTransactionAdded(this.transaction, user.getAccountBalance());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * ClearCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A ClearCommand object encapsulates the 2 dates between which all meal data will be cleared."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    Date startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    Date endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for ClearCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param startDateStr the start of the time period to be cleared, inclusive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param endDateStr the end of the time period to be cleared, inclusive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException if the inputs cannot be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public ClearCommand(String startDateStr, String endDateStr) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            startDate \u003d dateFormat.parse(startDateStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            endDate \u003d dateFormat.parse(endDateStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + startDateStr + \" and \" + endDateStr + \" as dates.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the ClearCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        cal.setTime(startDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (cal.setTime(startDate); !cal.getTime().after(endDate); cal.add(Calendar.DATE, 1)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.deleteAllMealsOnDate(dateFormat.format(cal.getTime()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showCleared(dateFormat.format(startDate), dateFormat.format(endDate));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 25,
      "HashirZahir": 30,
      "GaryStu": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Command is the abstract base class for all the command objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * which allow the child class to specify which command (e.g. add, delete, etc) to use."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This class is an abstract class that will change according to the inheritor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when there is an error"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public abstract void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                                 Scanner in, TransactionList transactions) throws DukeException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23,
      "GaryStu": 15,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * DeleteCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A DeleteCommand object encapsulates the index of meal and date of the meal that is to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private final String helpText \u003d \"Please follow: delete \u003cindex\u003e /date \u003cdate\u003e or \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            + \"delete \u003cindex\u003e to delete for current day.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param indexStr the index of meal on the date to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param date Date of meal to be deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(String indexStr, String date) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this(indexStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Date parsedDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            parsedDate \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + date + \" as a date. \" + helpText);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        currentDate \u003d dateFormat.format(parsedDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param indexStr the index of meal to be deleted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(String indexStr) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.index \u003d Integer.parseInt(indexStr.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + indexStr + \" as integer index. \" + helpText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the DeleteCommand."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when the index of the object to be deleted is out of bounds"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e meals.getMealsList(currentDate).size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"Index provided out of bounds for list of meals on \" + currentDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal currentMeal \u003d meals.delete(currentDate, index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showDeleted(currentMeal, meals.getMealsList(currentDate));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26,
      "HashirZahir": 23,
      "GaryStu": 21,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Meal updatedMeal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for EditCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal object to be edited to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public EditCommand(Meal meal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.updatedMeal \u003d meal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the EditCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException if there is a parsing error for the date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal \u003d meals.updateMeal(updatedMeal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String dateStr \u003d updatedMeal.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showUpdated(this.updatedMeal, meals.getMealsList(this.updatedMeal.getDate()), user, dateStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23,
      "HashirZahir": 15,
      "GaryStu": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * ExitCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * isExit() is a function that will return true if called, to indicate the the program is going to exit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the function is called"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user, Scanner in, TransactionList transactions) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 14,
      "GaryStu": 19,
      "koushireo": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * The FindCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It encapsulates the String to find in the current MealList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * FindCommand is a constructor that store the string to find."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param description the description of the string to find"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public FindCommand(String description, String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.currentDate \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the FindCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user, Scanner in, TransactionList transactions) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e matchingMeals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMealsList(currentDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (Meal element: currentMeals) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String currentTaskString \u003d element.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (currentTaskString.contains(description)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                matchingMeals.add(element);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showList(matchingMeals);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 25,
      "GaryStu": 28,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * The HelpCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It finds and shows to the UI the required help file by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String specifiedHelp \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for HelpCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for HelpCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param specifiedHelp The type of help specified by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HelpCommand(String specifiedHelp) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.specifiedHelp \u003d specifiedHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the HelpCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when there is an error loading the help file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ArrayList\u003cString\u003e helpLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        storage.loadHelp(helpLines, specifiedHelp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showHelp(helpLines);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26,
      "GaryStu": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * HistoryCommand is a public class that inherits form abstract class Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Tracks the history of all commands executed in the current session"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private ArrayList\u003cString\u003e historyCommandsList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for HistoryCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public HistoryCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        historyCommandsList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Add command to history of commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param commandStr the command to be added to the list of executed commands thus far"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void addCommand(String commandStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (!commandStr.equals(\"history\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            historyCommandsList.add(commandStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Clears the history of the commands executed thus far."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void clearHistory() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        historyCommandsList.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the HistoryCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user, Scanner in, TransactionList transactions) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showHistory(historyCommandsList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26,
      "HashirZahir": 28,
      "GaryStu": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * ListCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It displays all the meals in a relevant day in a list to the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date The date of the data to List"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException if the date cannot be parsed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public ListCommand(String date) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        currentDate \u003d dateFormat.format(temp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the ListCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meal(s) is supposed to be listed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"list\" command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showCalorie(user);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMealsList(currentDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (!meals.checkDate(currentDate)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(\"There isn\u0027t any food on \" + currentDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showList(currentMeals);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showCaloriesLeft(currentMeals, user, currentDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        //ui.showRemainingCalorie(currentMeals, user, tasks.caloriesAvgToGoal());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 25,
      "GaryStu": 17,
      "koushireo": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * MarkDoneCommand is a public class that inherits form abstract class Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A MarkDoneCommand object encapsulates the index of meal to be marked as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String helpText \u003d \"Please follow: done \u003cindex\u003e /date \u003cdate\u003e or \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            + \"done \u003cindex\u003e to mark done the indexed meal for current day.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param indexStr the index of meal on the date to be marked as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date which meals are to be marked as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand(String indexStr, String date) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this(indexStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Date parsedDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            parsedDate \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Unable to parse input\" + date + \" as a date. \" + helpText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.currentDate \u003d dateFormat.format(parsedDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param indexStr the index of meal on the today to be marked as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws DukeException when parseInt is unable to parse the index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand(String indexStr) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.index \u003d Integer.parseInt(indexStr.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Unable to parse input \" + indexStr + \" as integer index. \" + helpText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the MarkDoneCommand."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when the index of the meal to be marked done is invalid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e meals.getMealsList(currentDate).size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Index provided out of bounds for list of meals on \" + currentDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal currentMeal \u003d meals.markDone(currentDate, index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage.updateFile(meals);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showDone(currentMeal, meals.getMealsList(currentDate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMealsList(currentDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showCaloriesLeft(currentMeals, user, currentDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 25,
      "GaryStu": 50,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/SuggestCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.logic.suggestion.MealSuggestionAnalytics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactionList) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        TODO: analyze the list of SuggestMeal objects as well as the current calorie goal of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "              user, the date provided and the user meal parameters provided to get the best meal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "              suggestion."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        MealSuggestionAnalytics mealSuggestionAnalytics \u003d new MealSuggestionAnalytics();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 21,
      "Fractalisk": 1,
      "GaryStu": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/UpdateWeightCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateWeightCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for UpdateWeightCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the data to update the user document with"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateWeightCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the UpdateWeightCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param ui the ui object to display the results of the command to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when there is an error parsing the date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                        Scanner in, TransactionList transactions) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String[] temp \u003d description.split(\"/date\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (temp.length \u003e 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setWeight(Integer.parseInt(temp[0].trim()), temp[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            user.setWeight(Integer.parseInt(temp[0]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        storage.saveUser(user);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 18,
      "GaryStu": 3,
      "koushireo": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/AddBreakfastCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Breakfast;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddBreakfastCommandParser implements ParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of the command cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealName \u003d userInput.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealInfo \u003d \"/\" + userInput.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(new Breakfast(mealName, mealInfo));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            //todo: handle trailing userInput without \"/\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(new Breakfast(userInput, \"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/AddDinnerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Dinner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddDinnerCommandParser implements ParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of the command cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealName \u003d userInput.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealInfo \u003d \"/\" + userInput.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(new Dinner(mealName, mealInfo));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            //todo: handle trailing userInput without \"/\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(new Dinner(userInput, \"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/AddItemCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.AddItemCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Item;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddItemCommandParser implements ParserInterface\u003cAddItemCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddItemCommand parse(String userInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String name \u003d userInput.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String info \u003d \"/\" + userInput.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddItemCommand(new Item(name, info));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/AddLunchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Lunch;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddLunchCommandParser implements ParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of the command cannot be empty.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealName \u003d userInput.split(\"/\", 2)[0].trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String mealInfo \u003d \"/\" + userInput.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(new Lunch(mealName, mealInfo));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            //todo: handle trailing userInput without \"/\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(new Lunch(userInput, \"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ClearCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ClearCommandParser implements ParserInterface\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ClearCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitArgs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (splitArgs.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new ClearCommand(splitArgs[0], splitArgs[1]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(\"Please enter 2 dates; Start and End dates to clear meals from.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"Please enter 2 dates; Start and End dates to clear meals from.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DeleteCommandParser implements ParserInterface\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            // user specifies date and index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (userInput.split(\"/date\").length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String[] splitArgs \u003d userInput.split(\"/date\", 2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DeleteCommand(splitArgs[0], splitArgs[1]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                // user only specifies index to delete for current day."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"Please enter index of meal to delete on today\u0027s list or \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"date and index of meal to delete\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/DepositCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.logic.commands.AddTransactionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.Deposit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class DepositCommandParser implements ParserInterface\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInput.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Please enter the amount to deposit for today\u0027s date or date\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    + \" and amount to be deposited\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String depositAmountString \u003d userInput.split(\"/date\", 2)[0].trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            BigDecimal depositAmount \u003d new BigDecimal(depositAmountString);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String dateString \u003d userInput.split(\"/date\", 2)[1].trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            Date parsedDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                parsedDate \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                throw new DukeException(\"Unable to parse input\" + dateString + \"as a date.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            dateString \u003d dateFormat.format(parsedDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(new Deposit(depositAmount, dateString));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            BigDecimal depositAmount \u003d new BigDecimal(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(new Deposit(depositAmount));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DoneCommandParser implements ParserInterface\u003cMarkDoneCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MarkDoneCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (userInput.split(\"/date\").length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                String[] splitArgs \u003d userInput.split(\"/date\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new MarkDoneCommand(splitArgs[0], splitArgs[1]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new MarkDoneCommand(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Please enter index of meal to be marked done on today\u0027s list or \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    + \"date and index of meal to be marked done\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 13,
      "GaryStu": 9
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class EditCommandParser implements ParserInterface\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public EditCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String name \u003d userInput.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String info \u003d \"/\" + userInput.split(\"/\", 2)[1];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new EditCommand(new Meal(name, info));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class FindCommandParser implements ParserInterface\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public FindCommand parse(String userInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String name \u003d userInput.split(\" /date \", 2)[0];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.split(\" /date \").length \u003e 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String date \u003d userInput.split(\" /date \")[1];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new FindCommand(name, date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new FindCommand(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class HelpCommandParser implements ParserInterface\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HelpCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ListCommandParser implements ParserInterface\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ListCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new ListCommand(userInput);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.UpdateWeightCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_ADD_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_BREAKFAST_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_CLEAR_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_DELETE_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_DEPOSIT_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_DINNER_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_DONE_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_EDIT_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_EXIT_COMMAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_FIND_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_HELP_COMMAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_HISTORY_COMMAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_LIST_COMMAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_LUNCH_COMMAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_PAYMENT_COMMAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_SET_GOAL_COMMAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_SUGGEST_COMMAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.definitions.CommandDefinitions.PARSER_UPDATE_WEIGHT_COMMAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.exceptions.ExceptionMessages.UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser is a public class that help to parse the command that is inputted from the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * And generate the appropriate command with their appropriate arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static HistoryCommand historyCommand \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static Autocorrect autocorrect;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Parser(Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.autocorrect \u003d autocorrect;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the main function that parse the command inputted by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param fullCommand the string the user input in the CLI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @return \u003ccode\u003enew ExitCommand()\u003c/code\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         if the user input \"bye\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Breakfast())\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"breakfast\" followed by the description of the meal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Lunch()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"lunch\" followed by the description of the meal"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Dinner()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"dinner\" followed by the description of the meal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew ListCommand()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew MarkDoneCommand(index)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"done\" followed by the index of the meal to be marked completed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew FindCommand(description)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"find\" followed by the string that needs to be added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew DeleteCommand(index) \u003c/code\u003e if the sure input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"delete\" followed by the index of the task to be deleted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException when the command is not recognized or command syntax is invalid"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (splitCommand.length !\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            splitCommand \u003d new String[] {splitCommand[0], \"\"};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String command \u003d splitCommand[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        command \u003d autocorrect.runOnCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        userInput \u003d autocorrect.runOnArgument(splitCommand[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        historyCommand.addCommand(command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_EXIT_COMMAND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_BREAKFAST_COMMAND:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddBreakfastCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_LUNCH_COMMAND:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddLunchCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DINNER_COMMAND:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddDinnerCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_ADD_COMMAND:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddItemCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_LIST_COMMAND:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new ListCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DONE_COMMAND:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DoneCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_FIND_COMMAND:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new FindCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DELETE_COMMAND:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DeleteCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_UPDATE_WEIGHT_COMMAND:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new UpdateWeightCommand(userInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_CLEAR_COMMAND:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new ClearCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_EDIT_COMMAND:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new EditCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_SET_GOAL_COMMAND:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new SetgoalCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_HELP_COMMAND:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new HelpCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DEPOSIT_COMMAND:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new DepositCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_PAYMENT_COMMAND:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new PaymentCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_HISTORY_COMMAND:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                // clear history if requested"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (!userInput.isEmpty() \u0026\u0026 userInput.equals(\"clear\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    historyCommand.clearHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return historyCommand;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_SUGGEST_COMMAND:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new SuggestCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 86,
      "HashirZahir": 7,
      "GaryStu": 16,
      "koushireo": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Represents a parser that processes user input into a Command of type T."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * @param \u003cT\u003e type of Command returned."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public interface ParserInterface\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parses user input into a Command of type T and returns it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInput String input by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return Command Returns a Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws DukeException If the user input has syntactic errors."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    T parse(String userInput) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 14,
      "GaryStu": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/PaymentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.logic.commands.AddTransactionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.Payment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class PaymentCommandParser implements ParserInterface\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInput.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new DukeException(\"Please enter the amount to be paid for today\u0027s date or\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    + \"the date and the amount to be deposited\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String paymentAmountString \u003d userInput.split(\"/date\", 2)[0].trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            BigDecimal paymentAmount \u003d new BigDecimal(paymentAmountString);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String dateString \u003d userInput.split(\"/date\", 2)[1].trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            Date parsedDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                parsedDate \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                throw new DukeException(\"Unable to parse input\" + dateString + \"as a date.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            dateString \u003d dateFormat.format(parsedDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(new Payment(paymentAmount, dateString));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            BigDecimal paymentAmount \u003d new BigDecimal(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(new Payment(paymentAmount));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/SetgoalCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.AddGoalCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class SetgoalCommandParser implements ParserInterface\u003cAddGoalCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddGoalCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String name \u003d userInput.split(\" \", 2)[0].trim();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String info \u003d userInput.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddGoalCommand(new Goal(name, info));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/SuggestCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import duke.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class SuggestCommandParser implements ParserInterface\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestCommand parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        // TODO: Finalize suggest command input format and update UG/DG"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new SuggestCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 12
    }
  },
  {
    "path": "src/main/java/duke/logic/suggestion/MealSuggestionAnalytics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package duke.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * This class handles all the data analytics aspect of the meal suggestion feature."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * It calculates the meal preference score based on the meal parameters to be considered"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * and returns the highest meal preference score meal to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class MealSuggestionAnalytics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public MealSuggestionAnalytics() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 13
    }
  },
  {
    "path": "src/main/java/duke/model/Breakfast.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * breakfast is a public class that extends from meal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Breakfast extends Meal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of breakfast object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Breakfast(String description, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"B\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of breakfast object for storage parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Breakfast(String description, String[] details) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"B\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a breakfast object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[B]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[B]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 33,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/model/Deposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Deposit extends Transaction {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Deposit(BigDecimal transactionAmount, String dateString) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(transactionAmount, dateString);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super.type \u003d \"DEP\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Deposit(BigDecimal transactionAmount) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(transactionAmount);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super.type \u003d \"DEP\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return \"[DEP]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 20
    }
  },
  {
    "path": "src/main/java/duke/model/Dinner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * dinner is a public class that inherits from abstract class meal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Dinner extends Meal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of dinner object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the dinner object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Dinner(String description, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of dinner object for storage parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Dinner(String description, String[] details) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"D\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a dinner object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[D]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[D]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 33,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/duke/model/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Goal is a public class that defines all user set dietary goals."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private SimpleDateFormat dateparser \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String enddate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String startdate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, Integer\u003e nutritionValue \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal(String enddate, String details) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Date day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            startdate \u003d dateparser.format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            day \u003d dateparser.parse(enddate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.enddate \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"It appears an invalid date has been entered\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString1 \u003d details.split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String data : splitString1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (data.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String[] partitionedData \u003d data.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String nutrient \u003d partitionedData[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.valueOf(partitionedData[1].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(nutrient, value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"It appears that there are fields missing in the setgoals command\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal(String enddate, String startdate, String[] details) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.startdate \u003d startdate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Date day;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            day \u003d dateparser.parse(enddate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.enddate \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"It appears the previous save file has an invalid date\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 1; i \u003c details.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionValue.put(details[i], Integer.valueOf(details[i + 1]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.enddate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.startdate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getNutritionalValue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.nutritionValue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the status icon and the description of the goal"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[NO]\" + \" \" + this.enddate + \" | \" + temp;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //TODO: refactor this by using type also"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 87
    }
  },
  {
    "path": "src/main/java/duke/model/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * item is a public class that extends from meal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Item extends Meal {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of item object, which is used to store default meal info."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the item object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Item(String description, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"S\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of item object for storage parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the item object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Item(String description, String[] details) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 0; i \u003c details.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            super.nutritionValue.put(details[i], Integer.valueOf(details[i + 1]));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the description and info of the meal"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.description + \" | \" + temp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 40
    }
  },
  {
    "path": "src/main/java/duke/model/Lunch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * lunch is a public class that inherits form abstract class meal."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Lunch extends Meal {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of lunch object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Lunch(String description, String details) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"L\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of lunch object for storage parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Lunch(String description, String[] details) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super(description, details);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        super.type \u003d \"L\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * this function overrides the toString() function in meal to represent the full description of a lunch object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e\"[L]\" + super.toString()\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[L]\" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 35
    }
  },
  {
    "path": "src/main/java/duke/model/Meal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Task is a public class that represents the tasks in duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * A task object encapsulates the description of the task, the type of task it is, and whether"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * the task is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Meal {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected SimpleDateFormat dateparser \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String date \u003d dateparser.format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected HashMap\u003cString, Integer\u003e nutritionValue \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, String details) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //todo: date input can only be accepted at the back of the statement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.contains(\"/date\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString \u003d details.split(\"/date\", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Date day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                day \u003d dateparser.parse(splitString[1].trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //todo something here"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            details \u003d splitString[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (details.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitString1 \u003d details.split(\"/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String data : splitString1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (data.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String[] partitionedData \u003d data.split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String nutrient \u003d partitionedData[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.valueOf(partitionedData[1].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(nutrient, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the secondary constructor of Task object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * used mainly in storage parsing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, String[] details) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Date day;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            day \u003d dateparser.parse(details[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            //toDo exception catching added here"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 2; i \u003c details.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionValue.put(details[i], Integer.valueOf(details[i + 1]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the no argument constructor for meal task object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * used to satisfy requirement for default constructor, not used otherwise"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function checks whether the particular task object is done and return the string accordingly."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003e[\\u2713]\u003c/code\u003e if the task is done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *          \u003ccode\u003e[\\u2718]\u003c/code\u003e if the task is not done"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return (isDone ? \"[YES]\" : \"[NO]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for description."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a setter for isDone."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for isDone."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return isDone status of the task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the type."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return type of the task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the date."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return date of the meal"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getNutritionalValue() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.nutritionValue;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void addNutritionalValue(String keyStr, int value) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.nutritionValue.put(keyStr, value);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return the status icon and the description of the task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.description + \" | \" + temp;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        //TODO: refactor this by using type also"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 89,
      "HashirZahir": 4,
      "GaryStu": 53,
      "koushireo": 2
    }
  },
  {
    "path": "src/main/java/duke/model/MealList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * MealList is a public class that represents the list of meals under DIYeats."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A MealList object encapsulates the ArrayList of meals."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class MealList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e storedItems \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Goal goal \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of MealList object if there is no argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The MealList object will initialise a new empty arraylist of meals."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MealList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to delete the task of a particular index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param date date of the meal to be deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param index the index of task to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Returns the meal that was deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public Meal delete(String date, int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal deletedMeal \u003d this.mealTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.mealTracker.get(date).remove(index - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return deletedMeal;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * This function is used to mark done the task of a particular index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date date of the meal to be marked done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param index the index of task to be marked done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return Returns the meal that was marked done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Meal markDone(String date, int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Meal markedDoneMeal \u003d this.mealTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.mealTracker.get(date).get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return markedDoneMeal;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void deleteAllMealsOnDate(String dateStr) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            this.mealTracker.get(dateStr).clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void addMeal(Meal meal) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String dateStr \u003d meal.getDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (!mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            mealTracker.put(dateStr, new ArrayList\u003cMeal\u003e());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        mealTracker.get(dateStr).add(meal);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Update existing meal from mealList based on date and description given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param newMeal Meal to be updated."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Returns updated meal information."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws DukeException Exception thrown if meal description or date not found in current list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public Meal updateMeal(Meal newMeal) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String dateStr \u003d newMeal.getDate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ArrayList\u003cMeal\u003e meals \u003d getMealsList(dateStr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            for (int idx \u003d 0; idx \u003c meals.size(); idx++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                Meal currMeal \u003d meals.get(idx);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                if (isSameMeal(currMeal, newMeal)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    HashMap\u003cString, Integer\u003e newNutrition \u003d newMeal.getNutritionalValue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    for (String keyStr : newNutrition.keySet()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        currMeal.addNutritionalValue(keyStr, newNutrition.get(keyStr));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    meals.set(idx, currMeal);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    newMeal \u003d currMeal;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    mealTracker.replace(dateStr, meals);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    return newMeal;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"No meal matches description of \" + newMeal.getDescription() + \" on \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + newMeal.getDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new DukeException(\"No meal found on \" + newMeal.getDate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public boolean isSameMeal(Meal meal1, Meal meal2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return meal1.getDescription().equals(meal2.getDescription()) \u0026\u0026 meal1.getDate().equals(meal2.getDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setMealTracker(HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker \u003d mealTracker;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addMeals(Meal data) throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e mealList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(data.getDate())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealList \u003d mealTracker.get(data.getDate());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(data.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealList \u003d mealTracker.get(data.getDate());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //match meal description to stored meals. If it matches a stored meal, compare nutrition data,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        // and fill in any missing fields"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (storedItems.get(data.getDescription()) !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e storedNutritionValue \u003d storedItems.get(data.getDescription());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e nutritionValue \u003d data.getNutritionalValue();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i: storedNutritionValue.keySet()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (nutritionValue.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(i, storedNutritionValue.get(i));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (data.getNutritionalValue().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! It appears there are no default values associated with this meal\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     Please set a default value for this meal using the \\\"add\\\" command, or manually\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     specify nutritional values for this meal\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        mealList.add(data);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cMeal\u003e getMealsList(String inputDate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(inputDate)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(inputDate, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for the mealtracker HashMap."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return mealTracker the data structure storing the list of all meals"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e getMealTracker() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int caloriesAvgToGoal() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate startDate \u003d LocalDate.parse(goal.getStartDate(), formatter);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate endDate \u003d LocalDate.parse(goal.getEndDate(), formatter);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.parse(this.currentDate, formatter);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int totalConsume \u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (LocalDate iterator \u003d startDate; iterator.isBefore(currentDate); iterator \u003d iterator.plusDays(1)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (mealTracker.containsKey(iterator) \u003d\u003d false) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                totalConsume +\u003d goal.getNutritionalValue().get(\"calorie\") / (int) DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ArrayList\u003cMeal\u003e meals \u003d mealTracker.get(iterator.format(formatter));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (meals.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    totalConsume +\u003d goal.getNutritionalValue().get(\"calorie\") / (int) DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    for (int i \u003d 0; i \u003c meals.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        totalConsume +\u003d meals.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        long daysLeft \u003d DAYS.between(currentDate,endDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int caloriesRemaining \u003d goal.getNutritionalValue().get(\"calorie\") - totalConsume;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (daysLeft \u003e\u003d 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return caloriesRemaining / (int)daysLeft;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to check if a entry with the corresponding date is stored."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date the date to be checked"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean checkDate(String date) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return mealTracker.containsKey(date);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to add or update default values for a specified meal item."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param item The data to be set as default for a meal item with matching descriptor"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addStoredItem(Meal item) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String keyword \u003d item.getDescription();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, Integer\u003e data \u003d item.getNutritionalValue();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (storedItems.get(keyword) \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedItems.put(keyword, data);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedItems.remove(keyword);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedItems.put(keyword, data);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getStoredItem(String keyword) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return storedItems.get(keyword);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void removeStoredItem(String keyword) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storedItems.remove(keyword);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addGoal(Goal goal, boolean override) throws DukeException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.goal !\u003d null \u0026\u0026 override \u003d\u003d false) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"You currently have a previously set goal active\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     Would you like to override the existing goal? (Y/N)\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.goal \u003d goal;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for Goal."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return goal the data structure storing the goal"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for the StoredItems HashMap."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return storedItems the data structure storing the list of all meals"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e getStoredList() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return storedItems;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 170,
      "HashirZahir": 51,
      "GaryStu": 11,
      "koushireo": 8
    }
  },
  {
    "path": "src/main/java/duke/model/Payment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Payment extends Transaction {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Payment(BigDecimal transactionAmount, String dateString) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(transactionAmount, dateString);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super.type \u003d \"PAY\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Payment(BigDecimal transactionAmount) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(transactionAmount);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super.type \u003d \"PAY\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return \"[PAY]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 20
    }
  },
  {
    "path": "src/main/java/duke/model/SuggestMeal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * SuggestMeal class contains additional parameters that a normal Meal object does not posses."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * This class handles all the data storage for meal suggestion."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class SuggestMeal extends Meal {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestMeal(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 12
    }
  },
  {
    "path": "src/main/java/duke/model/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected BigDecimal transactionAmount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected SimpleDateFormat dateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String date \u003d dateParser.format(Calendar.getInstance().getTime());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Transaction(BigDecimal transactionAmount, String dateString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transactionAmount \u003d transactionAmount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.date \u003d dateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Transaction(BigDecimal transactionAmount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transactionAmount \u003d transactionAmount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public BigDecimal getTransactionAmount() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.transactionAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return \" SGD\" + this.transactionAmount + \"| \" + getDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 38
    }
  },
  {
    "path": "src/main/java/duke/model/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cTransaction\u003e\u003e transactionTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Transaction deleteTransaction(String date, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Transaction deletedTransaction \u003d this.transactionTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transactionTracker.get(date).remove(index - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return deletedTransaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void deleteAllTransactionOnDate(String dateStr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transactionTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.transactionTracker.get(dateStr).clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String dateStr \u003d transaction.getDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!transactionTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.put(dateStr, new ArrayList\u003cTransaction\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        transactionTracker.get(dateStr).add(transaction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ArrayList\u003cTransaction\u003e getTransactionList(String dateStr) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transactionTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return transactionTracker.get(dateStr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.put(dateStr, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return transactionTracker.get(dateStr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cTransaction\u003e\u003e getTransactionTracker() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return transactionTracker;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 53
    }
  },
  {
    "path": "src/main/java/duke/model/user/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Currency;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private BigDecimal amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Currency currency \u003d Currency.getInstance(\"SGD\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Account(BigDecimal amount) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void setAmount(BigDecimal amount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getCurrency() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return currency.getCurrencyCode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void deposit(BigDecimal deposit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        //System.out.println(deposit + \"\" + currency.getCurrencyCode() + \" deposited\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount.add(deposit);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void withdraw(BigDecimal withdrawal) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (withdrawal.compareTo(amount) \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.amount \u003d amount.subtract(withdrawal);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            //System.out.println(withdrawal + \" \" + currency.getCurrencyCode() + \" withdrawn from your account\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(\"     Balance insufficient for a \" + withdrawal"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    + currency.getCurrencyCode() + \" withdrawal\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 40
    }
  },
  {
    "path": "src/main/java/duke/model/user/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    MALE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    FEMALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 4
    }
  },
  {
    "path": "src/main/java/duke/model/user/Tuple.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * This is a class that will store weight at a specific date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Tuple {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a class that will store weight at a specific date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param date date of the input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight weight during the input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Tuple(String date, int weight) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "koushireo": 18
    }
  },
  {
    "path": "src/main/java/duke/model/user/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.Transaction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This is a class that will store user information to be used for processing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ArrayList\u003cTuple\u003e weight \u003d new ArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int height \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gender sex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean isSetup;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int activityLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private double[] factor \u003d {1.2, 1.375, 1.55, 1.725, 1.9};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean loseWeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to create an empty user profile."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @Author Foo Chi Hen"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to create an user profile with all the info."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Used during loading."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param name name of user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param age age of user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param height height of user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param sex biological gender of user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param activityLevel how active the user is"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param loseWeight if they would like to lose weight or maintain"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public User(String name, int age, int height, Gender sex, int activityLevel, boolean loseWeight,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                BigDecimal accountBalance) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.sex \u003d sex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d loseWeight;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account \u003d new Account(accountBalance);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to update an empty user profile with all the info."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Used during startup."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setup() throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int weight \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int height \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Input name\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        name \u003d in.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input age\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input weight\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            weight \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input height\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Input gender(Male/Female)\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String sex \u003d in.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (sex.charAt(0) \u003d\u003d \u0027M\u0027) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.sex \u003d Gender.MALE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.sex \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int activityLevel \u003d 5;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        while (activityLevel \u003e 4 || activityLevel \u003c 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     Input Activity Level\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     1) Sedentary (Little or no exercise, desk job\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     2) Lightly active (Light exercise/ sports 1-3 days/week\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     3) Moderately active (Moderate exercise/ sports 6-7 days/week)\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"     4) Very active (Hard exercise every day, or exercising 2 xs/day) \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"     5) Extra active (Hard exercise 2 or more times per day, or training for\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"marathon, or triathlon, etc. )\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                activityLevel \u003d Integer.parseInt(in.nextLine()) - 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"     Would you like to lose weight?(Y/N)\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String choice \u003d in.nextLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (choice.charAt(0) \u003d\u003d \u0027Y\u0027) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.loseWeight \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(\"      What is your initial account balance? (in SGD)\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal accountBalance \u003d new BigDecimal(in.nextLine());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account \u003d new Account(accountBalance);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setWeight(weight);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at time of input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Calendar calendarDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String currentDate \u003d dateFormat.format(calendarDate.getTime());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.add(new Tuple(currentDate, weight));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at input date."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param date String of the date in DD/MM/YYYY format"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight, String date) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Date temp;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            temp \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String currentDate \u003d dateFormat.format(temp.getTime());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.add(new Tuple(currentDate, weight));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    //TODO: might want to refactor this to make it more cohesive (1 degree of separation only)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void depositToAccount(BigDecimal depositAmount) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account.deposit(depositAmount);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public BigDecimal getAccountBalance() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.account.getAmount();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void setAccountBalance(BigDecimal accountBalance) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account.setAmount(accountBalance);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void updateAccountBalance(Transaction transaction) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal transactionAmount \u003d transaction.getTransactionAmount();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transaction.getType().equals(\"PAY\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.account.withdraw(transactionAmount);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else if (transaction.getType().equals(\"DEP\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.account.deposit(transactionAmount);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    //TODO: might want to refactor (1 DoS)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getCurrency() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return account.getCurrency();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setActivityLevel(int activityLevel) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setLoseWeight() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.loseWeight \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setMaintainWeight() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.loseWeight \u003d false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getWeight() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight.get(this.weight.size() - 1).weight;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to obtain all the weight at different date."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cTuple\u003e getAllWeight() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.activityLevel;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getDailyCalorie() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        double calorie;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.sex \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() + 5;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() - 161;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return (int)(((this.loseWeight) ? 0.8 : 1) * this.factor[this.activityLevel] * calorie);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getLoseWeight() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.loseWeight;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Gender getSex() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.sex;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to check if it\u0027s an empty profile."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getIsSetup() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.isSetup;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23,
      "GaryStu": 37,
      "koushireo": 202
    }
  },
  {
    "path": "src/main/java/duke/storage/Load.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.FilePaths.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This object is in charge of all reading from save operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Load {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private BufferedReader bufferedReader \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private BufferedWriter bufferedWriter \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The function will act to load txt file specified by the filepath, parse it and store it in a new task ArrayList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * to be added in that MealList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws DukeException if either the object is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadFile(MealList meals, File directory) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try { //read data file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(directory));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedWriter \u003d new BufferedWriter(new FileWriter(directory));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (Exception f) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(\"Failed to load file\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //TODO: Parse the line"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                LoadLineParser.parse(meals, line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"Unable to open file\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"Error reading file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void loadTransactions(TransactionList transactions, User user) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(TRANSACTION_FILE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                bufferedWriter \u003d new BufferedWriter(new FileWriter(TRANSACTION_FILE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (Exception f) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                throw new DukeException(\"Failed to load file\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                LoadLineParser.parseTransactions(transactions, line, user);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public User loadUser() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        User tempUser;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (USER_FILE.length() \u003d\u003d 0) { //user.txt has nothing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new User();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedReader \u003d new BufferedReader(new FileReader(USER_FILE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                tempUser \u003d LoadLineParser.parseUser(line);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String[] splitWeightInfo \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    tempUser.setWeight(Integer.parseInt(splitWeightInfo[1]), splitWeightInfo[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedReader.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return tempUser;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadAutoCorrect(Autocorrect autocorrect) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(AUTOCORRECT_FILE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                autocorrect.load(line.trim());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadHelp(ArrayList\u003cString\u003e lines, String specifiedHelp) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        File helpFile \u003d LoadHelpUtil.load(specifiedHelp);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(helpFile));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"Unable to access help file\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                lines.add(line);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new DukeException(\"Error reading help file\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 101,
      "GaryStu": 22
    }
  },
  {
    "path": "src/main/java/duke/storage/LoadHelpUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class is in charge of parsing user-designated help command to correct filepath."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class LoadHelpUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static File load(String specifiedHelp) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String helpFileName \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        File helpFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (specifiedHelp.isBlank()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            helpFileName \u003d \"help.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            helpFileName \u003d specifiedHelp + \".txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String sep \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        helpFile \u003d new File(\"src\" + sep + \"main\" + sep + \"java\" + sep + \"duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + sep + \"commons\" + sep + \"help\" + sep + helpFileName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return helpFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 24
    }
  },
  {
    "path": "src/main/java/duke/storage/LoadLineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class LoadLineParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function acts as a parser from the text file which is used to store data from the previous session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param line the line input from the input file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the structure that encapsulates the meal data for this session"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static void parse(MealList meals, String line) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] splitLine \u003d line.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String taskType \u003d splitLine[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String status \u003d splitLine[1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String description \u003d splitLine[2];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] nutritionalValue \u003d splitLine[3].split(\"\\\\|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Meal newMeal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (taskType.equals(\"B\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Breakfast(description, nutritionalValue);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                newMeal.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            LoadMealUtil.load(meals, newMeal);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"L\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Lunch(description, nutritionalValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                newMeal.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            LoadMealUtil.load(meals, newMeal);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Dinner(description, nutritionalValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                newMeal.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            LoadMealUtil.load(meals, newMeal);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"S\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal \u003d new Item(description, nutritionalValue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.addStoredItem(newMeal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (taskType.equals(\"G\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.addGoal(new Goal(description, nutritionalValue[0], nutritionalValue), true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void parseTransactions(TransactionList transactionList, String line, User user) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String[] splitLine \u003d line.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String transactionType \u003d splitLine[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal transactionAmount \u003d new BigDecimal(splitLine[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String transactionDate \u003d splitLine[2];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Transaction newTransaction;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transactionType.equals(\"PAY\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            newTransaction \u003d new Payment(transactionAmount, transactionDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            user.updateAccountBalance(newTransaction);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            LoadTransactionUtil.load(transactionList, newTransaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else if (transactionType.equals(\"DEP\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            newTransaction \u003d new Deposit(transactionAmount, transactionDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            user.updateAccountBalance(newTransaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            LoadTransactionUtil.load(transactionList, newTransaction);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static User parseUser(String line) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] splitLine \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String name \u003d splitLine[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int age \u003d Integer.parseInt(splitLine[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int height \u003d Integer.parseInt(splitLine[2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int activityLevel \u003d Integer.parseInt(splitLine[3]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean loseWeight \u003d Boolean.parseBoolean(splitLine[4]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String sex \u003d splitLine[5];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal accountBalance \u003d new BigDecimal(splitLine[6]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (sex.equals(\"M\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new User(name, age, height, Gender.MALE, activityLevel, loseWeight, accountBalance);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new User(name, age, height, Gender.FEMALE, activityLevel, loseWeight, accountBalance);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 50,
      "GaryStu": 34
    }
  },
  {
    "path": "src/main/java/duke/storage/LoadMealUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class in in charge of loading a meal item into a MealList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class LoadMealUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static void load(MealList meals, Meal newMeal) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d meals.getMealTracker();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (newMeal.getIsDone()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            newMeal.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String mealDate \u003d newMeal.getDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (!mealTracker.containsKey(mealDate)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(mealDate, new ArrayList\u003cMeal\u003e());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.get(mealDate).add(newMeal);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.get(mealDate).add(newMeal);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 27
    }
  },
  {
    "path": "src/main/java/duke/storage/LoadTransactionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.Transaction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class LoadTransactionUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void load(TransactionList transactions, Transaction newTransaction) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cTransaction\u003e\u003e transactionTracker \u003d transactions.getTransactionTracker();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String transactionDate \u003d newTransaction.getDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!transactionTracker.containsKey(transactionDate)) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.put(transactionDate, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.get(transactionDate).add(newTransaction);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.get(transactionDate).add(newTransaction);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 21
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.FilePaths.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Storage is a public class, a storage class encapsulates the filePath to read from disk and write to disk."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Load loader \u003d new Load();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Write writer \u003d new Write();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will load all info required to initialize a MealList object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void load(MealList meals) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadFile(meals, DATA_FILE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadFile(meals, DEFAULTS_FILE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadFile(meals, GOAL_FILE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will load user info from user.txt."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public User loadUser() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return loader.loadUser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will load all the words to be autocorrected to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadWord(Autocorrect autocorrect) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadAutoCorrect(autocorrect);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadHelp(ArrayList\u003cString\u003e lines, String specifiedHelp) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadHelp(lines, specifiedHelp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void loadTransactions(TransactionList transactions, User user) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        loader.loadTransactions(transactions, user);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will update the input/output file from the current arraylist of meals."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealData the structure that will store the tasks from the input file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    //TODO: maybe we can put the errors in the ui file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateFile(MealList mealData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeFile(mealData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will write data from a MealList object to the defaultitems save file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateDefaults(MealList mealData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeDefaults(mealData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will write data from a MealList object to the goals save file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateGoal(MealList mealData) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeGoal(mealData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will store the user information into a file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the user class that contains all personal information to be stored."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void saveUser(User user) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeUser(user);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void updateTransaction(TransactionList transactionList) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        writer.writeTransaction(transactionList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 36,
      "HashirZahir": 1,
      "GaryStu": 10,
      "koushireo": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/duke/storage/Write.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.Tuple;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static duke.commons.FilePaths.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This object is in charge of all writing to save operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Write {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private BufferedWriter bufferedWriter \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will update the input/output file from the current arraylist of meals."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealData the structure that will store the tasks from the input file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    //TODO: maybe we can put the errors in the ui file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeFile(MealList mealData) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e meals \u003d mealData.getMealTracker();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(DATA_FILE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i : meals.keySet()) { //write process for stored food entries"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ArrayList\u003cMeal\u003e mealsInDay \u003d meals.get(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                for (int j \u003d 0; j \u003c meals.get(i).size(); j++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    Meal currentMeal \u003d mealsInDay.get(j);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String status \u003d \"0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (currentMeal.getIsDone()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        status \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    String toWrite \u003d currentMeal.getType() + \"|\" + status + \"|\" + currentMeal.getDescription()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \"|date|\" + currentMeal.getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    HashMap\u003cString, Integer\u003e nutritionData \u003d currentMeal.getNutritionalValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    if (nutritionData.size() !\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite +\u003d \"|\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        for (String k : nutritionData.keySet()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            toWrite +\u003d k + \"|\" + nutritionData.get(k) + \"|\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite \u003d toWrite.substring(0, toWrite.length() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeDefaults(MealList mealData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e storedItems \u003d mealData.getStoredList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(DEFAULTS_FILE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i : storedItems.keySet()) { //write process for stored default food values"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                toWrite +\u003d \"S|0|\" + i;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                HashMap\u003cString, Integer\u003e nutritionData \u003d storedItems.get(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (nutritionData.size() !\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    toWrite +\u003d \"|\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    for (String k : nutritionData.keySet()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        toWrite +\u003d k + \"|\" + nutritionData.get(k) + \"|\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    toWrite \u003d toWrite.substring(0, toWrite.length() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeGoal(MealList mealData) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(GOAL_FILE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Goal goal \u003d mealData.getGoal();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String toWrite \u003d \"G|0|\" + goal.getEndDate() + \"|\" + goal.getStartDate();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e nutritionData \u003d goal.getNutritionalValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (nutritionData.size() !\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                for (String k : nutritionData.keySet()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    toWrite +\u003d k + \"|\" + nutritionData.get(k) + \"|\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                toWrite \u003d toWrite.substring(0, toWrite.length() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function that will store the user information into a file."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the user class that contains all personal information to be stored."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeUser(User user) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWrite \u003d user.getName() + \"|\" + user.getAge() + \"|\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + user.getHeight() + \"|\" + user.getActivityLevel() + \"|\" + user.getLoseWeight() + \"|\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getSex() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            toWrite +\u003d \"M\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            toWrite +\u003d \"F\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        toWrite +\u003d \"|\" + user.getAccountBalance();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cTuple\u003e allWeight \u003d user.getAllWeight();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 0; i \u003c user.getAllWeight().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            toWrite +\u003d \"\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String date \u003d allWeight.get(i).date;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int weight \u003d allWeight.get(i).weight;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            toWrite +\u003d date + \"|\" + weight;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(USER_FILE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void writeTransaction(TransactionList transactionList) throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cTransaction\u003e\u003e transactions \u003d transactionList.getTransactionTracker();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedWriter \u003d new BufferedWriter(new FileWriter(TRANSACTION_FILE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            for (String i : transactions.keySet()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ArrayList\u003cTransaction\u003e transactionInADay \u003d transactions.get(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                for (int j \u003d 0; j \u003c transactions.get(i).size(); j++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    Transaction currentTransaction \u003d transactionInADay.get(j);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    String toWrite \u003d currentTransaction.getType() + \"|\" + currentTransaction.getTransactionAmount()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                            + \"|\" + currentTransaction.getDate() + \"\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    bufferedWriter.write(toWrite);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(\"Error writing to file\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 148,
      "GaryStu": 27
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Goal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String padding \u003d \"     \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String boundary \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Hello! I\u0027m DIYeats\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void showPadding() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(padding);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"     \" + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showList(ArrayList\u003cMeal\u003e meals)  {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(\"Here are the meals in your list: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d meals.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Meal currentMeal \u003d meals.get(i - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            showPadding();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(i + \". \" + currentMeal);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showDone(Meal currentMeal, ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + \"Nice! I\u0027ve marked these tasks as done:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showAdded(Meal currentMeal, ArrayList\u003cMeal\u003e meals, User user, String dateStr) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve added this meal:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showCaloriesLeft(meals, user, dateStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showUpdated(Meal newMeal, ArrayList\u003cMeal\u003e meals, User user, String dateStr) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve updated this old meal with this: \" + newMeal);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showCaloriesLeft(meals, user, dateStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Display remaining calories for specified date based on current meals plan."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals List of meals on the date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user User information which we want to query."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param dateStr Date in which remaining calories are computed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showCaloriesLeft(ArrayList\u003cMeal\u003e meals, User user, String dateStr) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int totalConsume \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (meals.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                totalConsume +\u003d meals.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Now you have \" + (user.getDailyCalorie()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                - totalConsume) + \" calories left on \" + dateStr);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showAddedItem(Meal currentMeal) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve added the default values for this meal:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showDeleted(Meal currentMeal, ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Noted. I\u0027ve removed this meal:\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + currentMeal);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Now you have \" + meals.size()  + \" meals in the list.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showCleared(String startDateStr, String endDateStr) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(padding + \"Noted. Meals from \" + startDateStr + \" to \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                + endDateStr + \" have been cleared\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand(Scanner in) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + message);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(padding + \"Failed to load file.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showLoadinngTransactionError() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + \"Failed to load transaction file.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserLoadingError() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Unable to load user file.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeNew() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Welcome!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"I see that you\u0027re new.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Please enter your particulars to get started!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeBack(User user) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Welcome back, \"  + user.getName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserSetupDone(User user) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"Thanks, \" + user.getName() + \"!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + \"We are done setting up!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showCalorie(User user) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"This is your daily calorie limit: \" + user.getDailyCalorie());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showRemainingCalorie(ArrayList\u003cMeal\u003e mealsOfDay, User user, int remainingCalories) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int limit \u003d user.getDailyCalorie();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int consumeTotal \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        for (int i \u003d 0; i \u003c mealsOfDay.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (mealsOfDay.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                consumeTotal +\u003d mealsOfDay.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (remainingCalories \u003d\u003d -1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(padding + \"You have this many calories left today: \" + (limit - consumeTotal));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(padding + \"You have this many calories left today: \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + (remainingCalories - consumeTotal));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showHelp(ArrayList\u003cString\u003e helpLines) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        helpLines.forEach(line -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(padding + line);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showAddedGoal(Goal goal) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve set the goal to be met:\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(padding + goal);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showHistory(ArrayList\u003cString\u003e commandHistoryList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (commandHistoryList.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            System.out.println(padding + \"No commands in history\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            System.out.println(padding + \"History of Commands you have typed: \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            for (int idx \u003d 0;idx \u003c commandHistoryList.size();idx++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                System.out.println(padding + padding + (idx + 1) + \". \" + commandHistoryList.get(idx));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showTransactionAdded(Transaction transaction, BigDecimal accountBalance) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + \"Got it. I\u0027ve added this transaction:\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + transaction);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(padding + \"Your account balance is: \" + accountBalance + \" SGD\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 29,
      "HashirZahir": 33,
      "GaryStu": 29,
      "koushireo": 32,
      "-": 57
    }
  },
  {
    "path": "src/test/java/duke/functions/FunctionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.functions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.model.MealList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import duke.model.TransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class FunctionTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList tasks \u003d new MealList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.load(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user \u003d storage.loadUser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void addCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean exceptionThrown1 \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean exceptionThrown2 \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Parser parser \u003d new Parser(autocorrect);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"add burger /calorie 100 /sodium 100 /fats 100\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            c.execute(tasks, ui, storage, user, in, transactionList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"breakfast burger\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            c.execute(tasks, ui, storage, user, in, transactionList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"breakfast burger /calorie 100\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            c.execute(tasks, ui, storage, user, in, transactionList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exceptionThrown1 \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"breakfast taco\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            c.execute(tasks, ui, storage, user, in, transactionList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exceptionThrown2 \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertFalse(exceptionThrown1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertTrue(exceptionThrown2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 72,
      "GaryStu": 7
    }
  },
  {
    "path": "src/test/java/duke/logic/autocorrect/AutocorrectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class AutocorrectTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void autocorrectTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"calorei\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"calorie\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"lunxh\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"lunch\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"cacium\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"calcium\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "koushireo": 25
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.logic.commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Parser parser \u003d new Parser(autocorrect);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"breakfast burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"breakfast burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"breakfast burger /calories 100 /date 1/1/2019\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"lunch burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"lunch burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"lunch burger /calories 100 /date 1/1/2019\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"dinner burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"dinner burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"dinner burger /calories 100 /date 1/1/2019\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"add burger /calorie 100 /sodium 100 /fats 100\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddItemCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"help breakfast\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(\"Something is wrong with the parser\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 28,
      "GaryStu": 13
    }
  },
  {
    "path": "src/test/java/duke/model/user/UserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package duke.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private User user \u003d new User(\"Foo Chi Hen\", 22, 100, Gender.MALE, 0, true, new BigDecimal(\"3000\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void user() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user.setWeight(100);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getWeight(), 100);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getName(), \"Foo Chi Hen\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getHeight(), 100);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getActivityLevel(), 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getLoseWeight(), true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getAge(), 22);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertTrue(user.getAllWeight() instanceof ArrayList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "GaryStu": 2,
      "koushireo": 20
    }
  }
]
