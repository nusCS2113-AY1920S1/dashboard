[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.gradle.build-scan\u0027 version \u00272.4.1\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \"8.23\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "group \u0027diyeats\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "version \u00271.4\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    archiveBaseName \u003d \"DIYeats\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    archiveVersion \u003d \"1.4\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            srcDirs \u003d [\u0027./src\u0027]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        csv.enabled true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/test/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    mainClassName \u003d \"diyeats.Main\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 8,
      "Fractalisk": 6,
      "GaryStu": 22,
      "-": 36
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "rootProject.name \u003d \u0027diyeats\u0027"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1
    }
  },
  {
    "path": "src/main/java/diyeats/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.UserSetup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.TransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Main is a public class that contains the main function to drive the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It encapsulates a Storage object, a MealList object, and an Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList meals \u003d new MealList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private TransactionList transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private UserSetup setup;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Wallet wallet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * This is a constructor of DIYeats to start the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        while (!storage.isMealDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                storage.loadMealInfo(meals);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user \u003d storage.loadUser(); //load user info"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.loadTransactions(wallet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showLoadingTransactionError();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *  Run is a function that generate the flow of DIYeats program from beginning until the end."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.start();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        while (!setup.getIsDone()) { //setup user profile if it\u0027s empty"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String info \u003d in.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            setup.initialise(info);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d setup.getUser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeUser(user);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Parser userParser \u003d new Parser(autocorrect);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                String fullCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Command c \u003d userParser.parse(fullCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (c.isFail()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    c.failure();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    c.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    while (!c.isDone()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        String word \u003d in.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        c.setResponseStr(word);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        c.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the main function."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 43,
      "HashirZahir": 4,
      "GaryStu": 36,
      "koushireo": 29,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/commons/constants/CommandSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class defines all the command keywords that will be used in the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public final class CommandSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_BREAKFAST_COMMAND \u003d \"breakfast\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_LUNCH_COMMAND \u003d \"lunch\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DINNER_COMMAND \u003d \"dinner\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_ADD_DEFAULT_COMMAND \u003d \"default\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DELETE_DEFAULT_COMMAND \u003d \"deldefault\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_EDIT_COMMAND \u003d \"edit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_EXIT_COMMAND \u003d \"exit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public static final String PARSER_UPDATE_COMMAND \u003d \"update\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_ADD_GOAL_COMMAND \u003d \"setgoal\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_HISTORY_COMMAND \u003d \"history\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_SUGGEST_MEAL_COMMAND \u003d \"suggestmeal\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DEPOSIT_COMMAND \u003d \"deposit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_PAYMENT_COMMAND \u003d \"pay\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_STATS_COMMAND \u003d \"stats\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public static final String PARSER_CGRAPH_COMMAND \u003d \"cgraph\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_SUGGEST_EXERCISE_COMMAND \u003d \"suggestexercise\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_ADD_EXERCISE_COMMAND \u003d \"addexercise\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String PARSER_DELETE_EXERCISE_COMMAND \u003d \"delexercise\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static final String PARSER_LIST_TRANSACTION_COMMAND \u003d \"listtransaction\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static final String PARSER_DELETE_TRANSACTION_COMMAND \u003d \"deletetransaction\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 29,
      "GaryStu": 2,
      "koushireo": 2
    }
  },
  {
    "path": "src/main/java/diyeats/commons/constants/DateConstants.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public final class DateConstants {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final DateTimeFormatter LOCAL_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 7
    }
  },
  {
    "path": "src/main/java/diyeats/commons/constants/GoalCommandSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.constants;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public final class GoalCommandSyntax {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String START_DATE_ARG_STR \u003d \"start\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String END_DATE_ARG_STR \u003d \"end\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String WEIGHT_ARG_STR \u003d \"weight\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public static final String ACTIVITY_ARG_STR \u003d \"activity\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 8
    }
  },
  {
    "path": "src/main/java/diyeats/commons/datatypes/Pair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.datatypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Pair {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Pair(String key, int value) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Integer getValue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 19
    }
  },
  {
    "path": "src/main/java/diyeats/commons/datatypes/Tuple.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.datatypes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * This is a class that will store weight at a specific date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Tuple {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a class that will store weight at a specific date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param date date of the input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight weight during the input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Tuple(String date, double weight) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 4,
      "koushireo": 17
    }
  },
  {
    "path": "src/main/java/diyeats/commons/exceptions/ProgramException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * ProgramException is an exception class that extends from the class Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ProgramException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * This is the constructor of ProgramException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param messageStr this is the error message generated from a ProgramException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ProgramException(String messageStr) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        super(messageStr);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "HashirZahir": 1,
      "GaryStu": 10
    }
  },
  {
    "path": "src/main/java/diyeats/commons/file/FilePathNames.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public enum FilePathNames {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_USER_MEALS_FILE(\"main/java/diyeats/Data/meals.json\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_DEFAULT_MEAL_FILE(\"main/java/diyeats/Data/defaultValues.json\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_GOAL_FILE(\"main/java/diyeats/Data/goal.json\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_USER_FILE(\"main/java/diyeats/Data/user.json\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_AUTOCORRECT_FILE(\"main/java/diyeats/Data/word.txt\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_TRANSACTION_FILE(\"main/java/diyeats/Data/transaction.json\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_MASTER_HELP_FILE(\"main/java/diyeats/commons/help\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FILE_PATH_EXERCISES_FILE(\"main/java/diyeats/Data/exercises.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    FilePathNames(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (System.getProperty(\"file.separator\").equals(\"\\\\\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return \"src/\" + filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "HashirZahir": 25
    }
  },
  {
    "path": "src/main/java/diyeats/commons/file/FilePaths.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * This class file defines all the resource config file path helper functions that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * will be used in the storage component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class FilePaths {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static HashMap\u003cFilePathNames, String\u003e filePathsConfigMap \u003d new HashMap\u003cFilePathNames, String\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public FilePaths() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        setFilePathsConfigMap();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Reads the master file config and loads the location of all other config files into hashmap."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Also ensures all path names are stored in cross-system compatible file directories."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static void setFilePathsConfigMap() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        EnumSet.allOf(FilePathNames.class).forEach(filePathName -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                filePathsConfigMap.put(filePathName, filePathName.toString()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (FilePathNames pathName : filePathsConfigMap.keySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String defaultPathStr \u003d filePathsConfigMap.get(pathName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String crossCompatiblePathStr \u003d FileUtil.getSystemFilePathStr(defaultPathStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            filePathsConfigMap.replace(pathName, crossCompatiblePathStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public String getFilePathStr(FilePathNames filePathName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return filePathsConfigMap.get(filePathName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void setTestPathConfigMap() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (FilePathNames pathName : filePathsConfigMap.keySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String defaultPathStr \u003d filePathsConfigMap.get(pathName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String crossCompatiblePathStr \u003d FileUtil.getSystemFilePathStr(defaultPathStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            filePathsConfigMap.replace(pathName, crossCompatiblePathStr.replace(\"main\", \"test\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "HashirZahir": 42
    }
  },
  {
    "path": "src/main/java/diyeats/commons/file/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Class in charge of common file operations such as reading and writing from jar resources and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * user system files. Handles file exceptions and throws ProgramException when relevant."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static final String systemFileSep \u003d \"/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Reads file from jar resource or user filesystem."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param fileStr File location string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param useResourceAsBackup Allows file to be loaded from jar resource if"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     *                            not found in user\u0027s local filesystem."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return BufferedReader instance of the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws ProgramException If file cannot be read as a resource or as a file on local filesystem."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static BufferedReader readFile(String fileStr, boolean useResourceAsBackup) throws ProgramException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        File file \u003d new File(fileStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return readUserFile(fileStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (useResourceAsBackup) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return readResourceFile(fileStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                createMissingFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                // TODO: Better Exception handling for non existing file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new BufferedReader(new StringReader(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Reads config file loaded from user file system rather than inside the jar file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param fileStr File location of user config file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return BufferedReader object with contents of resource."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws ProgramException If unable to find file in user\u0027s file system or incorrect"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     *                       file directory syntax in filepaths config file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static BufferedReader readResourceFile(String fileStr) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            InputStream is \u003d FileUtil.class.getClassLoader().getResourceAsStream(fileStr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // TODO: Better Exception handling for invalid resource file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new BufferedReader(new StringReader(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Reads config file stored in jar package of this application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param fileStr File location of config file in jar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return BufferedReader object with contents of resource"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws ProgramException If unable to find file in jar package."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static BufferedReader readUserFile(String fileStr) throws ProgramException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        File file \u003d new File(fileStr);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return getReaderFromFile(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static BufferedReader getReaderFromFile(File file) throws ProgramException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        BufferedReader bufferedReader;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            createMissingFile(file);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new ProgramException(\"File \" + file + \" does not exist. Failed to load file.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return bufferedReader;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Create missing parent folders and copy missing file to host system."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param file File that is missing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws ProgramException if application has difficulty creating new file in host system."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static void createMissingFile(File file) throws ProgramException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new ProgramException(\"Create missing file error : \" + e.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Writes text to file given a newline separated string."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param textStr Input newline separated string to be written to file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param fileStr File to be written to."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws ProgramException If unable to write to file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static void writeFile(String textStr, String fileStr) throws ProgramException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            File file \u003d new File(fileStr);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                createMissingFile(file);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // Split large strings into smaller strings for memory efficiency"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            for (String lineStr : textStr.split(\"\\n\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                bufferedWriter.write(lineStr);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            throw new ProgramException(\"Unable to write to file: \" + fileStr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Return operating system dependent file path."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param pathStr Input file path."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return File path string that is compatible with operating system."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static String getSystemFilePathStr(String pathStr) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return pathStr.replace(\"/\", systemFileSep);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Helper function to concatenate 2 file paths."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param parentPathStr Parent directory of path to concatenate."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param childPathStr Child directory of path to concatenate."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Concatenated String of parent and child paths."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static String concatPaths(String parentPathStr, String childPathStr) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return parentPathStr + systemFileSep + childPathStr;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 8,
      "HashirZahir": 142
    }
  },
  {
    "path": "src/main/java/diyeats/commons/file/LocalDateAdapter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.commons.file;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class is used to extend typeAdapter in gson to parse LocalDate file types."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public final class LocalDateAdapter extends TypeAdapter\u003cLocalDate\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void write(final JsonWriter jsonWriter, final LocalDate localDate) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        jsonWriter.value(localDate.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public LocalDate read(final JsonReader jsonReader) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return LocalDate.parse(jsonReader.nextString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26
    }
  },
  {
    "path": "src/main/java/diyeats/logic/autocorrect/Autocorrect.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * This is a class that will help to correct minor typo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class Autocorrect {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private HashMap\u003cString,int[]\u003e mapper \u003d new HashMap();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private ArrayList\u003cString\u003e words \u003d new ArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int[] counter \u003d new int[26];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int nonAlphabet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public Autocorrect() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will store the pre defined correct words into the object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param word pre defined correct words to be stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void load(String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int[] counting \u003d new int[26];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i +\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counting[i] \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counting[word.charAt(i) - 97] +\u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        mapper.put(word, counting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        words.add(word);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String runOnCommand(String command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setWord(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return getWord();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String runOnArgument(String userInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInput.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String correctedInput \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String[] splitString1 \u003d userInput.split(\"/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (splitString1.length \u003e 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                for (String data : splitString1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    if (data.trim().length() !\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        String[] partitionedData \u003d data.split(\" \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        if (partitionedData[0].matches(\"[a-zA-Z]+\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                                || partitionedData[0].matches(\"/[a-zA-Z]+\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            setWord(partitionedData[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            String nutrient \u003d getWord();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            userInput \u003d userInput.replace(\"/\" + partitionedData[0], \"/\" + nutrient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                return userInput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will store the user input word into the object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param word word to be stored."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWord(String word) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.nonAlphabet \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i +\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            counter[i] \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length(); i +\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if ((int)word.charAt(i) - 97 \u003e\u003d 0 \u0026\u0026 (int)word.charAt(i) - 97 \u003c 26) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                counter[(int) word.charAt(i) - 97] +\u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                this.nonAlphabet +\u003d 2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a function that will compare the word in the object against."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * pre defined correct words and change it to those words"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int currentDistance \u003d 5;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int distance \u003d 0 + this.nonAlphabet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String likelyWord \u003d word;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c words.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (int j \u003d 0; j \u003c 26; j +\u003d 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                distance +\u003d Math.abs(counter[j] - mapper.get(words.get(i))[j]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (distance \u003c 4) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (distance \u003c currentDistance) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    likelyWord \u003d words.get(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    currentDistance \u003d distance;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            distance \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.word \u003d likelyWord;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getWord() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.word;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 114
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddCommand object encapsulates the current meal that is to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for AddCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * the meal specified as the instance field meal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddCommand(Meal meal) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes add command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.addMeals(this.meal);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ArrayList\u003cMeal\u003e mealData \u003d meals.getMealTracker().get(this.meal.getDate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showAdded(this.meal, mealData, user, this.meal.getDate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeFile(meals);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 25,
      "HashirZahir": 1,
      "GaryStu": 12,
      "koushireo": 14,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/AddDefaultValueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddDefaultValueCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddDefaultValueCommand object encapsulates the current meal that is to be added as a defaultvalue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddDefaultValueCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for AddDefaultValueCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddDefaultValueCommand(Meal meal) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.meal \u003d meal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // This constructor is called if there are issues parsing user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddDefaultValueCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Execute the AddDefaultValueCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.addDefaultValues(this.meal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showAddedItem(this.meal);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeDefaults(meals);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 50
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/AddExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddExerciseCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddExerciseCommand object encapsulates exerciseNameStr and exerciseValueInt, which is added to ExerciseList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class adds a suggestable exercise, not an exercise to a date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String exerciseNameStr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int exerciseValueInt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for addExerciseCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param exerciseNameStr name of the exercise to be added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param exerciseValueInt MET value of exercise to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddExerciseCommand(String exerciseNameStr, int exerciseValueInt) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.exerciseNameStr \u003d exerciseNameStr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.exerciseValueInt \u003d exerciseValueInt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // This constructor is called if there are issues parsing user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddExerciseCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes AddExerciseCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ExerciseList exerciseList \u003d meals.getExerciseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(this.exerciseNameStr, this.exerciseValueInt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.setExerciseList(exerciseList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeExercises(meals);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showMessage(\"The add exercise command is successful!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 57
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/AddGoalCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * AddGoalCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An AddGoalCommand object encapsulates the goal object that is to be added to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * average kg loss per day should NOT be more than 0.13607787283kg (\u003e0.3 pounds)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * average calorie loss per day should NOT exceed 40% base calorie intake,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * balanced at around 20% (1kg \u003d 7700cal \u003d 7.7kcal)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddGoalCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for addGoalCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param argumentsMap argumentsMap for instantiating a goal object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddGoalCommand(HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        goal \u003d new Goal(argumentsMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // This constructor is called if there are issues parsing user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddGoalCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes AddGoalCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user.setGoal(goal);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"The set goal Command is successful!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeGoal(user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            stage++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 56
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/AddTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * AddTransactionCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * An AddTransactionCommand is a command that stores the transaction information(cost and date)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * within a Wallet object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class AddTransactionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Transaction transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for AddTransactionCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param transaction the transaction object to be stored within wallet"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for AddTransactionCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param flag flag that indicates whether the parser fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param messageStr the error message concerned."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Executes the AddTransactionCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transaction.getType().equals(\"PAY\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (!wallet.getAccount().isSufficientBalance(this.transaction.getTransactionAmount())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showInsufficientBalance(this.transaction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            wallet.getTransactions().addTransaction(this.transaction);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            wallet.updateAccountBalance(this.transaction);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            storage.writeTransaction(wallet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showTransactionAdded(this.transaction, wallet.getAccountBalance());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 7,
      "GaryStu": 52
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/CGraphCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.GraphUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * CGraphCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * It calculates the data desired by user and visualised it on Command Line."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class CGraphCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private GraphUi graphUi \u003d new GraphUi();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for CGraphCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param month month of the graph desired"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param year year of the graph desired"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param type type of the data to be graphed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public CGraphCommand(int month, int year, String type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public CGraphCommand(boolean flag, String message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ArrayList\u003cInteger\u003e intHolder \u003d new ArrayList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        double highest \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        date \u003d date.withMonth(month);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        //start of month :"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        LocalDate firstDay \u003d date.withDayOfMonth(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        LocalDate lastDay \u003d date.with(TemporalAdjusters.lastDayOfMonth());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        lastDay.plusDays(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String[][] graph \u003d new String[21][62];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c 21; i +\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (int j \u003d 0; j \u003c 62; j +\u003d 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                graph[i][j] \u003d \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (this.type.equals(\"weight\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            HashMap\u003cLocalDate, Double\u003e weight \u003d user.getAllWeight();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (LocalDate dateItr \u003d firstDay; dateItr.isBefore(lastDay); dateItr \u003d dateItr.plusDays(1)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (weight.containsKey(dateItr)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    intHolder.add((int)Math.round(weight.get(dateItr)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    if (highest \u003c weight.get(dateItr)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        highest \u003d weight.get(dateItr);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    intHolder.add(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (this.type.equals(\"wallet\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            HashMap\u003cLocalDate, ArrayList\u003cTransaction\u003e\u003e transactions \u003d wallet.getTransactions().getTransactionTracker();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (LocalDate dateItr \u003d firstDay; dateItr.isBefore(lastDay); dateItr \u003d dateItr.plusDays(1)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                String currentDate \u003d dateItr.format(dateFormat);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                int totalSpent \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (transactions.containsKey(dateItr)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ArrayList\u003cTransaction\u003e transactionOnTheDay \u003d transactions.get(dateItr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    for (int j \u003d 0; j \u003c transactionOnTheDay.size(); j +\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        if (transactionOnTheDay.get(j).getType().equals(\"PAY\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            totalSpent +\u003d transactionOnTheDay.get(j).getTransactionAmount().intValue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    if (highest \u003c totalSpent) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        highest \u003d totalSpent;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                intHolder.add(totalSpent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e meal \u003d meals.getMealTracker();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (LocalDate dateItr \u003d firstDay; dateItr.isBefore(lastDay); dateItr \u003d dateItr.plusDays(1)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                int totalConsumed \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (meal.containsKey(dateItr)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ArrayList\u003cMeal\u003e mealOnTheDay \u003d meal.get(dateItr);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    for (Meal value : mealOnTheDay) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        if (value.getNutritionalValue().containsKey(this.type)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            totalConsumed +\u003d value.getNutritionalValue().get(this.type);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (highest \u003c totalConsumed) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    highest \u003d totalConsumed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                intHolder.add(totalConsumed);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int pos;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c intHolder.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            pos \u003d (int)(((float)intHolder.get(i) / (float)highest) * 20);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            graph[20 - pos][i * 2] \u003d \"*\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c intHolder.size() - 1; i +\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            pos \u003d (int)(((float)((intHolder.get(i)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    + intHolder.get(i + 1)) / 2) / (float)highest) * 20);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            graph[20 - pos][i * 2 + 1] \u003d \"*\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        graphUi.show(graph, month, type);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 10,
      "koushireo": 116
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * ClearCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A ClearCommand object encapsulates the 2 dates between which all meal data will be cleared."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    LocalDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    LocalDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Constructor for ClearCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param startDate the start of the time period to be cleared, inclusive."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param endDate the end of the time period to be cleared, inclusive."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public ClearCommand(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // This constructor called if there are issues parsing user input as dates."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public ClearCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Executes the ClearCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (LocalDate date \u003d startDate; date.isBefore(endDate); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            meals.deleteAllMealsOnDate(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showCleared(dateFormat.format(startDate), dateFormat.format(endDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            storage.writeFile(meals);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 7,
      "HashirZahir": 50
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Command is the abstract base class for all the command objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * which allow the child class to specify which command (e.g. add, delete, etc) to use."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected DateTimeFormatter dateFormat \u003d LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    protected String responseStr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    protected boolean isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    protected boolean isFail \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    protected String errorStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected int stage \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This class is an abstract class that will change according to the inheritor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException when there is an error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public abstract void execute(MealList meals, Storage storage, User user, Wallet wallet) throws ProgramException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void setResponseStr(String responseStr) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.responseStr \u003d responseStr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // Called when command parsing fails"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        // Support multi-line error messages with padding"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String[] errorStrList \u003d this.errorStr.split(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (String errorStr : errorStrList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(errorStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean isFail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.isFail;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 25,
      "HashirZahir": 10,
      "GaryStu": 11,
      "koushireo": 18
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * DeleteCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A DeleteCommand object encapsulates the index of meal and date of the meal that is to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private LocalDate deleteDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param index the index of meal on the date to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param deleteDate Date of meal to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(int index, LocalDate deleteDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.deleteDate \u003d deleteDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param index the index of meal to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Executes the DeleteCommand."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d meals.getMealsList(deleteDate).size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String errorMsg \u003d \"Index provided out of bounds for list of meals on the indicated date. \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (meals.getMealsList(deleteDate).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                errorMsg +\u003d \"No meals on \" + deleteDate + \" to delete\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                errorMsg +\u003d \"Valid index is from 1 to \" + meals.getMealsList(deleteDate).size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(errorMsg);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            Meal currentMeal \u003d meals.delete(deleteDate, index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showDeleted(currentMeal, meals.getMealsList(deleteDate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                storage.writeFile(meals);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 10,
      "HashirZahir": 64,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/DeleteDefaultValueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * DeleteDefaultValueCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An DeleteDefaultValueCommand object encapsulates the keyword to be deleted, as well as a list of items with similar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * name to the provided keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DeleteDefaultValueCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String keywordStr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /* Marker for instant delete without proceeding to second stage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "       Occurs when exact match exists. Or there is only 1 similar entry*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private boolean isInstantDelete \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ArrayList\u003cString\u003e deleteCandidateKeys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for DeleteDefaultValueCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param keywordStr the keyword of meal to be deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteDefaultValueCommand(String keywordStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.keywordStr \u003d keywordStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // This constructor is called if there are issues parsing user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteDefaultValueCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the DeleteDefaultValueCommand. Has 2 stages."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Checks for exact matches and deletes. Otherwise shows a list of similar items."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                execute_stage_0(meals, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                stage++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Checks user input for index. Deletes item indicated by index on previously shown list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                execute_stage_1(meals, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Exits execute loop if command enters invalid state"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * First stage of execute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void execute_stage_0(MealList meals, Storage storage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultValues \u003d meals.getDefaultValues();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (defaultValues.get(keywordStr) !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isInstantDelete \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            deleteCandidateKeys.add(keywordStr);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String itr : defaultValues.keySet()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (itr.toLowerCase().contains(keywordStr.toLowerCase())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    deleteCandidateKeys.add(itr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (isInstantDelete || deleteCandidateKeys.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int lastIdx \u003d deleteCandidateKeys.size() - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Success! \" + deleteCandidateKeys.get(lastIdx)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \" has been deleted from the list of default values.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.getDefaultValues().remove(deleteCandidateKeys.get(lastIdx));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                storage.writeFile(meals);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (deleteCandidateKeys.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"It appears there are no meals associated with the keyword provided.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showDeleteCandidateKeys(deleteCandidateKeys);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Input 0 to cancel selection.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Second stage of execute."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void execute_stage_1(MealList meals, Storage storage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int deleteIdx;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            deleteIdx \u003d Integer.parseInt(this.responseStr);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Could not parse \" + responseStr + \" as a number. Please input an integer.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (deleteIdx \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"The delete default command has been canceled.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (deleteIdx \u003c 0 || deleteIdx \u003e deleteCandidateKeys.size()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(responseStr + \" is out of bounds. Please input a valid index.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showMessage(\"Success! \" + deleteCandidateKeys.get(deleteIdx - 1)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + \" has been deleted from the list of default values.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.getDefaultValues().remove(deleteCandidateKeys.get(deleteIdx - 1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeFile(meals);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 145
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/DeleteExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * DeleteDefaultValueCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * An DeleteDefaultValueCommand object encapsulates the keyword to be deleted, as well as a list of items with similar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * name to the provided keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DeleteExerciseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String keywordStr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /* Marker for instant delete without proceeding to second stage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "       Occurs when exact match exists. Or there is only 1 similar entry*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private boolean isInstantDelete \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ArrayList\u003cString\u003e deleteCandidateKeys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for DeleteExerciseCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param keywordStr the keyword of exercise to be deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteExerciseCommand(String keywordStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.keywordStr \u003d keywordStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // This constructor is called if there are issues parsing user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteExerciseCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the DeleteExerciseCommand. Has 2 stages."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Checks for exact matches and deletes. Otherwise shows a list of similar items."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                execute_stage_0(meals, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                stage++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Checks user input for index. Deletes item indicated by index on previously shown list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                execute_stage_1(meals, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Exits execute loop if command enters invalid state"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * First stage of execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void execute_stage_0(MealList meals, Storage storage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, Integer\u003e storedExercises \u003d meals.getExerciseList().getStoredExercises();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Integer perfectMatchValue \u003d storedExercises.get(keywordStr);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (perfectMatchValue !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isInstantDelete \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            deleteCandidateKeys.add(keywordStr);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String itr : storedExercises.keySet()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (itr.toLowerCase().contains(keywordStr.toLowerCase())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    deleteCandidateKeys.add(itr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (isInstantDelete || deleteCandidateKeys.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int lastIdx \u003d deleteCandidateKeys.size() - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Success! \" + deleteCandidateKeys.get(lastIdx)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \" has been deleted from the list of exercises.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            meals.getExerciseList().getStoredExercises().remove(deleteCandidateKeys.get(lastIdx));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                storage.writeFile(meals);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (deleteCandidateKeys.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"It appears there are no exercises associated with the keyword provided\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showDeleteCandidateKeys(deleteCandidateKeys);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Input 0 to cancel selection\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Second stage of execute."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void execute_stage_1(MealList meals, Storage storage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int deleteIdx;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            deleteIdx \u003d Integer.parseInt(this.responseStr);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Could not parse \" + responseStr + \" as a number. Please input an integer.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (deleteIdx \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"The delete exercise command has been canceled\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (deleteIdx \u003c 0 || deleteIdx \u003e deleteCandidateKeys.size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(responseStr + \" is out of bounds. Please input a valid index.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showMessage(\"Success! \" + deleteCandidateKeys.get(deleteIdx - 1)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + \" has been deleted from the list of exercises.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.getExerciseList().getStoredExercises().remove(deleteCandidateKeys.get(deleteIdx - 1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeFile(meals);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 142
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/DeleteTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.wallet.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * DeleteTransactionCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * A DeleteTransactionCommand object encapsulates the index of transaction and date of the transaction to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class DeleteTransactionCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(DeleteTransactionCommand.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for DeleteTransactionCommand when only index is specified."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param indexStr the index of the transaction to be deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public DeleteTransactionCommand(String indexStr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.index \u003d Integer.parseInt(indexStr.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.FINE, \"index is a valid int\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse input \" + indexStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for DeleteTransactionCommand when both index and date are specified."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param indexStr the index of the transaction to be deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param dateStr Date in which the transaction is to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public DeleteTransactionCommand(String indexStr, String dateStr) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this(indexStr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!dateStr.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentDate \u003d LocalDate.parse(dateStr, dateFormat);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.FINE, \"currentDate is parsable\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.WARNING, \"the date \" + currentDate + \" is not parsable\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showMessage(\"Unable to parse input\" + dateStr + \" as a date. \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public DeleteTransactionCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Execute the DeleteTransactionCommand."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param user the object that handles all user data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet object that stores transaction information."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e wallet.getTransactions().getTransactionList(currentDate).size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"the index \" + index + \" is out of bound\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(\"Index provided out of bounds for list of transactions on \" + currentDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            Transaction deletedTransaction \u003d wallet.getTransactions().delete(currentDate, index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            BigDecimal transactionAmount \u003d deletedTransaction.getTransactionAmount();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (deletedTransaction.getType().equals(\"PAY\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                wallet.getAccount().deposit(transactionAmount);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } else if (deletedTransaction.getType().equals(\"DEP\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                wallet.getAccount().withdraw(transactionAmount);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showDeletedTransaction(deletedTransaction, wallet.getTransactions().getTransactionList(currentDate));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                storage.writeTransaction(wallet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 91
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int mealIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private HashMap\u003cString, String\u003e nutritionInfoMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private LocalDate localDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public EditCommand(int index, LocalDate localDate, HashMap\u003cString, String\u003e nutritionInfoMap) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.mealIndex \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.nutritionInfoMap \u003d nutritionInfoMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public EditCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Helper function to update existing tags of meal. Also allows changing of meal name and cost"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param oldMeal Old meal to be updated"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param newNutritionInfoMap Hashmap with updated tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return New meal object with updated information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static Meal getUpdatedMeal(Meal oldMeal, HashMap\u003cString, String\u003e newNutritionInfoMap) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String mealNameStr \u003d oldMeal.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String costStr \u003d oldMeal.getCostStr();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        HashMap\u003cString,Integer\u003e nutritionInfoMap \u003d oldMeal.getNutritionalValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (newNutritionInfoMap.containsKey(\"name\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            mealNameStr \u003d newNutritionInfoMap.get(\"name\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            newNutritionInfoMap.remove(\"name\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (newNutritionInfoMap.containsKey(\"cost\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            costStr \u003d newNutritionInfoMap.get(\"cost\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            newNutritionInfoMap.remove(\"cost\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (String keyStr : nutritionInfoMap.keySet()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (!newNutritionInfoMap.containsKey(keyStr)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                newNutritionInfoMap.put(keyStr, nutritionInfoMap.get(keyStr).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal updatedMeal \u003d new Meal(mealNameStr, oldMeal.getDate(), newNutritionInfoMap, costStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal.setMealType(oldMeal.getMealType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return updatedMeal;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Executes the EditCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (this.mealIndex \u003e\u003d meals.getMealsList(localDate).size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(\"Edit meal index is out of bounds. Edit not performed\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal oldMeal \u003d meals.getMealsList(localDate).get(mealIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal updatedMeal \u003d getUpdatedMeal(oldMeal, this.nutritionInfoMap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.getMealsList(localDate).set(mealIndex, updatedMeal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            LocalDate date \u003d updatedMeal.getDate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showUpdated(oldMeal, updatedMeal, meals.getMealsList(updatedMeal.getDate()), user, date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            storage.writeFile(meals);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 9,
      "HashirZahir": 80
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * ExitCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * isExit() is a function that will return true if called, to indicate the the program is going to exit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the function is called"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 13,
      "GaryStu": 16,
      "koushireo": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * The FindCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * It encapsulates the String to find in the current MealList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * FindCommand is a constructor that store the string to find."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param description the description of the string to find"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public FindCommand(String descriptionStr, String dateStr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this(descriptionStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (!dateStr.isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.currentDate \u003d LocalDate.parse(dateStr, dateFormat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public FindCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the FindCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e matchingMeals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMealsList(currentDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (Meal element: currentMeals) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String currentTaskString \u003d element.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (currentTaskString.contains(description)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                matchingMeals.add(element);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showMealList(matchingMeals);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 24,
      "HashirZahir": 6,
      "GaryStu": 23,
      "koushireo": 8,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * The HelpCommand is a public class that extends from the abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * It finds and shows to the UI the required help file by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String specifiedHelp \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(HelpCommand.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for HelpCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param specifiedHelp The type of help specified by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HelpCommand(String specifiedHelp) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.specifiedHelp \u003d specifiedHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HelpCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Executes the HelpCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ArrayList\u003cString\u003e helpLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            storage.loadHelp(helpLines, specifiedHelp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"there is a problem loading the help file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.FINE, \"help is loaded successfully\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showHelp(helpLines);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "GaryStu": 50
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * HistoryCommand is a public class that inherits form abstract class Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Tracks the history of all commands executed in the current session"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static ArrayList\u003cString\u003e historyCommandsList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Constructor for HistoryCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public HistoryCommand(boolean isClear) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (isClear) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            clearHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Add command to history of commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param commandStr the command to be added to the list of executed commands thus far"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void addCommand(String commandStr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (!commandStr.equals(\"history\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            historyCommandsList.add(commandStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Clears the history of the commands executed thus far."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void clearHistory() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        historyCommandsList.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Executes the HistoryCommand."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showHistory(historyCommandsList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "HashirZahir": 55
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.sort.SortMealByCalorie;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.sort.SortMealByCost;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.sort.SortMealByDefault;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * ListCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * It displays all the meal(s) in a relevant day in a list to the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private String sortBy \u003d \"default\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date The date of the meal(s) to List"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListCommand(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            currentDate \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date concerned."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param sortBy the type of sorting acceptable."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListCommand(LocalDate date, String sortBy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.sortBy \u003d sortBy;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor when ListCommand encounters error."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param flag the flag to indicate whether the parser fails."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param messageStr the error message concerned."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isFail \u003d flag;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!this.isFail) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(messageStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(\"Showing list of meals from \" + currentDate.format(dateFormat) + \" instead.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Executes the ListCommand."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals,  Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showCalorie(user);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMealsList(currentDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!meals.checkDate(currentDate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(\"There isn\u0027t any food on \" + currentDate.format(dateFormat));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        switch (sortBy) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case \"calorieAscending\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentMeals.sort(new SortMealByCalorie());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case \"calorieDescending\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentMeals.sort(new SortMealByCalorie().reversed());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case \"costAscending\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentMeals.sort(new SortMealByCost());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case \"costDescending\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentMeals.sort(new SortMealByCost().reversed());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentMeals.sort(new SortMealByDefault());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showMealList(currentMeals);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showCaloriesLeft(currentMeals, user, currentDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showExerciseOnDate(meals.getExerciseList(), currentDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 12,
      "GaryStu": 88,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/ListTransactionsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.wallet.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * ListTransactionsCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * It lists all the transaction(s) that happens on a certain date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ListTransactionsCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for ListTransactionCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListTransactionsCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for ListTransactionCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date The date of the transactions to list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListTransactionsCommand(LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            currentDate \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for ListTransactionCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param flag the flag to indicate whether the parser fails."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param messageStr the error message concerned."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListTransactionsCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isFail \u003d flag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!this.isFail) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(messageStr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(\"Showing list of meals from \" + currentDate.format(dateFormat) + \" instead.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Execute the ListTransaction command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet object that stores transaction information."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ArrayList\u003cTransaction\u003e transactions \u003d wallet.getTransactions().getTransactionList(currentDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showTransactions(transactions, currentDate, wallet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 65
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Payment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * MarkDoneCommand is a public class that inherits form abstract class Command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * A MarkDoneCommand object encapsulates the index of meal to be marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(MarkDoneCommand.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param indexStr the index of meal on the date to be marked as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param dateStr the date which meals are to be marked as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand(String indexStr, String dateStr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this(indexStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!dateStr.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                currentDate \u003d LocalDate.parse(dateStr, dateFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.FINE, \"currentDate is parsable\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.WARNING, \"the date \" + currentDate + \" is not parsable\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showMessage(\"Unable to parse input\" + dateStr + \" as a date. \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param indexStr the index of meal on the today to be marked as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws NumberFormatException when parseInt is unable to parse the index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand(String indexStr) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.index \u003d Integer.parseInt(indexStr.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.FINE, \"index is a valid int\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse input\" + indexStr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(\"Unable to parse input \" + indexStr + \" as integer index. \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for MarkDoneCommand."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e meals.getMealsList(currentDate).size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"the index \" + index + \" is out of bound\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            ui.showMessage(\"Index provided out of bounds for list of meals on \" + currentDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            Meal currentMeal \u003d meals.getMeal(currentDate, index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String foodCostStr \u003d currentMeal.getCostStr();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            Payment payment \u003d new Payment(foodCostStr, currentMeal.getDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (currentMeal.getIsDone()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.INFO, \"the meal has already been marked done\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showAlreadyMarkedDone(currentMeal);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } else if (wallet.addPaymentTransaction(payment)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.FINE, \"Adding payment transaction\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                Meal markedDoneMeal \u003d meals.markDone(currentDate, index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    storage.writeFile(meals);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    storage.writeTransaction(wallet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                } catch (ProgramException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    logger.log(Level.WARNING, \"error in storing transactions\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showDone(markedDoneMeal);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ArrayList\u003cMeal\u003e currentMeals \u003d meals.getMealsList(currentDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showCaloriesLeft(currentMeals, user, currentDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showPayment(payment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showAccountBalance(wallet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                logger.log(Level.INFO, \"There is insufficient balance, no amount deducted\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showInsufficientBalance(payment);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showNotDone(currentMeal);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                ui.showAccountBalance(wallet);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 12,
      "GaryStu": 96,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * StatsCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Displays the user\u0027s dietary statistics, provided goal exists."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for StatsCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public StatsCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes StatsCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getGoal() !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user.updateStats(meals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showStats(user);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 36
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/SuggestExerciseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.datatypes.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.suggestion.ExerciseSuggestionHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Analyze the list of SuggestExercise objects as well as the current calorie goal of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * user, the date provided and the user meal parameters provided to give appropriate exercise suggestion."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This class adds an exercise to a date, not a suggestable exercise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class SuggestExerciseCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String keyword \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ExerciseSuggestionHandler exerciseSuggestionHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for suggestExerciseCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date the date for which an exercise suggestion is to be made"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param keyword any keywords the user has entered"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public SuggestExerciseCommand(LocalDate date, String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // This constructor is called if there are issues parsing user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public SuggestExerciseCommand(boolean isFail, String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.errorStr \u003d message;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Executes the suggestExercise command. Has 2 stages."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Shows the user the list of relevant exercises as well as their duration"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                exerciseSuggestionHandler \u003d new ExerciseSuggestionHandler();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                execute_stage_0(meals, user);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                stage++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Adds the selected exercise routine to exerciseList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                execute_stage_1(meals, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //Exits execute loop if command enters invalid state"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * First stage of execute."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void execute_stage_0(MealList meals, User user) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getGoal() \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.goalNotFound();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (user.getTargetActivityLevel() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.goalNotFound();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int calorieToElevateActivityLevel \u003d (int) (user.getDailyCalorie() * user.getActivityLevelDifference());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int excessCalorie \u003d user.getCalorieBalance() - meals.getCalorieBalanceOnDate(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (excessCalorie \u003c 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                //subtract current day\u0027s deficit of calories to the amount required for exercise"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                calorieToElevateActivityLevel -\u003d excessCalorie;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showExerciseRequired(calorieToElevateActivityLevel, date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ArrayList\u003cPair\u003e exerciseArrayList \u003d this.exerciseSuggestionHandler.compute(meals.getExerciseList(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    calorieToElevateActivityLevel, user.getDailyCalorie(), keyword);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showExerciseOptions(exerciseArrayList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Input 0 to cancel selection\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Second stage of execute."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void execute_stage_1(MealList meals, Storage storage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int exerciseIdx;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exerciseIdx \u003d Integer.parseInt(this.responseStr);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"Could not parse \" + responseStr + \" as a number. Please input an integer.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (exerciseIdx \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(\"The suggest exercise command has been canceled\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (exerciseIdx \u003c 0 || exerciseIdx \u003e exerciseSuggestionHandler.getSize()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(responseStr + \" is out of bounds. Please input a valid index.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Pair selectedExercise \u003d exerciseSuggestionHandler.getExercise(exerciseIdx);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        meals.getExerciseList().addExerciseAtDate(date, selectedExercise);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui.showMessage(\"Got it!, I have set the chosen exercise for the date \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + date.format(LOCAL_DATE_FORMATTER) + \".\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.writeExercises(meals);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 137
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/SuggestMealCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.suggestion.MealSuggestionAnalytics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Class to handle suggestion command arguments from the user and pass them to the analytic module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class SuggestMealCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int maxMealsToSuggest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private String mealSuggestionTypeStr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private MealSuggestionAnalytics mealSuggestionAnalytics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private AddCommand addCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private ArrayList\u003cMeal\u003e suggestedMealList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private LocalDate suggestionDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Constructor of suggestion command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param suggestionDate Date on which meal suggestion is required."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param maxMealsToSuggest Maximum number of suggested meals to be shown to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestMealCommand(LocalDate suggestionDate, int maxMealsToSuggest, String mealTypeStr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.suggestionDate \u003d suggestionDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.maxMealsToSuggest \u003d maxMealsToSuggest;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.mealSuggestionTypeStr \u003d mealTypeStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // Constructor called when parser fails to parse arguments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestMealCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.isFail \u003d flag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int getCalorieLimit(User user, ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int totalConsume \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (Meal meal : meals) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // add all meals regardless whether it is done or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            totalConsume +\u003d meal.getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return user.getDailyCalorie() - totalConsume;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                execute_stage_0(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                stage++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                execute_stage_1(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private void execute_stage_0(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        mealSuggestionAnalytics \u003d new MealSuggestionAnalytics();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int calorieLimit \u003d getCalorieLimit(user, meals.getMealsList(currentDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        suggestedMealList \u003d mealSuggestionAnalytics.getMealSuggestions(meals, suggestionDate, calorieLimit,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                                                                        maxMealsToSuggest, mealSuggestionTypeStr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (suggestedMealList.size() \u003e 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showSuggestedMealList(suggestedMealList, currentDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // Allow followup user action after meals are suggested."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(\"No meals could be suggested by DIYeats\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // second stage user input execution"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private void execute_stage_1(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int mealSelectedIndex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            mealSelectedIndex \u003d Integer.parseInt(this.responseStr);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(\"Could not parse \" + responseStr + \" as a number. Please input an integer.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (mealSelectedIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(\"Declining suggestions.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else if (1 \u003e mealSelectedIndex || mealSelectedIndex \u003e suggestedMealList.size()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            ui.showMessage(\"Index out of bounds. Please try again and enter index (inclusive)\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    + \" between 1 and \" + suggestedMealList.size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal chosenMeal \u003d suggestedMealList.get(mealSelectedIndex - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        addCommand \u003d new AddCommand(chosenMeal);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        addCommand.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 8,
      "HashirZahir": 104
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UpdateActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateActivityCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for UpdateActivityCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param description the data to update the user document with"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateActivityCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateActivityCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Executes the UpdateHeightCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int activityInt \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            activityInt \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (activityInt \u003c 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Activity Level cannot be less than 1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showActivityLevel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (activityInt \u003e 5) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Activity Level cannot be more than 5\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showActivityLevel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setActivityLevel(activityInt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showSuccess(\"Activity Level\", description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    storage.writeUser(user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } catch (ProgramException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for activity level\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void updateUser(User user) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int activityInt \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            activityInt \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (activityInt \u003c 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Activity Level cannot be less than 1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showActivityLevel();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (activityInt \u003e 5) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Activity Level cannot be more than 5\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showActivityLevel();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setActivityLevel(activityInt);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showSuccess(\"Activity Level\", description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for activity level\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "koushireo": 77
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UpdateAgeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateAgeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for UpdateWeightCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param description the data to update the user document with"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateAgeCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateAgeCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Executes the UpdateAgeCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int ageInt \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ageInt \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (ageInt \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Age cannot be less than 0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (ageInt \u003e 122) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Age cannot be more than 122(Unless you really are the oldest person in the world!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setAge(ageInt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showSuccess(\"age\", description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    storage.writeUser(user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } catch (ProgramException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for age\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void updateUser(User user) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int ageInt \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ageInt \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (ageInt \u003c 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Age cannot be less than 0\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (ageInt \u003e 122) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Age cannot be more than 122(Unless you really are the oldest person in the world!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setAge(ageInt);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showSuccess(\"age\", description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for age\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "koushireo": 73
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * ListCommand is a public class that inherits from abstract class Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * It displays all the meals in a relevant day in a list to the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String weight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private UpdateWeightCommand c2 \u003d new UpdateWeightCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for UpdateCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateCommand(String age, String weight, String date, String height, String name, String activity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d flag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Executes the UpdateCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals,  Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (this.age !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    UpdateAgeCommand c1 \u003d new UpdateAgeCommand(age);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    c1.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (this.weight !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        c2 \u003d new UpdateWeightCommand(weight);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        c2 \u003d new UpdateWeightCommand(weight, date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    c2.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    if (c2.isDone() \u003d\u003d false) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        this.stage +\u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        this.isDone \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (this.height !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    UpdateHeightCommand c1 \u003d new UpdateHeightCommand(height);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    c1.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (this.name !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    UpdateNameCommand c1 \u003d new UpdateNameCommand(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    c1.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (this.activity !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    UpdateActivityCommand c1 \u003d new UpdateActivityCommand(activity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    c1.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                c2.setResponseStr(this.responseStr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                c2.execute(meals, storage, user, wallet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                this.isDone \u003d c2.isDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (c2.isDone()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    this.stage +\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setResponseStr(String response) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.responseStr \u003d response;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "koushireo": 91
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UpdateHeightCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateHeightCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for UpdateHeightCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param description the data to update the user document with"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateHeightCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateHeightCommand(boolean isFail, String messageStr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Executes the UpdateHeightCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int heightInt \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            heightInt \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (heightInt \u003c 54) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Height cannot be less than 54cm(Unless you really are the shortest man on earth!)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (heightInt \u003e 272) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Height cannot be more than 272cm(Unless you really are the tallest man on earth!)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setHeight(heightInt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showSuccess(\"height\", description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    storage.writeUser(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } catch (ProgramException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for height\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void updateUser(User user) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int heightInt \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            heightInt \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (heightInt \u003c 54) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Height cannot be less than 54cm(Unless you really are the shortest man on earth!)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (heightInt \u003e 272) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Height cannot be more than 272cm(Unless you really are the tallest man on earth!)\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setHeight(heightInt);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showSuccess(\"height\", description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for height\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "koushireo": 72
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UpdateNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateNameCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for UpdateNameCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param description the data to update the user document with"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateNameCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateNameCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Executes the UpdateHeightCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals   the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user    the object that handles all user data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet  the wallet object that stores transaction information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user.setName(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showSuccess(\"name\", description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.writeUser(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void updateUser(User user) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user.setName(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showSuccess(\"name\", description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "koushireo": 50
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UpdateWeightCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateWeightCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateWeightCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.currentDate \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Constructor for UpdateWeightCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight the data to update the user document with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateWeightCommand(String weight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateWeightCommand(String weight, String date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.currentDate \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateWeightCommand(boolean flag, String messageStr) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isFail \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.errorStr \u003d messageStr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Executes the UpdateWeightCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meals are supposed to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that handles all reading and writing to files"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param user the object that handles all user data"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param wallet the wallet object that stores transaction information"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Storage storage, User user, Wallet wallet) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                stage0(user, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                stage1(user, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        stage++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void stage0(User user, Storage storage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (Integer.parseInt(weight) \u003e 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            HashMap\u003cLocalDate, Double\u003e allWeight \u003d user.getAllWeight();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (!allWeight.containsKey(currentDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    user.setWeight(Integer.parseInt(weight), currentDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showWeightUpdate(user, Integer.parseInt(weight), currentDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showMessage(\"Please input a proper number for weight\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    int temp \u003d Integer.parseInt(weight);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    isDone \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showConfirmation(weight, currentDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showMessage(\"Please input a proper number for weight\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                storage.writeUser(user);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Weight cannot be less than 2kg(Unless you really are the lightest man on earth!)\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void stage1(User user, Storage storage) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (this.responseStr.equals(\"y\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (Integer.parseInt(weight) \u003e\u003d 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    user.setWeight(Integer.parseInt(weight), currentDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showWeightUpdate(user, Integer.parseInt(weight), currentDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ui.showMessage(\"Weight cannot be less than 2kg(Unless you really are the lightest man on earth!)\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (this.responseStr.equals(\"n\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showRejected();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please enter either Y/N\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            stage -\u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.writeUser(user);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setResponseStr(String response) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.responseStr \u003d response.toLowerCase().substring(0,1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void updateUser(User user) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (Integer.parseInt(weight) \u003e\u003d 2) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setWeight(Integer.parseInt(weight), currentDate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showWeightUpdate(user, Integer.parseInt(weight), currentDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Weight cannot be less than 2kg(Unless you really are the lightest man on earth!)\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showMessage(\"Please input a proper number for weight\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 7,
      "koushireo": 136
    }
  },
  {
    "path": "src/main/java/diyeats/logic/commands/UserSetup.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.parsers.ArgumentSplitter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.UserUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * UserSetup is a public class that facilitates user profile creation using single line."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserSetup {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private UserUi ui \u003d new UserUi();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UserSetup(User user) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.getIsSetup()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeBack(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeNew();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**This is the class that helps user to split the info they input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param info the single line info that the user input to append the information"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void initialise(String info) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        HashMap\u003cString, String\u003e userInfo \u003d ArgumentSplitter.splitForwardSlashArguments(info);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInfo.containsKey(\"name\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            UpdateNameCommand update \u003d new UpdateNameCommand(userInfo.get(\"name\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            update.updateUser(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showLackName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInfo.containsKey(\"age\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            UpdateAgeCommand update \u003d new UpdateAgeCommand(userInfo.get(\"age\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            update.updateUser(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getAge() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showLackAge();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInfo.containsKey(\"weight\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            UpdateWeightCommand update \u003d new UpdateWeightCommand(userInfo.get(\"weight\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            update.updateUser(user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getAllWeight().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showLackWeight();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInfo.containsKey(\"height\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            UpdateHeightCommand update \u003d new UpdateHeightCommand(userInfo.get(\"height\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            update.updateUser(user);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getHeight() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showLackHeight();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInfo.containsKey(\"activity\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            UpdateActivityCommand update \u003d new UpdateActivityCommand(userInfo.get(\"activity\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            update.updateUser(user);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getActivityLevel() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showLackActivity();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (userInfo.containsKey(\"gender\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (userInfo.get(\"gender\").toLowerCase().charAt(0) \u003d\u003d \u0027m\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setGender(Gender.MALE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (userInfo.get(\"gender\").toLowerCase().charAt(0) \u003d\u003d \u0027f\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setGender(Gender.FEMALE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (user.getGender() \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showWrongGenderInfo();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showLackGender();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.isValid()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showUserSetupDone(user);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "koushireo": 91
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/AddBreakfastCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Breakfast;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle addition of breakfast item to model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddBreakfastCommandParser implements ParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a breakfast object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] mealNameAndInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String foodCostStr \u003d \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, String\u003e nutritionInfoMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealNameAndInfo \u003d ArgumentSplitter.splitMealArguments(userInputStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(mealNameAndInfo[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String details : nutritionInfoMap.keySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (details.equals(\"date\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String dateArgStr  \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    dateArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    localDate \u003d LocalDate.parse(dateArgStr, dateFormat);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(true, \"Unable to parse \" + dateArgStr + \" as a date. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else if (details.equals(\"cost\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                foodCostStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String intArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.parseInt(intArgStr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(true, \"Unable to parse \" + intArgStr"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \" as an integer. \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddCommand(new Breakfast(mealNameAndInfo[0], localDate, nutritionInfoMap, foodCostStr));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 62
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/AddDefaultValueCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddDefaultValueCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle addition of Item object to model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddDefaultValueCommandParser implements ParserInterface\u003cAddDefaultValueCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddItemCommand encapsulating a Item object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddItemCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddDefaultValueCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] mealNameAndInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String foodCostStr \u003d \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, String\u003e nutritionInfoMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealNameAndInfo \u003d ArgumentSplitter.splitMealArguments(userInputStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(mealNameAndInfo[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddDefaultValueCommand(true, e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (nutritionInfoMap.containsKey(\"cost\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            foodCostStr \u003d nutritionInfoMap.get(\"cost\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String details : nutritionInfoMap.keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String intArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Integer.parseInt(intArgStr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddDefaultValueCommand(true, \"Unable to parse \" + intArgStr"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \" as an integer. \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddDefaultValueCommand(new Meal(mealNameAndInfo[0], null, nutritionInfoMap, foodCostStr));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 51
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/AddDinnerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Dinner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle addition of Dinner item to model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddDinnerCommandParser implements ParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a Dinner object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] mealNameAndInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String foodCostStr \u003d \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, String\u003e nutritionInfoMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealNameAndInfo \u003d ArgumentSplitter.splitMealArguments(userInputStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(mealNameAndInfo[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String details : nutritionInfoMap.keySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (details.equals(\"date\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String dateArgStr  \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    dateArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    localDate \u003d LocalDate.parse(dateArgStr, dateFormat);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(true, \"Unable to parse \" + dateArgStr + \" as a date. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else if (details.equals(\"cost\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                foodCostStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String intArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.parseInt(intArgStr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(true, \"Unable to parse \" + intArgStr"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \" as an integer. \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddCommand(new Dinner(mealNameAndInfo[0], localDate, nutritionInfoMap, foodCostStr));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 62
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/AddExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddExerciseCommandParser implements ParserInterface\u003cAddExerciseCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a breakfast object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddExerciseCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (!userInputStr.contains(\"/value\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddExerciseCommand(true, \"Theres no /value tag provided. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"Please include the /value tag\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] exerciseNameAndValue \u003d ArgumentSplitter.splitArguments(userInputStr, \"/value\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String exerciseNameStr \u003d exerciseNameAndValue[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String exerciseValueStr \u003d exerciseNameAndValue[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (exerciseNameStr.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddExerciseCommand(true, \"No description of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"the exercise has been provided.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int exerciseValueInt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exerciseValueInt \u003d Integer.parseInt(exerciseValueStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddExerciseCommand(true, \"Unable to parse \" + exerciseValueStr + \" as a number. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"Please enter a valid integer.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (exerciseValueInt \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddExerciseCommand(true, \"Please enter a valid integer greater than 0.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddExerciseCommand(exerciseNameStr, exerciseValueInt);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 44
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/AddGoalCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddGoalCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.ACTIVITY_ARG_STR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.END_DATE_ARG_STR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.START_DATE_ARG_STR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.WEIGHT_ARG_STR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle setting of goals."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddGoalCommandParser implements ParserInterface\u003cAddGoalCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse user input and return AddGoalCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddGoalCommand\u003c/code\u003e Command object encapsulating the goal object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddGoalCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d ArgumentSplitter.splitForwardSlashArguments(userInputStr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //validate startdate argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.containsKey(START_DATE_ARG_STR)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String dateStr \u003d argumentsMap.get(START_DATE_ARG_STR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                startDate \u003d LocalDate.parse(dateStr, dateFormat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"Unable to parse \" + dateStr + \" as a date. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //validate enddate argument"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.containsKey(END_DATE_ARG_STR)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String dateStr \u003d argumentsMap.get(END_DATE_ARG_STR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                endDate \u003d LocalDate.parse(dateStr, dateFormat);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"Unable to parse \" + dateStr + \" as a date. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (argumentsMap.containsKey(START_DATE_ARG_STR) \u0026\u0026 startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"It appears startdate is after enddate.\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \" Please enter a valid set of dates\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //validate weight argument"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.containsKey(WEIGHT_ARG_STR)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String floatStr \u003d argumentsMap.get(WEIGHT_ARG_STR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                Double.parseDouble(floatStr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"Unable to parse \" + floatStr + \" as a number. \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"Please enter a valid integer.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (Double.parseDouble(floatStr) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"Unable to accept a negative or zero number as \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"weight. Please try entering a valid target weight.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //validate activity argument"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.containsKey(ACTIVITY_ARG_STR)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int parsedValue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String intStr \u003d argumentsMap.get(ACTIVITY_ARG_STR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                parsedValue \u003d Integer.parseInt(intStr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"Unable to parse \" + intStr + \" as a number. \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"Please enter a valid integer.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (parsedValue \u003e 5 || parsedValue \u003c 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommand(true, \"Integer after /activity must belong\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"to the range 1-5\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        List\u003cString\u003e validArguments \u003d Arrays.asList(START_DATE_ARG_STR, END_DATE_ARG_STR,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                WEIGHT_ARG_STR, ACTIVITY_ARG_STR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.keySet().containsAll(validArguments)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddGoalCommand(argumentsMap);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (argumentsMap.size() \u003c validArguments.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddGoalCommand(true, \"Some arguments are missing\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \". Type `help goal` to get command syntax.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (argumentsMap.size() !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddGoalCommand(true, \"Invalid arguments present\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \". Type `help goal` to get command syntax.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddGoalCommand(true, \"Invalid setgoal command, no arguments present.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 106
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/AddLunchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Lunch;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle addition of lunch item to model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class AddLunchCommandParser implements ParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a Lunch object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException when the user input cannot be parsed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public AddCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String[] mealNameAndInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String foodCostStr \u003d \"0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, String\u003e nutritionInfoMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealNameAndInfo \u003d ArgumentSplitter.splitMealArguments(userInputStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(mealNameAndInfo[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new AddCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String details : nutritionInfoMap.keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (details.equals(\"date\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String dateArgStr  \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    dateArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    localDate \u003d LocalDate.parse(dateArgStr, dateFormat);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(true, \"Unable to parse \" + dateArgStr + \" as a date. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else if (details.equals(\"cost\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                foodCostStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                String intArgStr \u003d nutritionInfoMap.get(details);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.parseInt(intArgStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    return new AddCommand(true, \"Unable to parse \" + intArgStr"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                            + \" as an integer. \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new AddCommand(new Lunch(mealNameAndInfo[0], localDate, nutritionInfoMap, foodCostStr));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 64
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/ArgumentSplitter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * ArgumentSplitter is a public class that handles the splitting of command arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ArgumentSplitter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static final String argPatternStr \u003d \" /[a-zA-Z]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static final Pattern argPattern \u003d Pattern.compile(argPatternStr);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * split multiple meal related command arguments (nutritional values)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eString[]{mealName, mealInfo}\u003c/code\u003e Name and info of the meal."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static String[] splitMealArguments(String userInputStr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String[] splitStrings \u003d userInputStr.split(\"/\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String mealName \u003d splitStrings[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String mealInfo \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (splitStrings.length \u003e 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            mealInfo +\u003d \"/\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            mealInfo +\u003d splitStrings[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return new String[]{mealName, mealInfo};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * split command arguments based on specific delimiter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param delimiter the delimiter that the userInput will be split around."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eString[] {splitStrings[0], splitStrings[1]}\u003c/code\u003e Split arguments of the command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static String[] splitArguments(String userInputStr, String delimiter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String[] splitStrings \u003d userInputStr.split(delimiter, 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        splitStrings[0] \u003d splitStrings[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (splitStrings.length \u003c 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new String[] {splitStrings[0], \"\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        splitStrings[1] \u003d splitStrings[1].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return new String[] {splitStrings[0], splitStrings[1]};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    //@@author HashirZahir"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Split commands based on forward slash separated arguments (eg: /date 1 /calorie 2 ..)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Hashmap containing all the keys and respective string value for each forward"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     *         slash separated string argument in user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public static HashMap\u003cString, String\u003e splitForwardSlashArguments(String userInputStr) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        userInputStr \u003d \" \" + userInputStr;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String[] tempSplitStrings \u003d userInputStr.split(argPatternStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cString\u003e valueStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "         * Necessary filtering of empty strings as matching the regex"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "         * produces leading empty string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (String tempStr : tempSplitStrings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (!tempStr.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                valueStrings.add(tempStr.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        // Regex pattern matching to get argument names."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Matcher argNameMatcher \u003d argPattern.matcher(userInputStr);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cString\u003e argNameStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        while (argNameMatcher.find()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String matchedStr \u003d argNameMatcher.group();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            argNameStrings.add(matchedStr.replace(\"/\", \"\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (int idx \u003d 0; idx \u003c argNameStrings.size();idx++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String argNameStr \u003d argNameStrings.get(idx).trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (idx \u003c valueStrings.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                String argValueStr \u003d valueStrings.get(idx);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                argumentsMap.put(argNameStr, argValueStr);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                // number of arguments and values do not match"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                // return the argument value pairs written so far"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return argumentsMap;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "HashirZahir": 51,
      "GaryStu": 43
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/CGraphCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.CGraphCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * Parser class to handle information to CGraphCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class CGraphCommandParser implements ParserInterface\u003cCGraphCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a Lunch object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @throws ProgramException when the user input cannot be parsed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public CGraphCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int month \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new CGraphCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String[] lineSplit \u003d ArgumentSplitter.splitArguments(userInputStr,\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            month \u003d Integer.parseInt(lineSplit[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new CGraphCommand(false, \"Please input a valid number for month\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new CGraphCommand(false, \"Month can only be between 1 to 12\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int year \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            year \u003d Integer.parseInt(lineSplit[4]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new CGraphCommand(false, \"Please input a valid number for year\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String type \u003d lineSplit[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return new CGraphCommand(month, year, type);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "koushireo": 44
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/ClearCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Parser class to handle multiple deletions of meals from model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class ClearCommandParser implements ParserInterface\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Parse user input and return ClearCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return \u003ccode\u003eClearCommand\u003c/code\u003e Command object demarcating the range of data between dates to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public ClearCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String[] startAndEndDates;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            startAndEndDates \u003d ArgumentSplitter.splitArguments(userInputStr, \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new ClearCommand(false, \"Please enter 2 dates; \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    + \"Start and End dates to clear meals from.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            startDate \u003d LocalDate.parse(startAndEndDates[0], dateFormat);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new ClearCommand(false, \"Unable to parse input \" + startAndEndDates[0] + \" as a date\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            endDate \u003d LocalDate.parse(startAndEndDates[1], dateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new ClearCommand(false, \"Unable to parse input \" + startAndEndDates[1] + \" as a date\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new ClearCommand(false, \"Start date \" + startDate + \" is after end date \" + endDate + \"\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    + \"\\nPlease ensure start date is before end date\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new ClearCommand(startDate, endDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "HashirZahir": 49
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Parser class to handle deletion of a single item from model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class DeleteCommandParser implements ParserInterface\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Parse user input and return DeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return \u003ccode\u003eDeleteCommand\u003c/code\u003e Command object demarcating the entry of data to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public DeleteCommand parse(String userInputStr)  {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new DeleteCommand(false,\"Please enter index of meal to delete on today\u0027s list or \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    + \"date and index of meal to delete. Type \u0027help delete\u0027 for more information.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        LocalDate deleteDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String[] indexAndDate \u003d ArgumentSplitter.splitArguments(userInputStr, \"/date\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            InputValidator.validatePositiveInteger(indexAndDate[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new DeleteCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int index \u003d Integer.parseInt(indexAndDate[0]) - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (indexAndDate[1].isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            deleteDate \u003d LocalDate.parse(indexAndDate[1], dateFormat);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new DeleteCommand(index, deleteDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new DeleteCommand(false, \"Unable to parse date \\\"\" + indexAndDate[1]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    + \"\\\" as a date.  Not executing command\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "HashirZahir": 46
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/DeleteDefaultValueCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.DeleteDefaultValueCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle deletion of a default value from mealList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DeleteDefaultValueCommandParser implements ParserInterface\u003cDeleteDefaultValueCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a breakfast object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteDefaultValueCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new DeleteDefaultValueCommand(false, \"Please input name of entry you wish to delete\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new DeleteDefaultValueCommand(userInputStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/DeleteExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle deletion of a exercise from exerciseList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DeleteExerciseCommandParser implements ParserInterface\u003cDeleteExerciseCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input and returns an AddCommand encapsulating a breakfast object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eAddCommand\u003c/code\u003e Command object encapsulating a breakfast object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DeleteExerciseCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new DeleteExerciseCommand(false, \"Please input name of entry you wish to delete\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new DeleteExerciseCommand(userInputStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 26
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/DeleteTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.logic.commands.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle deletion of a single transaction from the transactions list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class DeleteTransactionCommandParser implements ParserInterface\u003cDeleteTransactionCommand\u003e  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse user input and return DeleteTransactionCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eDeleteTransactionCommand\u003c/code\u003e Command object demarcating the entry of transaction to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public DeleteTransactionCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String[] indexAndDate \u003d ArgumentSplitter.splitArguments(userInputStr, \"/date\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (indexAndDate[1].isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new DeleteTransactionCommand(indexAndDate[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new DeleteTransactionCommand(indexAndDate[0], indexAndDate[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new DeleteTransactionCommand(false, \"Please enter index of transaction to delete on today\u0027s list or \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    + \"date and index of transaction to delete\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 33
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/DepositCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddTransactionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Deposit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle deposits to the wallet."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class DepositCommandParser implements ParserInterface\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(DepositCommandParser.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse user input and return AddTransactionCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eAddTransactionCommand\u003c/code\u003e Command object encapsulating the amount to be deposited"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String[] amountAndDate \u003d ArgumentSplitter.splitArguments(userInputStr, \"/date\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(amountAndDate[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (!amountAndDate[1].isBlank()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    localDate \u003d LocalDate.parse(amountAndDate[1], dateFormat);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    logger.log(Level.WARNING, \"date cannot be parsed\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    return new AddTransactionCommand(true, \"Unable to parse \" + amountAndDate[1] + \" as a date. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                            + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                InputValidator.validateDate(localDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(new Deposit(amountAndDate[0], localDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(true, e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 4,
      "GaryStu": 43
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle the marking of a meal object as done in the model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class DoneCommandParser implements ParserInterface\u003cMarkDoneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(DoneCommandParser.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse user input and return MarkDoneCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eMarkDoneCommand\u003c/code\u003e Command object encapsulating the index of the entry to be marked done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public MarkDoneCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse MarkDoneCommand\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new MarkDoneCommand(false, \"Please enter index of meal to be marked done on today\u0027s list or \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    + \"date and index of meal to be marked done\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String[] indexAndDate \u003d ArgumentSplitter.splitArguments(userInputStr, \"/date\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return new MarkDoneCommand(indexAndDate[0], indexAndDate[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "GaryStu": 29
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Parser class to handle editing of a entry in the model."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class EditCommandParser implements ParserInterface\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Parse user input and return EditCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return \u003ccode\u003eEditCommand\u003c/code\u003e Command object encapsulating the Meal object to replace the old entry"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public EditCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String[] indexAndMealInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int mealIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        HashMap\u003cString, String\u003e nutritionInfoMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        DateTimeFormatter dateFormat \u003d LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            indexAndMealInfo \u003d userInputStr.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (indexAndMealInfo.length \u003c 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new EditCommand(true, \"No tags specified to update or edit. Nothing updated\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            InputValidator.validatePositiveInteger(indexAndMealInfo[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            mealIndex \u003d Integer.parseInt(indexAndMealInfo[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            nutritionInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(indexAndMealInfo[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new EditCommand(true, e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (nutritionInfoMap.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String dateArgStr \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                dateArgStr \u003d nutritionInfoMap.get(\"date\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                localDate \u003d LocalDate.parse(dateArgStr, dateFormat);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new EditCommand(true, \"Unable to parse\" + dateArgStr + \" as a date. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            nutritionInfoMap.remove(\"date\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (String detailsStr : nutritionInfoMap.keySet()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String valueStr \u003d nutritionInfoMap.get(detailsStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                InputValidator.validateNutritionalValue(valueStr);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } catch (ProgramException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new EditCommand(false, \"Unable to parse tag \" + detailsStr + \" with value \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + valueStr + \" as an integer. Please enter values as integers larger than or equal to 0\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new EditCommand(mealIndex - 1, localDate, nutritionInfoMap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 13,
      "HashirZahir": 58
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle finding an entry from the model."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class FindCommandParser implements ParserInterface\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse user input and return FindCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eFindCommand\u003c/code\u003e Command object encapsulating the search keywords"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException If the userInput cannot be parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public FindCommand parse(String userInputStr) throws ProgramException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] nameAndDate \u003d ArgumentSplitter.splitArguments(userInputStr, \" /date \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new FindCommand(nameAndDate[0], nameAndDate[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            return new FindCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 23,
      "GaryStu": 1,
      "koushireo": 3
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle the parsing of a help command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class HelpCommandParser implements ParserInterface\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse user input and return HelpCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eHelpCommand\u003c/code\u003e Command object containing the type of help sought by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HelpCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return new HelpCommand(userInputStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "GaryStu": 17
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/HistoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import diyeats.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Parser class to handle history command input from user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class HistoryCommandParser implements ParserInterface\u003cHistoryCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Parser for history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param userInputStr the user input to be parsed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return \u003ccode\u003ehistory\u003c/code\u003e the object containing records of all the past commands taken"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public HistoryCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (!userInputStr.isEmpty() \u0026\u0026 userInputStr.equals(\"clear\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new HistoryCommand(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return new HistoryCommand(false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 24
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/InputValidator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * InputValidator is a public class that deals with validating user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class InputValidator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static final String numericValidator \u003d \"-?\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static final String positiveValidator \u003d \"^[1-9]\\\\d*(\\\\.\\\\d+)?$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static final String wholeNumberValidator \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static final String positiveIntegerValidator \u003d \"^[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(InputValidator.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * validate the user input to check whether it\u0027s empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws ProgramException If the userInput is empty."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void validate(String userInputStr) throws ProgramException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInputStr.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"user input is empty\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new ProgramException(\"OOPS!!! The description of the command cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.FINE, \"user input is not empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * validate the amount the user input (nutritional value or food cost) is numeric."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param amountInputStr amount input by user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws ProgramException If the amount input by the user is not numeric or not positive."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void validateAmount(String amountInputStr) throws ProgramException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!amountInputStr.matches(numericValidator)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"food cost is not specified or it is not numeric\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new ProgramException(\"The food cost must be specified and must be numeric.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!amountInputStr.matches(positiveValidator)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"food cost is not positive\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new ProgramException(\"Only positive value is accepted.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.FINE, \"the amount is validated\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * validate the date so that transaction that happens in the future will not be recorded."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param localDate the date of transaction."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws ProgramException if \u003ccode\u003eLocalDate\u003c/code\u003e is after \u003ccode\u003eLocalDate.now()\u003c/code\u003e."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void validateDate(LocalDate localDate) throws ProgramException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (localDate.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"date specified is in the future\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new ProgramException(\"Cannot add transaction that happens in the future.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.FINE, \"date specified is valid (it\u0027s in the past)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * validate for positive integer with no leading zeroes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param valueInput the value to be validated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws ProgramException if the value is not a positive integer with no leading zeroes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void validatePositiveInteger(String valueInput) throws ProgramException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!valueInput.matches(positiveIntegerValidator)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"the value is not positive whole number\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new ProgramException(\"The value must be a positive integer with no leading zeroes\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * validate the nutritional value ."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param valueInput the nutritional value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @throws ProgramException if the value is not a whole number."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static void validateNutritionalValue(String valueInput) throws ProgramException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!valueInput.matches(wholeNumberValidator)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.WARNING, \"the value is not a whole number\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            throw new ProgramException(\"The value must be a whole number\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "GaryStu": 86
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle a list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ListCommandParser implements ParserInterface\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ListCommandParser.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse userInput and return ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eListCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListCommand parse(String userInputStr) throws ProgramException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        HashMap\u003cString, String\u003e argumentInfoMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String sortArgStr \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInputStr.isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.INFO, \"there is no argument for list, take the default value\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.INFO, \"there is argument for list command, start parsing\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        argumentInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(userInputStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        for (String details : argumentInfoMap.keySet()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (details.equals(\"date\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                String dateArgStr \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    dateArgStr \u003d argumentInfoMap.get(details);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    localDate \u003d LocalDate.parse(dateArgStr, dateFormat);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    logger.log(Level.WARNING, \"date cannot be parsed\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    return new ListCommand(false, \"Unable to parse \\\"\" + userInputStr + \"\\\" as a date.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (details.equals(\"sort\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                sortArgStr \u003d argumentInfoMap.get(details).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                if (!(sortArgStr.equals(\"costAscending\") || sortArgStr.equals(\"calorieAscending\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    || sortArgStr.equals(\"costDescending\") || sortArgStr.equals(\"calorieDescending\"))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    logger.log(Level.WARNING, \"the sorting arguments are not valid\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    throw new ProgramException(\"The only valid sorting arguments are costAscending, calorieAscending,\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                            + \" , costDescending, and calorieDescending\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.FINE, \"arguments are successfully parsed\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return new ListCommand(localDate, sortArgStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "HashirZahir": 1,
      "GaryStu": 52
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/ListTransactionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.logic.commands.ListTransactionsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle ListTransactionCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class ListTransactionCommandParser implements ParserInterface\u003cListTransactionsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(ListTransactionCommandParser.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse userInput and return ListTransactionCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eListTransactionCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ListTransactionsCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        HashMap\u003cString, String\u003e argumentInfoMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (userInputStr.isBlank()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.INFO, \"the date is unspecified, list today\u0027s transactions instead\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new ListTransactionsCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        argumentInfoMap \u003d ArgumentSplitter.splitForwardSlashArguments(userInputStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        for (String details : argumentInfoMap.keySet()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (details.equals(\"date\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                String dateArgStr \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    dateArgStr \u003d argumentInfoMap.get(details);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    localDate \u003d LocalDate.parse(dateArgStr, dateFormat);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    logger.log(Level.WARNING, \"the date cannot be parsed\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    return new ListTransactionsCommand(false, \"Unable to parse \\\"\" + dateArgStr"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                                                        + \"\\\" as a date.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        logger.log(Level.INFO, \"the date is specified, list that day\u0027s transactions\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return new ListTransactionsCommand(localDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 49
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.logic.commands.DeleteTransactionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_ADD_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_ADD_EXERCISE_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_ADD_GOAL_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_BREAKFAST_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_CGRAPH_COMMAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_CLEAR_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DELETE_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DELETE_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DELETE_EXERCISE_COMMAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DELETE_TRANSACTION_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DEPOSIT_COMMAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DINNER_COMMAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_DONE_COMMAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_EDIT_COMMAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_EXIT_COMMAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_FIND_COMMAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_HELP_COMMAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_HISTORY_COMMAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_LIST_COMMAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_LIST_TRANSACTION_COMMAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_LUNCH_COMMAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_PAYMENT_COMMAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_STATS_COMMAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_SUGGEST_EXERCISE_COMMAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_SUGGEST_MEAL_COMMAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.CommandSyntax.PARSER_UPDATE_COMMAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser is a public class that help to parse the command that is inputted from the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * And generate the appropriate command with their appropriate arguments"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ParserUtil parserUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Parser(Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.parserUtil \u003d new ParserUtil(autocorrect);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the main function that parse the command inputted by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param fullCommandStr the string the user input in the CLI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @return \u003ccode\u003enew ExitCommand()\u003c/code\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         if the user input \"bye\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Breakfast())\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"breakfast\" followed by the description of the meal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Lunch()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"lunch\" followed by the description of the meal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \u003ccode\u003enew AddCommand(new Dinner()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"dinner\" followed by the description of the meal"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew ListCommand()\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew MarkDoneCommand(index)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *         \"done\" followed by the index of the meal to be marked completed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew FindCommand(description)\u003c/code\u003e if the user input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"find\" followed by the string that needs to be added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \u003ccode\u003enew DeleteCommand(index) \u003c/code\u003e if the sure input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     *         \"delete\" followed by the index of the task to be deleted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException when the command is not recognized or command syntax is invalid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Command parse(String fullCommandStr) throws ProgramException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.parserUtil.parse(fullCommandStr.trim());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String commandStr \u003d this.parserUtil.getCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String argumentStr \u003d this.parserUtil.getArgument();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (commandStr) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_EXIT_COMMAND:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_BREAKFAST_COMMAND:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddBreakfastCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_LUNCH_COMMAND:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddLunchCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DINNER_COMMAND:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddDinnerCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_ADD_DEFAULT_COMMAND:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddDefaultValueCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DELETE_DEFAULT_COMMAND:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DeleteDefaultValueCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_LIST_COMMAND:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new ListCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DONE_COMMAND:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DoneCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_FIND_COMMAND:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new FindCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DELETE_COMMAND:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DeleteCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case PARSER_UPDATE_COMMAND:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                return new UpdateCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_CLEAR_COMMAND:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new ClearCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_EDIT_COMMAND:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new EditCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_ADD_GOAL_COMMAND:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddGoalCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_HELP_COMMAND:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new HelpCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DEPOSIT_COMMAND:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DepositCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_PAYMENT_COMMAND:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new PaymentCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_HISTORY_COMMAND:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new HistoryCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_SUGGEST_MEAL_COMMAND:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new SuggestMealCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_STATS_COMMAND:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new StatsCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            case PARSER_CGRAPH_COMMAND:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new CGraphCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_SUGGEST_EXERCISE_COMMAND:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new SuggestExerciseCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_ADD_EXERCISE_COMMAND:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new AddExerciseCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case PARSER_DELETE_EXERCISE_COMMAND:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new DeleteExerciseCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case PARSER_LIST_TRANSACTION_COMMAND:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new ListTransactionCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            case PARSER_DELETE_TRANSACTION_COMMAND:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                return new DeleteTransactionCommandParser().parse(argumentStr);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new ProgramException(\"I\u0027m sorry, but I don\u0027t know what the command \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"you have just entered means\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 102,
      "HashirZahir": 1,
      "GaryStu": 17,
      "koushireo": 13,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/ParserInterface.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Represents a parser that processes user input into a Command of type T."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * @param \u003cT\u003e type of Command returned."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public interface ParserInterface\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    DateTimeFormatter dateFormat \u003d LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses user input into a Command of type T and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return Command Returns a Command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException If the user input has syntactic errors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    T parse(String userInputStr) throws ProgramException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 29,
      "GaryStu": 1
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Utility class to handle pre-parsing of user inputs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static HistoryCommand history \u003d new HistoryCommand(true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for ParserUtil."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param autocorrect the autocorrect object to be set"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ParserUtil(Autocorrect autocorrect) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.autocorrect \u003d autocorrect;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse fullCommand into command and arguments."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param fullCommand the full command entered by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if the full command cannot be parsed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void parse(String fullCommand) throws ProgramException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        argument \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (splitCommand.length !\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                splitCommand \u003d new String[]{splitCommand[0], \"\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            command \u003d splitCommand[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            argument \u003d splitCommand[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"A parser error has been encountered.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        command \u003d autocorrect.runOnCommand(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        argument \u003d autocorrect.runOnArgument(argument);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        history.addCommand(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return command The string containing the command made by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for argument."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return argument The string containing the arguments made by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getArgument() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 63
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/PaymentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddTransactionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Payment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Parser class to handle addition of a payment transaction to the wallet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class PaymentCommandParser implements ParserInterface\u003cAddTransactionCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Parse user input and return PaymentCommandParser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param userInputStr String input by user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003eAddTransactionCommand\u003c/code\u003e Command object encapsulating the details of the transaction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public AddTransactionCommand parse(String userInputStr) throws ProgramException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(userInputStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            String[] amountAndDate \u003d ArgumentSplitter.splitArguments(userInputStr, \"/date\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(amountAndDate[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            if (!amountAndDate[1].isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    localDate \u003d LocalDate.parse(amountAndDate[1], dateFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                    return new AddTransactionCommand(true, \"Unable to parse \" + amountAndDate[1] + \" as a date. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                            + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                InputValidator.validateDate(localDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(new Payment(amountAndDate[0], localDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return new AddTransactionCommand(false, e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 4,
      "GaryStu": 40
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/SuggestExerciseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.SuggestExerciseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Parser class to handle suggestion of exercise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class SuggestExerciseCommandParser implements ParserInterface {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static final String DATE_ARG_STR \u003d \"date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static final String FIND_ARG_STR \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse user input and return SuggestCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param userInputStr String input by user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003eSuggestCommand\u003c/code\u003e to be updated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public SuggestExerciseCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d ArgumentSplitter.splitForwardSlashArguments(userInputStr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate suggestionDate \u003d LocalDate.now();   //suggest exercise for current day by default"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String keyword \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.containsKey(DATE_ARG_STR)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                suggestionDate \u003d LocalDate.parse(argumentsMap.get(DATE_ARG_STR), dateFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new SuggestExerciseCommand(true, \"Unable to parse\" + DATE_ARG_STR + \" as a date. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                        + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (argumentsMap.containsKey(FIND_ARG_STR)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            keyword \u003d argumentsMap.get(FIND_ARG_STR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new SuggestExerciseCommand(suggestionDate, keyword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 44
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/SuggestMealCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.SuggestMealCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * Parser class to handle suggestion of meals."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class SuggestMealCommandParser implements ParserInterface\u003cSuggestMealCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static final String dateArgStr \u003d \"date\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static final String displayArgStr \u003d \"display\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static final String mealTypeArgStr \u003d \"type\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // Default values for arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private LocalDate suggestionDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int maxMealsToSuggest \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private String mealTypeStr \u003d \"L\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Parse user input and return SuggestCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param userInputStr String input by user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return \u003ccode\u003eSuggestCommand\u003c/code\u003e Command object that will process meal suggestions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @throws ProgramException If the userInput cannot be parsed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestMealCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        HashMap\u003cString, String\u003e argumentsMap \u003d ArgumentSplitter.splitForwardSlashArguments(userInputStr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (String argNameStr : argumentsMap.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (!(argNameStr.equals(dateArgStr) || argNameStr.equals(displayArgStr)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    || argNameStr.equals(mealTypeArgStr))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new SuggestMealCommand(true, \"Unknown argument \" + argNameStr"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \". Type `help suggest` to get command syntax.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (argumentsMap.containsKey(dateArgStr)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                suggestionDate \u003d LocalDate.parse(argumentsMap.get(dateArgStr), dateFormat);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new SuggestMealCommand(true, \"Unable to parse\" + dateArgStr + \" as a date. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \"Please follow DD/MM/YYYY format.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (argumentsMap.containsKey(displayArgStr)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                maxMealsToSuggest \u003d Integer.parseInt(argumentsMap.get(displayArgStr).trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new SuggestMealCommand(true, \"Unable to parse display as integer. Please \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \"input as integer. eg: /display 5\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (argumentsMap.containsKey(mealTypeArgStr)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // TODO: Parameterize magic constants of meal type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            String tempMealTypeStr \u003d argumentsMap.get(mealTypeArgStr).toUpperCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            if (tempMealTypeStr.equals(\"B\") || tempMealTypeStr.equals(\"L\") || tempMealTypeStr.equals(\"D\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                mealTypeStr \u003d tempMealTypeStr;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                return new SuggestMealCommand(true, \"Unable to parse meal type as breakfast, \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \"lunch or dinner.\\nPlease input a single character \\\"b\\\", \\\"l\\\" or \\\"d\\\"\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                        + \" which signify breakfast, lunch and dinner respectively.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new SuggestMealCommand(suggestionDate, maxMealsToSuggest, mealTypeStr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "HashirZahir": 69
    }
  },
  {
    "path": "src/main/java/diyeats/logic/parsers/UpdateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * Parser class to handle addition of breakfast item to model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UpdateCommandParser implements ParserInterface\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Parses user input and returns an UpdateCommand encapsulating an object containing information to be updated."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param userInputStr String input by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @return \u003ccode\u003eUpdateCommand\u003c/code\u003e Command object encapsulating information to be updated"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UpdateCommand parse(String userInputStr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String age;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String weight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String height;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String[] temp \u003d {\"age\", \"weight\", \"date\", \"height\", \"name\", \"activity\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d ArgumentSplitter.splitForwardSlashArguments(userInputStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (map.containsKey(\"age\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            age \u003d map.get(\"age\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            age \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (map.containsKey(\"weight\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            weight \u003d map.get(\"weight\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            weight \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (map.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            date \u003d map.get(\"date\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (map.containsKey(\"height\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d map.get(\"height\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            height \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (map.containsKey(\"name\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            name \u003d map.get(\"name\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            name \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (map.containsKey(\"activity\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            activity \u003d map.get(\"activity\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            activity \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return new UpdateCommand(age, weight, date, height, name, activity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 59
    }
  },
  {
    "path": "src/main/java/diyeats/logic/sort/SortMealByCalorie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * SortMealByCalorie is a public class that implements custom comparator for sorting meal by calorie."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class SortMealByCalorie implements Comparator\u003cMeal\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Compare meals based on calorie."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meal to be compared with \u003ccode\u003emealCompared\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param mealCompared to be compared with \u003ccode\u003emeal\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return difference \u003ccode\u003emeal\u003c/code\u003e\u0027s calorie value with \u003ccode\u003emealCompared\u003c/code\u003e\u0027s calorie value."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public int compare(Meal meal, Meal mealCompared) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return meal.getCalorieValue() - mealCompared.getCalorieValue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "GaryStu": 22
    }
  },
  {
    "path": "src/main/java/diyeats/logic/sort/SortMealByCost.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * SortMealByCost is a public class that implements custom comparator for sorting meal by cost."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class SortMealByCost implements Comparator\u003cMeal\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * compare meals based on their cost."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meal to be compared with \u003ccode\u003emealCompared\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param mealCompared to be compared with \u003ccode\u003emeal\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return 0 if value of \u003ccode\u003emealCost\u003c/code\u003eis equal to that of \u003ccode\u003emealComparedCost\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *         1 if value of \u003ccode\u003emealCost\u003c/code\u003e is greater than that of \u003ccode\u003emealComparedCost\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *         -1 if value of \u003ccode\u003emealCost\u003c/code\u003e is less than that of \u003ccode\u003emealComparedCost\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public int compare(Meal meal, Meal mealCompared) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal mealCost \u003d new BigDecimal(meal.getCostStr());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal mealComparedCost \u003d new BigDecimal(mealCompared.getCostStr());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return mealCost.compareTo(mealComparedCost);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "GaryStu": 27
    }
  },
  {
    "path": "src/main/java/diyeats/logic/sort/SortMealByDefault.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * SortMealByDefault is a public class that implement custom comparator for sorting meal by mealType."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class SortMealByDefault implements Comparator\u003cMeal\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * compare meals based on meal type order (breakfast, lunch, dinner)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param meal to be compared with \u003ccode\u003emealCompared\u003c/code\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param mealCompared to be compared with \u003ccode\u003emeal\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return return -1 if \u003ccode\u003emeal.getMealType()\u003c/code\u003e is earlier than \u003ccode\u003emealCompared.getMealType()\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *         return 0 if \u003ccode\u003emeal.getMealType()\u003c/code\u003e is equal to \u003ccode\u003emealCompared.getMealType()\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *         return 1 if \u003ccode\u003emeal.getMealType()\u003c/code\u003e is later than \u003ccode\u003emealCompared.getMealType\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public int compare(Meal meal, Meal mealCompared) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return meal.getMealType().compareTo(mealCompared.getMealType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "GaryStu": 22
    }
  },
  {
    "path": "src/main/java/diyeats/logic/suggestion/ExerciseSuggestionHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.datatypes.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Exercise is defined in metabolic unit at rest (MET), eg, 1 hr of running which is 14 MET"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * is equal to 14 hours of static calorie loss."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ExerciseSuggestionHandler {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ArrayList\u003cPair\u003e exerciseArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private float calculateStaticCalorieExpenditure(int dailyCalorie) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert dailyCalorie \u003e 0 : \"dailyCalorie must be greater than 0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        float minInDay \u003d 24 * 60;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return dailyCalorie / minInDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ExerciseSuggestionHandler() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (exerciseArrayList !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return exerciseArrayList.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Pair getExercise(int idx) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (idx \u003c\u003d getSize()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String exerciseName \u003d exerciseArrayList.get(idx - 1).getKey();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int exerciseReps \u003d exerciseArrayList.get(idx - 1).getValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return new Pair(exerciseName, exerciseReps);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cPair\u003e compute(ExerciseList exerciseList, int calorieToExercise, int dailyCalorie, String keyword) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseArrayList.clear();  //clear contents of exerciseArrayList in case instance is reused (e.g in testing)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, Integer\u003e exerciseHashMap \u003d exerciseList.getStoredExercises();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        float staticCalorieExpenditure \u003d calculateStaticCalorieExpenditure(dailyCalorie);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert staticCalorieExpenditure \u003e 0 : \"staticCalorieExpenditure must be greater than 0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int minsToBurnCalories \u003d (int) ((float)calorieToExercise / staticCalorieExpenditure);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String itr : exerciseHashMap.keySet()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int met \u003d exerciseHashMap.get(itr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            met \u003d minsToBurnCalories / met;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Pair exerciseDurationPair \u003d new Pair(itr, met);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (keyword \u003d\u003d null || itr.toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.exerciseArrayList.add(exerciseDurationPair);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Collections.sort(this.exerciseArrayList, (lhs, rhs) -\u003e lhs.getKey().compareToIgnoreCase(rhs.getKey()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.exerciseArrayList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 66
    }
  },
  {
    "path": "src/main/java/diyeats/logic/suggestion/MealSuggestionAnalytics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.SuggestMeal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * This class handles all the data analytics aspect of the meal suggestion feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * It calculates the meal preference score based on the meal parameters to be considered"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * and returns the highest meal preference score meal to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class MealSuggestionAnalytics {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static ArrayList\u003cSuggestMeal\u003e defaultSuggestionMealList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public MealSuggestionAnalytics() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // get meal suggestion given the calorie limit and the max number of meals to suggest."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public ArrayList\u003cMeal\u003e getMealSuggestions(MealList meals, LocalDate suggestionDate, int calorieLimit,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                                              int maxMealsToSuggest, String mealSuggestionTypeStr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        setDefaultSuggestionMealList(meals.getDefaultValues(), suggestionDate, mealSuggestionTypeStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cSuggestMeal\u003e suggestionMealList \u003d getMealListWithinCalories(calorieLimit);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        suggestionMealList \u003d getFilteredDisplayList(suggestionMealList, maxMealsToSuggest);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new ArrayList\u003cMeal\u003e(suggestionMealList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // set the default meal list from which meals are suggested."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private void setDefaultSuggestionMealList(HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultMealSuggestionList,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                                              LocalDate suggestionDate, String mealTypeStr) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        defaultSuggestionMealList.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        for (String mealNameStr : defaultMealSuggestionList.keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            HashMap\u003cString, Integer\u003e mealNutrients  \u003d defaultMealSuggestionList.get(mealNameStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            defaultSuggestionMealList.add(new SuggestMeal(mealNameStr, mealNutrients, suggestionDate, mealTypeStr));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Get all the meals that satisfy calorie requirement."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param calorieLimit Calorie limit that user has for the day."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return List of meals that meet the calorie limit."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private ArrayList\u003cSuggestMeal\u003e getMealListWithinCalories(int calorieLimit) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cSuggestMeal\u003e tempSuggestionMealList \u003d new ArrayList(defaultSuggestionMealList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Collections.sort(tempSuggestionMealList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        SuggestMeal calorieLimitMeal \u003d new SuggestMeal();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        calorieLimitMeal.addNutritionalValue(\"calorie\", calorieLimit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int startIdx \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int endIdx;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int compareIdx \u003d Collections.binarySearch(tempSuggestionMealList, calorieLimitMeal);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        // a meal with the exact calorie limit exists"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (compareIdx \u003e\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            endIdx \u003d compareIdx + 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // meal with same calories as calorie limit not found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // negative index returned by subList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            endIdx \u003d -1 * (compareIdx + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new ArrayList\u003cSuggestMeal\u003e(tempSuggestionMealList.subList(startIdx, endIdx));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Filter the list of suggested meals based on user requirement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param mealList Input meal list that is modified by reference."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param maxMealsToSuggest Maximum number of meals to be suggested as set by user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private ArrayList\u003cSuggestMeal\u003e getFilteredDisplayList(ArrayList\u003cSuggestMeal\u003e mealList, int maxMealsToSuggest) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int endIdx \u003d mealList.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int startIdx \u003d endIdx - maxMealsToSuggest;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (startIdx \u003c 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            startIdx \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        mealList \u003d new ArrayList\u003cSuggestMeal\u003e(mealList.subList(startIdx, endIdx));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return mealList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "HashirZahir": 82
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/Breakfast.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * breakfast is a public class that extends from meal."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Breakfast extends Meal {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of breakfast object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the breakfast object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Breakfast(String description, LocalDate date, HashMap\u003cString, String\u003e details, String costStr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(description, date, details, costStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.setMealType(MealType.BREAKFAST);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 16,
      "HashirZahir": 1,
      "GaryStu": 2,
      "koushireo": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/Dinner.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * dinner is a public class that inherits from abstract class meal."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Dinner extends Meal {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of dinner object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the dinner object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Dinner(String description, LocalDate date, HashMap\u003cString, String\u003e details, String costStr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(description, date, details, costStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.setMealType(MealType.DINNER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 16,
      "HashirZahir": 1,
      "GaryStu": 2,
      "koushireo": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/ExerciseList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.datatypes.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * ExerciseList is a structure to store exercises in the model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ExerciseList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, Integer\u003e storedExercises \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cLocalDate, Pair\u003e exercisePlan \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for exerciseList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ExerciseList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //These instances of stored exercises are hardcoded for practical exam purposes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Running, 8 mph (7.5 min/mile)\", 8);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Running, 10 mph (6 min/mile)\", 10);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Cycling, 10 - 12mph (light effort)\", 7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Cycling, 12 - 14mph (moderate effort)\", 8);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Cycling, 14 - 16mph (heavy effort)\", 10);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Soccer, casual, general\", 7);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Tennis, casual, general\", 7);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        addStoredExercises(\"Martial arts, different types, moderate pace (taichi, taekwondo, etc)\", 10);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for storedExercises."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return HashMap containing all exercise names and their associated MET."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getStoredExercises() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.storedExercises;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Adds an exercise along with its MET into the storedExercises HashMap."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description name of the exercise"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param value MET value of the exercise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addStoredExercises(String description, int value) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (!storedExercises.containsKey(description)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedExercises.put(description, value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storedExercises.replace(description, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for an exercise on a date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date date exercise was scheduled for"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return a pair object encapsulating name and duration of exercise"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Pair getExerciseAtDate(LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return exercisePlan.get(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Adds an exercise to a date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date date exercise is scheduled for"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param selectedExercise a pair object encapsulating name and duration of exercise"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addExerciseAtDate(LocalDate date, Pair selectedExercise) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exercisePlan.put(date, selectedExercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 71
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/Lunch.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * lunch is a public class that inherits form abstract class meal."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Lunch extends Meal {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of lunch object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the lunch object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Lunch(String description, LocalDate date, HashMap\u003cString, String\u003e details, String costStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(description, date, details, costStr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.setMealType(MealType.LUNCH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 18,
      "HashirZahir": 1,
      "GaryStu": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/Meal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Task is a public class that represents the tasks in DIYeats."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * A task object encapsulates the description of the task, the type of task it is, and whether"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * the task is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Meal {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected MealType mealType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected HashMap\u003cString, Integer\u003e nutritionValue \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    protected String costStr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of Meal object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the meal"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date the date the meal is associated with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param nutritionValue the nutritional data associated with the meal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, LocalDate date, HashMap\u003cString, String\u003e nutritionValue, String costStr) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.costStr \u003d costStr.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (nutritionValue.size() !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String nutrient : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (!nutrient.equals(\"date\") \u0026\u0026 !nutrient.equals(\"cost\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int value \u003d Integer.parseInt(nutritionValue.get(nutrient));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    this.nutritionValue.put(nutrient, value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a constructor of Meal object used with suggestMeal."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param description the description of the meal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param nutritionValue the nutritional data associated with the meal"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal(String description, HashMap\u003cString, Integer\u003e nutritionValue) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.nutritionValue \u003d nutritionValue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.costStr \u003d \"0\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the no argument constructor for meal object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * used to satisfy requirement for default constructor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function checks whether the particular meal object is done and return the string accordingly."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return \u003ccode\u003e[YES]\u003c/code\u003e if the meal is done"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     *          \u003ccode\u003e[NO]\u003c/code\u003e if the meal is not done"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return (isDone ? \"[YES]\" : \"[NO]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return description of the meal"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a setter for isDone."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for isDone."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return isDone status of the meal"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the type."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return type of the meal"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the date."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return date of the meal"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the cost of the meal."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return cost of the meal"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getCostStr() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.costStr;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the nutritional value of a meal."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return A HashMap encapsulating the nutritional value of the meal"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getNutritionalValue() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.nutritionValue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Adds nutritional info to a meal."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param keyStr name of nutrient"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param value amount of nutrient"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addNutritionalValue(String keyStr, int value) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.nutritionValue.put(keyStr, value);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the value associated with \"calorie\"."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return nutrtional value of \"calorie\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getCalorieValue() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.nutritionValue.get(\"calorie\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for the meal type."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the meal type"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MealType getMealType() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.mealType;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Setter for the meal type and meal string."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setMealType(MealType mealType) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealType \u003d mealType;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (this.mealType) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case BREAKFAST:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.type \u003d \"B\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case LUNCH:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.type \u003d \"L\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case DINNER:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.type \u003d \"D\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.type \u003d \"L\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the status icon and the description of the meal"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String i : nutritionValue.keySet()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            temp +\u003d i + \":\" + nutritionValue.get(i) + \" \";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        temp +\u003d \"cost: \" + costStr;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return \"[\" + this.type + \"]\" + this.getStatusIcon() + \" \" + this.description + \" | \" + temp;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 187,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/MealList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * MealList is a public class that represents the list of meals under DIYeats."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * A MealList object encapsulates the ArrayList of meals."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class MealList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultValues \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is the constructor of MealList object if there is no argument."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * The MealList object will initialise a new empty arraylist of meals."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public MealList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addMeals(Meal data) throws ProgramException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e mealList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(data.getDate())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealList \u003d mealTracker.get(data.getDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(data.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealList \u003d mealTracker.get(data.getDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //match meal description to stored meals. If it matches a stored meal, compare nutrition data,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        // and fill in any missing fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (defaultValues.get(data.getDescription()) !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e storedNutritionValue \u003d defaultValues.get(data.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e nutritionValue \u003d data.getNutritionalValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (String i: storedNutritionValue.keySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (nutritionValue.get(i) \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    nutritionValue.put(i, storedNutritionValue.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (data.getNutritionalValue().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"It appears there are no default values associated with this meal\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     Please set a default value for this meal using the \\\"add\\\" command, or manually\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     specify nutritional values for this meal\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        mealList.add(data);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to add or update default values for a specified meal item."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param item The data to be set as default for a meal item with matching descriptor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addDefaultValues(Meal item) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String keyword \u003d item.getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cString, Integer\u003e data \u003d item.getNutritionalValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (defaultValues.get(keyword) \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            defaultValues.put(keyword, data);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            defaultValues.remove(keyword);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            defaultValues.put(keyword, data);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal getMeal(LocalDate date, int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.mealTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to delete the task of a particular index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param date date of the meal to be deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param index the index of task to be deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return Returns the meal that was deleted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal delete(LocalDate date, int index) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        Meal deletedMeal \u003d this.mealTracker.get(date).get(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.mealTracker.get(date).remove(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return deletedMeal;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void deleteAllMealsOnDate(LocalDate dateStr) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(dateStr)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.mealTracker.get(dateStr).clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * This function is used to mark done the task of a particular index."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date date of the meal to be marked done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param index the index of task to be marked done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return Returns the meal that was marked done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal markDone(LocalDate date, int index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Meal markedDoneMeal \u003d this.mealTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.mealTracker.get(date).get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return markedDoneMeal;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is used to check if a entry with the corresponding date is stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param date the date to be checked"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean checkDate(LocalDate date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker.containsKey(date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setMealTracker(HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker \u003d mealTracker;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setDefaultValues(HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultValues) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.defaultValues \u003d defaultValues;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setExerciseList(ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cMeal\u003e getMealsList(LocalDate inputDate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(inputDate)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(inputDate, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for the mealtracker HashMap."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return mealTracker the data structure storing the list of all meals"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e getMealTracker() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function is a getter for the defaultValues HashMap."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return defaultValues the data structure storing the list of all defaultValues"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e getDefaultValues() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return defaultValues;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getCalorieBalanceOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int totalPossibleConsume \u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cMeal\u003e meals \u003d mealTracker.get(date);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (meals !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            for (Meal meal : meals) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                if (meal.getNutritionalValue().containsKey(\"calorie\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    int currentMealCalorie \u003d meal.getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    totalPossibleConsume +\u003d currentMealCalorie;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return totalPossibleConsume;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.exerciseList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 144,
      "HashirZahir": 8,
      "GaryStu": 10,
      "koushireo": 3
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/MealType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * MealType is an enum class that establishes an ordering for meal in order of breakfast, lunch, and dinner."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public enum MealType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    BREAKFAST,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    LUNCH,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    DINNER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 11
    }
  },
  {
    "path": "src/main/java/diyeats/model/meal/SuggestMeal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.meal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * SuggestMeal class is inherited class of Meal class that has additional parameters to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " * handle the data storage for meal suggestion."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class SuggestMeal extends Meal implements Comparable\u003cSuggestMeal\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private String mealPreferenceParameter \u003d \"calorie\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestMeal() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public SuggestMeal(String description, HashMap\u003cString, Integer\u003e nutritionValue,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                       LocalDate suggestionDate, String mealTypeStr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        super(description, nutritionValue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.date \u003d suggestionDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        this.type \u003d mealTypeStr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Implement default ordering of meal suggestion based on preference score."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Currently sorting in ascending order of preference score"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meal Meal to compare against."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @return -1,0 or 1 depending on if current meal is less than, equal to or greater than meal."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public int compareTo(SuggestMeal meal) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return getMealPreferenceScore().compareTo("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                meal.getMealPreferenceScore());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // Current meal preference score is just the calories of the meal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Integer getMealPreferenceScore() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (getNutritionalValue().containsKey(mealPreferenceParameter)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return getNutritionalValue().get(mealPreferenceParameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            // TODO: Check if all meals have calorie parameter."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "HashirZahir": 44,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/user/Gender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    MALE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    FEMALE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "koushireo": 7
    }
  },
  {
    "path": "src/main/java/diyeats/model/user/Goal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.ACTIVITY_ARG_STR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.END_DATE_ARG_STR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.START_DATE_ARG_STR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.GoalCommandSyntax.WEIGHT_ARG_STR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Goal is a public class that defines all user set dietary goals."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private double originalWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private double weightTarget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int calorieTarget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int caloriesLeft;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int caloriesConsumed;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int activityLevelTarget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Empty constructor for Goal used in testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for Goal."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param argumentsMap HashMap of arguments to parse as goal details"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal(HashMap\u003cString, String\u003e argumentsMap) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        startDate \u003d LocalDate.parse(argumentsMap.get(START_DATE_ARG_STR), LOCAL_DATE_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        endDate \u003d LocalDate.parse(argumentsMap.get(END_DATE_ARG_STR), LOCAL_DATE_FORMATTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        weightTarget \u003d Double.parseDouble(argumentsMap.get(WEIGHT_ARG_STR));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        activityLevelTarget \u003d Integer.parseInt(argumentsMap.get(ACTIVITY_ARG_STR));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Setter for originalWeight."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param originalWeight original weight of user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setOriginalWeight(double originalWeight) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Setter for calorieTarget."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param calorieTarget calories user must consume to reach target"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setCalorieTarget(int calorieTarget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.calorieTarget \u003d calorieTarget;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Calculate average calorie consumed per day."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return calories consumed per day"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getAverageCalorieBalance() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.caloriesConsumed / (daysElapsedSinceStart() + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a getter for date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getWeightTarget() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.weightTarget;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for activityLeveltarget."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return activity level target designated by user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getActivityLevelTarget() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.activityLevelTarget;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Updates caloriesConsumed variable and caloriesLeft."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the container storing all meal records"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateStats(MealList meals) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int totalConsume \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d meals.getMealTracker();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (LocalDate iterator \u003d startDate; iterator.isBefore(currentDate) || iterator.isEqual(currentDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "             iterator \u003d iterator.plusDays(1)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            totalConsume +\u003d sumCaloriesInADay(mealTracker, iterator);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.caloriesConsumed \u003d totalConsume;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.caloriesLeft \u003d this.calorieTarget - totalConsume;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Calculate sum of calorie consumed in one day."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param mealTracker container for all meal records"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param iterator date to check for meal records"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return total calories consumed on that day"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int sumCaloriesInADay(HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker, LocalDate iterator) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int caloriesConsumed \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (!mealTracker.containsKey(iterator)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            /*If a day does not contain any data, assume the user as consumed the average amount"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            of calories to reach goal on that day */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            caloriesConsumed +\u003d this.calorieTarget / durationOfGoal();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ArrayList\u003cMeal\u003e meals \u003d mealTracker.get(iterator);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (meals.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                /*If a day does not contain any data, assume the user as consumed the average amount"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                 of calories to reach goal on that day */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                caloriesConsumed +\u003d this.calorieTarget / durationOfGoal();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                for (int i \u003d 0; i \u003c meals.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    caloriesConsumed +\u003d meals.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return caloriesConsumed;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Calculates days since start of goal to now."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return number of days since start"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int daysElapsedSinceStart() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int daysElapsed \u003d (int) DAYS.between(startDate,currentDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return daysElapsed;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Calculates days left to end of goal from now."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return number of days left"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int daysLeftToGoal() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int daysLeft \u003d (int) DAYS.between(currentDate,endDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return daysLeft;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Calculates days between start and end date of goal."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return duration of goal"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int durationOfGoal() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int duration \u003d (int) DAYS.between(startDate,endDate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This function overrides the toString() function in the object class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the status icon and the description of the goal"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return startDate + \"|\" + endDate + \"|\" + weightTarget + \"|\" + calorieTarget + \"|\" + activityLevelTarget;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 172
    }
  },
  {
    "path": "src/main/java/diyeats/model/user/User.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Account;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This is a class that will store user information to be used for processing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public transient Goal goal \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cLocalDate, Double\u003e weight \u003d new HashMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private  LocalDate lastDate \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int height \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int age \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gender gender \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean isSetup;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String name \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private int activityLevel \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private double[] factor \u003d {1.2, 1.375, 1.55, 1.725, 1.9};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private double originalWeight \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to create an empty user profile."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a contructor to create an user profile with all the info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * Used during loading."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param name name of user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param age age of user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param height height of user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param gender biological gender of user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param activityLevel how active the user is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param originalWeight their original weight"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User(String name, int age, int height, Gender gender, int activityLevel,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                double originalWeight, LocalDate lastDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.lastDate \u003d lastDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (name !\u003d null \u0026\u0026 age !\u003d -1 \u0026\u0026 getAllWeight().size() !\u003d 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                \u0026\u0026 height !\u003d -1 \u0026\u0026 gender !\u003d null \u0026\u0026 activityLevel !\u003d 5) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isSetup \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            isSetup \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at time of input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setWeight(double weight) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight.put(currentDate, weight);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (lastDate \u003d\u003d null || lastDate.isBefore(currentDate)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.lastDate \u003d currentDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at input date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param inputDate LocalDate of the date in DD/MM/YYYY format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setWeight(double weight, LocalDate inputDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.put(inputDate, weight);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (lastDate \u003d\u003d null || lastDate.isBefore(inputDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.lastDate \u003d inputDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setGoal(Goal goal) throws ProgramException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (goal.getActivityLevelTarget() \u003c activityLevel \u0026\u0026 activityLevel !\u003d 5) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"Set goal failed, cannot set target activity level to\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     be lower than current activity level.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (!checkGoalFeasibility(goal)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"Set goal failed. Average calorie loss in a day\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"     must not exceed 40% of your current calorie expenditure!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.goal \u003d goal;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (isSetup) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                this.goal.setOriginalWeight(originalWeight);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                calculateTargetCalories();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setActivityLevel(int activityLevel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateStats(MealList meals) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.goal.updateStats(meals);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight.get(getLastDate());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getOriginalWeight() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.originalWeight;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getWeightTarget() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return goal.getWeightTarget();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getDaysLeftToGoal() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return goal.daysLeftToGoal();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to obtain all the weight at different date."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cLocalDate, Double\u003e getAllWeight() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.activityLevel;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public int getDailyCalorie() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        double calorie;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.gender \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() + 5;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            calorie \u003d 10 * getWeight() + 6.25 * getHeight() + 5 * getAge() - 161;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (goal \u003d\u003d null || goal.getActivityLevelTarget() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return (int) (this.factor[this.activityLevel] * calorie);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return (int) (this.factor[goal.getActivityLevelTarget()] * calorie);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getCalorieBalance() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return getDailyCalorie() + getAvgCalorieChangeToReachTarget();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getActivityLevelDifference() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.factor[goal.getActivityLevelTarget()] - this.factor[this.activityLevel];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.gender;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to check if it\u0027s an empty profile."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getIsSetup() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.isSetup;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private boolean checkGoalFeasibility(Goal goal) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        double calorieLossPerDayToReachWeight \u003d 7700 * (getWeight() - goal.getWeightTarget()) / goal.durationOfGoal();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        double maximumCalorieLossPerDay \u003d 0.4 * getDailyCalorie();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return calorieLossPerDayToReachWeight \u003c maximumCalorieLossPerDay;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int getCalorieChangeToReachTarget() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return (int) (7700 * (getWeight() - getWeightTarget()));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int getAvgCalorieChangeToReachTarget() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (getDaysLeftToGoal() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return getCalorieChangeToReachTarget() / getDaysLeftToGoal();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void calculateTargetCalories() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int target \u003d getDailyCalorie() * this.goal.durationOfGoal()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                - getCalorieChangeToReachTarget();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.goal.setCalorieTarget(target);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate getLastDate() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.lastDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            lastDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return lastDate;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return this.lastDate;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getTargetActivityLevel() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return goal.getActivityLevelTarget();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return 5;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.name + \"|\" + this.height + \"|\" + this.age + \"|\" + this.gender  + \"|\" + this.isSetup"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + \"|\" + this.activityLevel + \"|\" + this.originalWeight + \"|\" + this.lastDate;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 146,
      "GaryStu": 2,
      "koushireo": 107,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/wallet/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Account is a public class that represent\u0027s a user\u0027s money account."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private BigDecimal amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * this is the constructor that initializes account amount as 0."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Account() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d new BigDecimal(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * this constructor initializes account amount to amount specified."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param amount amount to be assigned to account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Account(BigDecimal amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * the getter for the amount."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return amount of money in the account."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public BigDecimal getAmount() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * the setter for the amount."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param amount amount of money in the account."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void setAmount(BigDecimal amount) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * deposit amount to account."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param deposit amount to be deposited to account."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void deposit(BigDecimal deposit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount.add(deposit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * withdraw amount from the account."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param withdrawal the amount to be withdrawn from account."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void withdraw(BigDecimal withdrawal) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.amount \u003d amount.subtract(withdrawal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * check whether the account has sufficient balance after a withdrawal."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param withdrawal the amount to be withdrawn from account."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if there is sufficient balance."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     *         Return \u003ccode\u003efalse\u003c/code\u003e if there is insufficient balance."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public boolean isSufficientBalance(BigDecimal withdrawal) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return withdrawal.compareTo(amount) \u003c\u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * update the account balance based on the transaction."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param transaction transaction recorded."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void updateAccountBalance(Transaction transaction) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BigDecimal transactionAmount \u003d transaction.getTransactionAmount();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transaction.getType().equals(\"PAY\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            withdraw(transactionAmount);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else if (transaction.getType().equals(\"DEP\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            deposit(transactionAmount);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 80
    }
  },
  {
    "path": "src/main/java/diyeats/model/wallet/Deposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Deposit is a public class that inherits from the transaction class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Deposit extends Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for deposit class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param amountString the amount of money to be deposited."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date when the deposit occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Deposit(String amountString, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(amountString, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super.type \u003d \"DEP\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 17,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/wallet/Payment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Payment is a public class that inherits from the transaction class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Payment extends Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Constructor for payment class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param amountString the amount of money to be paid."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date when the payment occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Payment(String amountString, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super(amountString, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        super.type \u003d \"PAY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 17,
      "koushireo": 1
    }
  },
  {
    "path": "src/main/java/diyeats/model/wallet/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Transaction is a public class that representing a transaction by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected BigDecimal transactionAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected String type \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * This is the constructor of transaction object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param amountString the amount of money in the transaction in SGD."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date the transaction occur."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Transaction(String amountString, LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transactionAmount \u003d new BigDecimal(amountString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * the getter for transaction type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return transaction type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * the getter for the transaction date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return transaction date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * the getter for transaction amount."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return transaction amount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public BigDecimal getTransactionAmount() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.transactionAmount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * Overrides toString() function in the object class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return the summary of the transaction."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return \"[\" + getType() + \"]\" + \" SGD\" + this.transactionAmount + \" | \" + getDate().format(LOCAL_DATE_FORMATTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "GaryStu": 55
    }
  },
  {
    "path": "src/main/java/diyeats/model/wallet/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * TransactionList is a public class that keeps track of transactions based on its date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private HashMap\u003cLocalDate, ArrayList\u003cTransaction\u003e\u003e transactionTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * add transaction to transactionTracker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param transaction the transaction to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        LocalDate date \u003d transaction.getDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (!transactionTracker.containsKey(date)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        transactionTracker.get(date).add(transaction);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * gets a list of transactions based on a date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date in which the list of transactions is to be taken from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return the transaction list that has been taken."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public ArrayList\u003cTransaction\u003e getTransactionList(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transactionTracker.containsKey(date)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return transactionTracker.get(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            transactionTracker.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return transactionTracker.get(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * the getter of the transactionTracker."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return the transactionTracker to be returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public HashMap\u003cLocalDate, ArrayList\u003cTransaction\u003e\u003e getTransactionTracker() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.transactionTracker;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * delete the transaction specified by the index and its date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date of the deleted transaction."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param index the index of the deleted transaction."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @return Returns the transaction that was deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Transaction delete(LocalDate date, int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Transaction deletedTransaction \u003d this.transactionTracker.get(date).get(index - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transactionTracker.get(date).remove(index - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return deletedTransaction;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 64
    }
  },
  {
    "path": "src/main/java/diyeats/model/wallet/Wallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Wallet {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private TransactionList transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Account account \u003d new Account();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Wallet() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public TransactionList getTransactions() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return transactions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public BigDecimal getAccountBalance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return this.account.getAmount();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void setAccountBalance(String accountBalance) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account.setAmount(new BigDecimal(accountBalance));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void updateAccountBalance(Transaction transaction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account.updateAccountBalance(transaction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void updateAccountBalance(Wallet wallet) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.transactions \u003d wallet.getTransactions();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        this.account \u003d wallet.getAccount();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public Boolean addPaymentTransaction(Payment payment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (this.account.isSufficientBalance(payment.getTransactionAmount())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.account.withdraw(payment.getTransactionAmount());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            this.transactions.addTransaction(payment);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 44,
      "koushireo": 3
    }
  },
  {
    "path": "src/main/java/diyeats/storage/Load.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FilePathNames;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FilePaths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FileUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This object is in charge of all reading from save operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Load {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private BufferedReader bufferedReader \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String lineStr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static FilePaths filePaths \u003d new FilePaths();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    // Flag to set if jar resource should be called if user file does not exist in host system."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private boolean isUseResourceAsBackup \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Load(Gson gson) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.gson \u003d gson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all meal records from save file to MealList object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadMealListData(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String userMealFilePathStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_USER_MEALS_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Type mealListHashMap \u003d new TypeToken\u003cHashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        bufferedReader \u003d FileUtil.readFile(userMealFilePathStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e data \u003d gson.fromJson(bufferedReader, mealListHashMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (data !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                meals.setMealTracker(data);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedReader.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"It appears the savefile has been corrupted. \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"Previously recorded meals will not be loaded.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all default meal values from save file to MealList object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadDefaultMealData(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String defaultMealFilePathStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_DEFAULT_MEAL_FILE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Type defaultItemHashMap \u003d new TypeToken\u003cHashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        bufferedReader \u003d FileUtil.readFile(defaultMealFilePathStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e data \u003d gson.fromJson(bufferedReader, defaultItemHashMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (data !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                meals.setDefaultValues(data);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                bufferedReader.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"It appears the savefile has been corrupted. \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"Default meal values will not be loaded.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all exercise records and exercise types from save file to MealList object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadExercises(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String exercisesFilePathStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_EXERCISES_FILE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Type exerciseListType \u003d new TypeToken\u003cExerciseList\u003e(){}.getType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        bufferedReader \u003d FileUtil.readFile(exercisesFilePathStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ExerciseList data \u003d gson.fromJson(bufferedReader, exerciseListType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (data !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                meals.setExerciseList(data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"It appears the savefile has been corrupted. \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + \"Exercise history will not be loaded.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all previously established goal from savefile to user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadGoals(User user) throws ProgramException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String goalFilePathStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_GOAL_FILE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Type goalType \u003d new TypeToken\u003cGoal\u003e(){}.getType();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        bufferedReader \u003d FileUtil.readFile(goalFilePathStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Goal goal \u003d gson.fromJson(bufferedReader, goalType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (goal !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                user.setGoal(goal);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"Error reading goal file\" + e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all transaction data from savefile to wallet."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadTransactions(Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String transactionsFilePathStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_TRANSACTION_FILE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Type walletType \u003d new TypeToken\u003cWallet\u003e(){}.getType();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        bufferedReader \u003d FileUtil.readFile(transactionsFilePathStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Wallet data \u003d gson.fromJson(bufferedReader, walletType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (data !\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                wallet.updateAccountBalance(data);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"Error reading transactions file\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all user data from savefile and returns a instance of user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return the user object generated from savefile"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public User loadUser() throws ProgramException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String userFileStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_USER_FILE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        User data;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Type userType \u003d new TypeToken\u003cUser\u003e(){}.getType();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        bufferedReader \u003d FileUtil.readFile(userFileStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            data \u003d gson.fromJson(bufferedReader, userType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            if (data !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return data;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                return new User();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"Error reading user file.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Loads all autocorrectable words from file into autocorrect."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param autocorrect the autocorrect object to be updated with autocorrectable words"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadAutoCorrect(Autocorrect autocorrect) throws ProgramException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String autocorrectFileStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_AUTOCORRECT_FILE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader \u003d FileUtil.readFile(autocorrectFileStr, isUseResourceAsBackup);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            while ((lineStr \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                autocorrect.load(lineStr.trim());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(e.getMessage());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parses a help file into an arrayList of Strings."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param lines the arrayList container to store the contents of the help file"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param specifiedHelp the type of help requested"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadHelp(ArrayList\u003cString\u003e lines, String specifiedHelp) throws ProgramException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        BufferedReader bufferedReader \u003d LoadHelpUtil.load(specifiedHelp);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            while ((lineStr \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                lines.add(lineStr);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(\"Error reading help file\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This method is used for JUnit testing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Sets all filepaths to test directory."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        filePaths.setTestPathConfigMap();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 202,
      "HashirZahir": 2
    }
  },
  {
    "path": "src/main/java/diyeats/storage/LoadHelpUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FilePathNames;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FilePaths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FileUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author Garystu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * This class is in charge of parsing user-designated help command to correct filepath."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class LoadHelpUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static String defaultHelpFileStr \u003d \"help.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public static BufferedReader load(String specifiedHelp) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String helpFileRelativePathStr \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (specifiedHelp.isBlank()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            helpFileRelativePathStr \u003d defaultHelpFileStr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            helpFileRelativePathStr \u003d specifiedHelp + \".txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        FilePaths filePaths \u003d new FilePaths();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String masterHelpFileStr \u003d filePaths.getFilePathStr(FilePathNames.FILE_PATH_MASTER_HELP_FILE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        String helpFilePathStr \u003d FileUtil.concatPaths(masterHelpFileStr, helpFileRelativePathStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        BufferedReader bufferedReader \u003d FileUtil.readResourceFile(helpFilePathStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        return bufferedReader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 6,
      "HashirZahir": 2,
      "GaryStu": 25
    }
  },
  {
    "path": "src/main/java/diyeats/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.LocalDateAdapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.model.wallet.TransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * Storage is a public class that handles all file I/O during application runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Load loader;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Write writer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int stage \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private boolean isMealDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        //sets gson to generate json with indentation, and use custom typeAdapter for Localdate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Gson gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                .registerTypeAdapter(LocalDate.class, new LocalDateAdapter()).create();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader \u003d new Load(gson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer \u003d new Write(gson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load all info required to initialize a MealList object from input/output file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object ot be initialized"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadMealInfo(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                stage++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                isMealDone \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                loader.loadMealListData(meals);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                stage++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                loader.loadDefaultMealData(meals);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                isMealDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                loader.loadExercises(meals);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                isMealDone \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                throw new ProgramException(\"The storage function has entered an invalid state\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load user info from the input/output file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return an instance of User"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public User loadUser() throws ProgramException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        User user \u003d loader.loadUser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadGoals(user);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load all the words to be autocorrected to from the input/output file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param autocorrect autocorrect object to be loaded with correctable words"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadWord(Autocorrect autocorrect) throws ProgramException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadAutoCorrect(autocorrect);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load relevant help file from input/output file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param lines container used to store content from help file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param specifiedHelp type of help requested"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadHelp(ArrayList\u003cString\u003e lines, String specifiedHelp) throws ProgramException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadHelp(lines, specifiedHelp);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load all transactions to wallet from input/output file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet container to store transactions"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadTransactions(Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.loadTransactions(wallet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write meal records to the input/output file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals container storing meal records"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeFile(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeFile(meals);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write exercise records to the input/output file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals container storing exercise records"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeExercises(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeExercises(meals);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write default meal values to the input/output file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals container storing default meal values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeDefaults(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeDefaults(meals);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write goal to the input/output file."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user container storing goal"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeGoal(User user) throws ProgramException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeGoal(user);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write user information to input/output file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user container storing user information"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeUser(User user) throws ProgramException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeUser(user);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write transactions to the input/output file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet container storing transactions"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeTransaction(Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        writer.writeTransaction(wallet);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for isMealDone."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return true if meallist object is completely loaded, false otherwise"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean isMealDone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.isMealDone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 161,
      "GaryStu": 4
    }
  },
  {
    "path": "src/main/java/diyeats/storage/Write.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FilePathNames;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FilePaths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Goal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " * This object is in charge of all writing to save operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class Write {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    FilePaths filePaths \u003d new FilePaths();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for Write class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param gson the gson object used for json transcription."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Write(Gson gson) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.gson \u003d gson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse all meal records to json and update the relevant input/output file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the structure storing the meal records"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeFile(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWriteStr \u003d gson.toJson(meals.getMealTracker());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert toWriteStr !\u003d null : \"mealTracker in mealList cannot be converted to json\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        FileUtil.writeFile(toWriteStr, filePaths.getFilePathStr(FilePathNames.FILE_PATH_USER_MEALS_FILE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse all default meal values to json and update the relevant input/output file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the structure storing the meal records"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeDefaults(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWriteStr \u003d gson.toJson(meals.getDefaultValues());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert toWriteStr !\u003d null : \"defaultValues in mealList cannot be converted to json\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        FileUtil.writeFile(toWriteStr, filePaths.getFilePathStr(FilePathNames.FILE_PATH_DEFAULT_MEAL_FILE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse exerciseList to json and update the relevant input/output file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the structure storing the meal records"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeExercises(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWriteStr \u003d gson.toJson(meals.getExerciseList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert toWriteStr !\u003d null : \"exerciseList in mealList cannot be converted to json\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        FileUtil.writeFile(toWriteStr, filePaths.getFilePathStr(FilePathNames.FILE_PATH_EXERCISES_FILE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse goal to json and update the relevant input/output file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the structure storing all user parameters as well as goal"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeGoal(User user) throws ProgramException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Goal goal \u003d user.getGoal();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWriteStr \u003d gson.toJson(goal);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert toWriteStr !\u003d null : \"goal in User cannot be converted to json\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        FileUtil.writeFile(toWriteStr, filePaths.getFilePathStr(FilePathNames.FILE_PATH_GOAL_FILE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Parse User to json and update the relevant input/output file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user the structure storing all user parameters as well as goal"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeUser(User user) throws ProgramException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWriteStr \u003d gson.toJson(user);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert toWriteStr !\u003d null : \"User cannot be converted to json\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        FileUtil.writeFile(toWriteStr, filePaths.getFilePathStr(FilePathNames.FILE_PATH_USER_FILE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Save all the recorded transactions."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet the database of all transactions."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if error occurs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeTransaction(Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String toWriteStr \u003d gson.toJson(wallet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assert toWriteStr !\u003d null : \"wallet cannot be converted to json\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        FileUtil.writeFile(toWriteStr, filePaths.getFilePathStr(FilePathNames.FILE_PATH_TRANSACTION_FILE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This method is used for JUnit testing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Sets all filepaths to test directory."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        filePaths.setTestPathConfigMap();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 104
    }
  },
  {
    "path": "src/main/java/diyeats/ui/GraphUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/** UserUi is a public class that facilitates the output of Graph data."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class GraphUi {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String padding \u003d \"     \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String boundary \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String[][] graph \u003d new String[50][60];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String[] month \u003d { \"January\", \"February\", \"March\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                               \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                               \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                               \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void show(String[][] graph, int month, String type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(this.month[month - 1] + \" \" + type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c graph.length; i +\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.print(\" |\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            for (int j \u003d 0; j \u003c graph[i].length; j +\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                System.out.print(graph[i][j]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.print(\"  \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c graph[0].length; i +\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.print(\"-\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"  1 2 3 4 5 6 7 8 9 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(\"                    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "koushireo": 32
    }
  },
  {
    "path": "src/main/java/diyeats/ui/InputHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class InputHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getString() throws ProgramException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String string \u003d in.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getInt() throws ProgramException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            int value \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getDate() throws ProgramException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        SimpleDateFormat dateparser \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Date day;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            day \u003d dateparser.parse(in.nextLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            date \u003d dateparser.format(day);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            throw new ProgramException(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 44,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.datatypes.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Payment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.commons.constants.DateConstants.LOCAL_DATE_FORMATTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static final String UI_PADDING \u003d \"     \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private static final String UI_BOUNDARY \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(Ui.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    void showPadding() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.print(UI_PADDING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showList(ArrayList\u003cMeal\u003e meals, String messageStr) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        showPadding();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(messageStr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d meals.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Meal currentMeal \u003d meals.get(i - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            showPadding();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(i + \". \" + currentMeal);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showMealList(ArrayList\u003cMeal\u003e meals)  {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String messageStr \u003d \"Here are the meals in your list: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showList(meals, messageStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showSuggestedMealList(ArrayList\u003cMeal\u003e meals, LocalDate date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        String messageStr \u003d \"Here are the suggested meals for \" + date.format(LOCAL_DATE_FORMATTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showList(meals, messageStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showMessage(\"Please select which meal you would like by providing \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                + \"index of meal item in the list above.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showMessage(\"Enter 0 to decline suggestions.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showDone(Meal currentMeal) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"Nice! I\u0027ve marked this meal as done:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + currentMeal);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showNotDone(Meal currentMeal) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"The meal will remain as it is:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + currentMeal);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showAlreadyMarkedDone(Meal currentMeal) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"The meal is already marked done:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + currentMeal);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showAdded(Meal currentMeal, ArrayList\u003cMeal\u003e meals, User user, LocalDate dateStr) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Got it. I\u0027ve added this meal:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + currentMeal);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showCaloriesLeft(meals, user, dateStr);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showUpdated(Meal oldMeal, Meal newMeal, ArrayList\u003cMeal\u003e meals, User user, LocalDate dateStr) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(UI_PADDING + \"Got it. I\u0027ve updated this old meal: \" + oldMeal);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(UI_PADDING + \"With this: \" + newMeal);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        showCaloriesLeft(meals, user, dateStr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * Display remaining calories for specified date based on current meals plan."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param meals List of meals on the date."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param user User information which we want to query."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     * @param dateStr Date in which remaining calories are computed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showCaloriesLeft(ArrayList\u003cMeal\u003e meals, User user, LocalDate dateStr) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int totalActualConsume \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        int totalPossibleConsume \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c meals.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (meals.get(i).getNutritionalValue().containsKey(\"calorie\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                int currentMealCalorie \u003d meals.get(i).getNutritionalValue().get(\"calorie\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                totalPossibleConsume +\u003d currentMealCalorie;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                if (meals.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                    totalActualConsume +\u003d currentMealCalorie;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"On \" + dateStr.format(LOCAL_DATE_FORMATTER) + \", you have:\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(UI_PADDING + UI_PADDING + (user.getDailyCalorie() - totalActualConsume)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                + \" calories left (marked as done)\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        System.out.println(UI_PADDING + UI_PADDING + (user.getDailyCalorie() - totalPossibleConsume)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                + \" calories left (total)\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showAddedItem(Meal currentMeal) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Got it. I\u0027ve added the default values for this meal:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + currentMeal);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showDeleted(Meal currentMeal, ArrayList\u003cMeal\u003e meals) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Noted. I\u0027ve removed this meal:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + currentMeal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Now you have \" + meals.size()  + \" meals in the list.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showDeletedTransaction(Transaction deletedTransaction, ArrayList\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"Noted. I\u0027ve removed this transaction:\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + deletedTransaction);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"Now you have \" + transactions.size() + \" transactions in the list.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showCleared(String startDateStr, String endDateStr) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Noted. Meals from \" + startDateStr + \" to \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                + endDateStr + \" have been cleared\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + message);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Failed to load file.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showLoadingTransactionError() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Failed to load transaction file.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserLoadingError() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Unable to load user file.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showCalorie(User user) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"This is your daily calorie limit: \" + user.getDailyCalorie());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showHelp(ArrayList\u003cString\u003e helpLines) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        helpLines.forEach(line -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + line);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showAddedGoal(Goal goal) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Got it. I\u0027ve set the goal to be met:\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + goal);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void showHistory(ArrayList\u003cString\u003e commandHistoryList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        if (commandHistoryList.isEmpty()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"No commands in history\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"History of Commands you have typed: \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            for (int idx \u003d 0;idx \u003c commandHistoryList.size();idx++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                System.out.println(UI_PADDING + UI_PADDING + (idx + 1) + \". \" + commandHistoryList.get(idx));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showWeightUpdate(User user, int weight, LocalDate date) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + user.getName() + \", your weight has been updated on \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + date.format(LOCAL_DATE_FORMATTER) + \" to \" + weight + \"kg.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showRejected() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Understood, I\u0027ve stopped the update.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showConfirmation(String weight, LocalDate date) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"You have entered \" + weight"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + \" on \" + date.format(LOCAL_DATE_FORMATTER) + \".\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Would you like to overwrite the record on \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + date.format(LOCAL_DATE_FORMATTER) + \"?(Y/N)\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showTransactionAdded(Transaction transaction, BigDecimal accountBalance) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Got it. I\u0027ve added this transaction:\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + transaction);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Your account balance is: \" + accountBalance + \" SGD\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * displays the transactions on a certain date and the current account balance."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param transactions the transactions to be displayed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param date the date transactions are to be displayed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * @param wallet the wallet in which account balance is extracted."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showTransactions(ArrayList\u003cTransaction\u003e transactions, LocalDate date, Wallet wallet) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        if (transactions.isEmpty()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.INFO, \"There is no transaction on \" + date + \".\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(UI_PADDING + \"There is no transaction on \" + date + \".\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            logger.log(Level.INFO, \"There are transactions on \" + date + \".\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(UI_PADDING + \"These are the transactions on \" + date + \":\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            for (int idx \u003d 0; idx \u003c transactions.size(); idx++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                System.out.println(UI_PADDING + (idx + 1) + \". \" + transactions.get(idx));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            showAccountBalance(wallet);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showActivityLevel() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Input Activity Level\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"1) Sedentary (Little or no exercise, desk job\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"2) Lightly active (Light exercise/ sports 1-3 days/week\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"3) Moderately active (Moderate exercise/ sports 6-7 days/week)\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"4) Very active (Hard exercise every day, or exercising 2 xs/day) \");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"5) Extra active (Hard exercise 2 or more times per day, or training for\\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + UI_PADDING + \"   marathon, or triathlon, etc. )\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showStats(User user) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getGoal() \u003d\u003d null) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            goalNotFound();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            showStatsWithGoal(user);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void goalNotFound() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"It appears that a diet plan has not been setup for this session of DIYeats.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Please use the `setgoal` command to create a diet plan customized for you!\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void showStatsWithGoal(User user) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"These are your user statistics as of today:\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Original weight: \" + user.getOriginalWeight());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Current Weight: \" + user.getWeight());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Target Weight: \" + user.getWeightTarget());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getDaysLeftToGoal() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Days left to end of diet plan: \" + user.getDaysLeftToGoal());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Avg current calorie balance: \""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + user.getGoal().getAverageCalorieBalance() + \" calories\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Avg calorie balance that must be maintained to reach goal: \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + user.getCalorieBalance() + \" calories\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            showOnTrack(user);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"It appears the diet plan has expired or is expiring today.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Use the setgoal command to set a new diet plan!\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private void showOnTrack(User user) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (user.getOriginalWeight() \u003e user.getWeightTarget() \u0026\u0026 user.getWeight() \u003e user.getWeightTarget()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Great Job! You are on track to reaching your diet goals!\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else if (user.getOriginalWeight() \u003c user.getWeightTarget() \u0026\u0026 user.getWeight() \u003c user.getWeightTarget()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Great Job! You are on track to reaching your diet goals!\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Oh no, you are deviating from your diet plan. Try harder!\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showExerciseRequired(int calories, LocalDate date) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"To meet your goals, you should do: \" + calories + \" calories\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (date.isEqual(LocalDate.now())) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"worth of exercises today.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"worth of exercises on \" + date.format(LOCAL_DATE_FORMATTER) + \".\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showExerciseOptions(ArrayList\u003cPair\u003e exerciseArrayList) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Here are the exercise options available to you:\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (Pair itr : exerciseArrayList) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.print(UI_PADDING + counter + \". \");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.print(itr.getKey() + \": \" + itr.getValue() + \" mins \\n\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showDeleteCandidateKeys(ArrayList\u003cString\u003e deleteCandidateKeys) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Here are the items associated with the keyword provided:\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        for (String itr : deleteCandidateKeys) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.print(UI_PADDING + counter + \": \");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(itr);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_PADDING + \"Please enter the index of the item you wish to delete.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        System.out.println(UI_BOUNDARY);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void showExerciseOnDate(ExerciseList exerciseList, LocalDate date) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Pair exerciseOnDate \u003d exerciseList.getExerciseAtDate(date);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (exerciseOnDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"You have not set an exercise routine for this day yet\\n\""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + UI_PADDING + \"Use the suggestexercise command to choose an exercise routine!\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            System.out.println(UI_PADDING + \"Exercise planed for the day:\\n\" + UI_PADDING"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    + exerciseOnDate.getKey() + \" for \" + exerciseOnDate.getValue() + \" mins.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showPayment(Payment payment) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"You have paid \" + payment.getTransactionAmount() + \"SGD. \""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                            + \"The amount has been deducted from your account.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showAccountBalance(Wallet wallet) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"Your current account balance is: \" + wallet.getAccountBalance());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void showInsufficientBalance(Transaction payment) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        System.out.println(UI_PADDING + \"Account Balance insufficient for a \" + payment.getTransactionAmount()"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "                + \"SGD withdrawal\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showSuccess(String type, String value) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(UI_PADDING + \"Your \" + type + \" has been updated to \" + value + \".\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 173,
      "HashirZahir": 52,
      "GaryStu": 100,
      "koushireo": 23,
      "-": 1
    }
  },
  {
    "path": "src/main/java/diyeats/ui/UserUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "//@@author koushireo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/** UserUi is a public class that facilitates the output of User info."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserUi {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String padding \u003d \"     \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static final String boundary \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(boundary);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showMessage(String messageStr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        System.out.println(padding + messageStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Hello! I\u0027m DIYeats\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"What can I do for you?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeNew() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Welcome!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"I see that you\u0027re new.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter your particulars to get started!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showActivityLevel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Input Activity Level\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"1) Sedentary (Little or no exercise, desk job\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"2) Lightly active (Light exercise/ sports 1-3 days/week\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"3) Moderately active (Moderate exercise/ sports 6-7 days/week)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"4) Very active (Hard exercise every day, or exercising 2 xs/day) \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"5) Extra active (Hard exercise 2 or more times per day, or training for\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                + padding + \"   marathon, or triathlon, etc. )\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWelcomeBack(User user) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Welcome back, \"  + user.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showUserSetupDone(User user) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Thanks, \" + user.getName() + \"!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"We are done setting up!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showSetupMessage() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter the user info.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLackAge() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter an age using /age.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLackName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter a name using /name.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLackWeight() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter a weight(cannot be less than 2kg)\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"using /weight/.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLackHeight() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter a height(cannot be less than 54cm\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"or more than 272cm) using /height.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLackActivity() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter an activity level using /activity.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showActivityLevel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showLackGender() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter a gender(M/F) using /gender.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void showWrongGenderInfo() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showMessage(\"Please enter either M/F for gender.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showActivityLevel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "koushireo": 110
    }
  },
  {
    "path": "src/test/java/DiyeatsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DiyeatsTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest2() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/diyeats/functions/FunctionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.parsers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.InputHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class FunctionTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private MealList tasks \u003d new MealList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private InputHandler in \u003d new InputHandler(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Wallet wallet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.load(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            tasks \u003d new MealList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user \u003d storage.loadUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showUserLoadingError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void addCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean exceptionThrown1 \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        boolean exceptionThrown2 \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Parser parser \u003d new Parser(autocorrect);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"add burger /calorie 100 /sodium 100 /fats 100\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            c.execute(tasks, storage, user, wallet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"breakfast burger\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            c.execute(tasks, storage, user, wallet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"breakfast burger /calorie 100\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            c.execute(tasks, storage, user, wallet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exceptionThrown1 \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            c \u003d parser.parse(\"breakfast taco\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            c.execute(tasks, storage, user, wallet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exceptionThrown2 \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertFalse(exceptionThrown1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertTrue(exceptionThrown2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}*/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 72,
      "GaryStu": 1,
      "koushireo": 5
    }
  },
  {
    "path": "src/test/java/diyeats/logic/autocorrect/AutocorrectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.autocorrect;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class AutocorrectTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void autocorrectTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            storage.loadWord(autocorrect);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"calorei\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"calorie\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"lunxh\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"lunch\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.setWord(\"cacium\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        autocorrect.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(autocorrect.getWord(), \"calcium\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 7,
      "koushireo": 23
    }
  },
  {
    "path": "src/test/java/diyeats/logic/command/EditMealTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "package diyeats.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import diyeats.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import diyeats.model.meal.MealType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class EditMealTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Meal meal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Meal correctUpdatedMeal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Meal updatedMeal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private HashMap\u003cString,String\u003e details;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private HashMap\u003cString,String\u003e nutritionMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private String costStr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private static EditCommand editCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void setupMeals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        details \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutritionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutritionMap.put(\"calorie\", \"900\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutritionMap.put(\"fats\", \"300\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        costStr \u003d \"8.50\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meal \u003d new Meal(\"biryani\", currDate,  nutritionMap, costStr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meal.setMealType(MealType.LUNCH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void editMealEmptyTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        correctUpdatedMeal \u003d meal;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal \u003d editCommand.getUpdatedMeal(meal, details);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getDescription(), updatedMeal.getDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getNutritionalValue(), updatedMeal.getNutritionalValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void editMealRenameTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String newNameStr \u003d \"chicken-biryani\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        details.put(\"name\", newNameStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        correctUpdatedMeal \u003d new Meal(newNameStr, currDate, nutritionMap, costStr);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal \u003d editCommand.getUpdatedMeal(meal, details);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getDescription(), updatedMeal.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getNutritionalValue(), updatedMeal.getNutritionalValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void editMealCostTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        String newCostStr \u003d \"7.45\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        details.put(\"cost\", newCostStr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        correctUpdatedMeal \u003d new Meal(meal.getDescription(), currDate, nutritionMap, newCostStr);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal \u003d editCommand.getUpdatedMeal(meal, details);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getDescription(), updatedMeal.getDescription());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getNutritionalValue(), updatedMeal.getNutritionalValue());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void editMealTagTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        details.put(\"calorie\", \"1000\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        details.put(\"calcium\", \"150\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        details.put(\"salt\", \"130\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutritionMap.replace(\"calorie\", \"1000\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutritionMap.put(\"calcium\", \"150\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutritionMap.put(\"salt\", \"130\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        correctUpdatedMeal \u003d new Meal(meal.getDescription(), currDate, nutritionMap, costStr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        updatedMeal \u003d editCommand.getUpdatedMeal(meal, details);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getDescription(), updatedMeal.getDescription());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(correctUpdatedMeal.getNutritionalValue(), updatedMeal.getNutritionalValue());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HashirZahir": 80
    }
  },
  {
    "path": "src/test/java/diyeats/logic/command/SuggestExerciseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.SuggestExerciseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.dummy.DummyMealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.dummy.DummyStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.dummy.DummyUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.dummy.DummyWallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static diyeats.model.user.Gender.MALE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class SuggestExerciseTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        DummyMealList dummyMealList \u003d new DummyMealList(new ExerciseList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        DummyStorage dummyStorage \u003d new DummyStorage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        DummyUser dummyUser \u003d new DummyUser(\"Hashir\", 22, 175, MALE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                3, 70, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        DummyWallet dummyWallet \u003d new DummyWallet();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Command command \u003d new SuggestExerciseCommand(LocalDate.now(), null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            command.execute(dummyMealList, dummyStorage, dummyUser, dummyWallet);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(false, command.isDone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 35
    }
  },
  {
    "path": "src/test/java/diyeats/logic/command/UserSetupTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.UserSetup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserSetupTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user \u003d new User();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private UserSetup setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    void userSetupTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/name Foo Chi Hen /age 22 /gender Male\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/activity asdf\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/activity 3 /weight 100 /height 100\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertTrue(setup.getUser() instanceof User);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d setup.getUser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getName(), \"Foo Chi Hen\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getWeight(), 100);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getHeight(), 100);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getAge(), 22);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getActivityLevel(), 3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getGender(), Gender.MALE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    void userSetupTestAge() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/name Foo Chi Hen /weight 100 /height 100 /activity 2 /gender Male\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/age asfdasfdas\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/age -12\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/age 2113\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/age 23\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    void userSetupTestWeight() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/name Foo Chi Hen /age 22 /height 100 /activity 2 /gender Male\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/weight asdfasf\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/weight 0\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/weight 100\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    void userSetupTestHeight() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/name Foo Chi Hen /age 22 /weight 100 /activity 2 /gender Male\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/height asdasd\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/height -12\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/height 2113\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/height 100\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    void userSetupTestActivity() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/name Foo Chi Hen /weight 100 /height 100 /age 22 /gender Male\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/activity asdfasf\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/activity 0\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/activity 5\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/activity 3\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    void userSetupTestGender() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user \u003d new User();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup \u003d new UserSetup(user);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/name Foo Chi Hen /weight 100 /height 100 /age 22 /activity 2\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(), false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/gender zxcvzxcv\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        setup.initialise(\"/gender Male\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(setup.getIsDone(),true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 5,
      "koushireo": 103
    }
  },
  {
    "path": "src/test/java/diyeats/logic/dummy/DummyMealList.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.dummy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DummyMealList extends MealList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultValues \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DummyMealList(ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Running, 8 mph (7.5 min/mile)\", 8);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Running, 10 mph (6 min/mile)\", 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Cycling, 10 - 12mph (light effort)\", 7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Cycling, 12 - 14mph (moderate effort)\", 8);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Cycling, 14 - 16mph (heavy effort)\", 10);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Soccer, casual, general\", 7);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Tennis, casual, general\", 7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Martial arts, different types, moderate pace (taichi, taekwondo, etc)\", 10);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DummyMealList(HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultValues) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker \u003d mealTracker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.defaultValues \u003d defaultValues;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addMeals(Meal data) throws ProgramException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void addDefaultValues(Meal item) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal getMeal(LocalDate date, int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal delete(LocalDate date, int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void deleteAllMealsOnDate(LocalDate dateStr) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Meal markDone(LocalDate date, int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean checkDate(LocalDate date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker.containsKey(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setMealTracker(HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e mealTracker) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.mealTracker \u003d mealTracker;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setDefaultValues(HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e defaultValues) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.defaultValues \u003d defaultValues;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setExerciseList(ExerciseList exerciseList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ArrayList\u003cMeal\u003e getMealsList(LocalDate inputDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (mealTracker.containsKey(inputDate)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            mealTracker.put(inputDate, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return mealTracker.get(inputDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cLocalDate, ArrayList\u003cMeal\u003e\u003e getMealTracker() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return mealTracker;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e getDefaultValues() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return defaultValues;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getCalorieBalanceOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return 1600;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public ExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.exerciseList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 111
    }
  },
  {
    "path": "src/test/java/diyeats/logic/dummy/DummyStorage.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.dummy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DummyStorage extends Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DummyStorage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load all info required to initialize a MealList object from input/output file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals the MealList object ot be initialized"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadMealInfo(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load user info from the input/output file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return an instance of User"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public User loadUser() throws ProgramException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load all the words to be autocorrected to from the input/output file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param autocorrect autocorrect object to be loaded with correctable words"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadWord(Autocorrect autocorrect) throws ProgramException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load relevant help file from input/output file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param lines container used to store content from help file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param specifiedHelp type of help requested"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadHelp(ArrayList\u003cString\u003e lines, String specifiedHelp) throws ProgramException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Load all transactions to wallet from input/output file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet container to store transactions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadTransactions(Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write meal records to the input/output file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals container storing meal records"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeFile(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write exercise records to the input/output file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals container storing exercise records"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeExercises(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write default meal values to the input/output file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param meals container storing default meal values"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeDefaults(MealList meals) throws ProgramException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write goal to the input/output file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user container storing goal"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeGoal(User user) throws ProgramException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write user information to input/output file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param user container storing user information"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeUser(User user) throws ProgramException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Write transactions to the input/output file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param wallet container storing transactions"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @throws ProgramException if FileUtil is unable to open file or it is unable to read the file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void writeTransaction(Wallet wallet) throws ProgramException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Getter for isMealDone."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @return true if meallist object is completely loaded, false otherwise"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean isMealDone() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 129
    }
  },
  {
    "path": "src/test/java/diyeats/logic/dummy/DummyUser.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.dummy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DummyUser extends User {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public transient Goal goal \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private HashMap\u003cLocalDate, Double\u003e weight \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private  LocalDate lastDate \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int height \u003d -1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int age \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Gender gender \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private boolean isSetup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private String name \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private int activityLevel \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private double[] factor \u003d {1.2, 1.375, 1.55, 1.725, 1.9};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private double originalWeight \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a contructor to create an user profile with all the info."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * Used during loading."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param name name of user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param age age of user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param height height of user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param gender biological gender of user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param activityLevel how active the user is"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param originalWeight their original weight"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DummyUser(String name, int age, int height, Gender gender, int activityLevel,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                double originalWeight, LocalDate lastDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.isSetup \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.lastDate \u003d lastDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at time of input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setWeight(double weight) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.put(currentDate, weight);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (lastDate \u003d\u003d null || lastDate.isBefore(currentDate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.lastDate \u003d currentDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to update weight at input date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param weight Weight at time of input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * @param inputDate LocalDate of the date in DD/MM/YYYY format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setWeight(double weight, LocalDate inputDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.weight.put(inputDate, weight);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (lastDate \u003d\u003d null || lastDate.isBefore(inputDate)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            this.lastDate \u003d inputDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setGoal(Goal goal) throws ProgramException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setActivityLevel(int activityLevel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateStats(MealList meals) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        this.goal.updateStats(meals);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.weight.get(getLastDate());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getOriginalWeight() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.originalWeight;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getWeightTarget() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return goal.getWeightTarget();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getDaysLeftToGoal() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return goal.daysLeftToGoal();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to obtain all the weight at different date."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public HashMap\u003cLocalDate, Double\u003e getAllWeight() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.activityLevel;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getDailyCalorie() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return 2000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getCalorieBalance() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return 1600;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public double getActivityLevelDifference() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return new Goal();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.gender;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     * This is a function to check if it\u0027s an empty profile."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public boolean getIsSetup() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.isSetup;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate getLastDate() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        if (this.lastDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            lastDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return lastDate;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            return this.lastDate;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public int getTargetActivityLevel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return 3;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return this.name + \"|\" + this.height + \"|\" + this.age + \"|\" + this.gender  + \"|\" + this.isSetup"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + \"|\" + this.activityLevel + \"|\" + this.originalWeight + \"|\" + this.lastDate;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 188
    }
  },
  {
    "path": "src/test/java/diyeats/logic/dummy/DummyWallet.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.dummy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Payment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class DummyWallet extends Wallet {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public DummyWallet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public TransactionList getTransactions() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public BigDecimal getAccountBalance() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setAccountBalance(String accountBalance) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateAccountBalance(Transaction transaction) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void updateAccountBalance(Wallet wallet) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public Boolean addPaymentTransaction(Payment payment) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 47
    }
  },
  {
    "path": "src/test/java/diyeats/logic/parsers/ArgumentSplitterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class ArgumentSplitterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private final String emptyTestStr \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private final String invalidTestStr \u003d \"/date /calorie\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private final String normalTestStr \u003d \"/date 12/12/2012 /calorie 200 /name cheese hamburger /protein 20\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private HashMap\u003cString,String\u003e argMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private HashMap\u003cString,String\u003e expectedArgMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // test empty input string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void splitForwardSlashArgumentEmptyTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        argMap \u003d ArgumentSplitter.splitForwardSlashArguments(emptyTestStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertTrue(argMap.isEmpty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // test invalid input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void splitForwardSlashArgumentMissingTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        argMap \u003d ArgumentSplitter.splitForwardSlashArguments(invalidTestStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertTrue(argMap.isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // test valid input string and ensure hashmap returned is exactly the same"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public void splitForwardSlashArgumentNormalTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        argMap \u003d ArgumentSplitter.splitForwardSlashArguments(normalTestStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        expectedArgMap.put(\"date\", \"12/12/2012\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        expectedArgMap.put(\"calorie\", \"200\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        expectedArgMap.put(\"name\", \"cheese hamburger\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        expectedArgMap.put(\"protein\", \"20\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertEquals(argMap, expectedArgMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "HashirZahir": 43
    }
  },
  {
    "path": "src/test/java/diyeats/logic/parsers/InputValidatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "//@@author GaryStu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " * Test regarding the functionality of InputValidator."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class InputValidatorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String emptyInput \u003d \"   \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String emptyInput2 \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String nonEmptyInput1 \u003d \"abc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String nonEmptyInput2 \u003d \"calorie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String nonNumericInput \u003d \"@#$%^\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String nonNumercInput2 \u003d \"1bcjeu\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String numericInput \u003d \"1.23\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String numericInput2 \u003d \"12345678\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String negativeInput \u003d \"-1.23\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String fractionInput \u003d \"3.14\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String leadingZeroInput \u003d \"0000123\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final String zeroInput \u003d \"0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private final LocalDate localDateInput \u003d LocalDate.of(5000, 12, 31);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test whether exception is thrown if user input is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void emptyInputTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(emptyInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(emptyInput2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No emptyInput exception is thrown\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test that exception is not thrown if user input is not empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void nonEmptyInputTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(nonEmptyInput1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validate(nonEmptyInput2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"Exception is thrown although user input is not empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test whether exception is thrown if the input is not numeric."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void nonNumericInputTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(nonNumericInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(nonNumercInput2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No nonNumeric exception is thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test whether exception is thrown if the input is negative."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void negativeInvalidInputTest() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(negativeInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No negative exception is thrown.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test that exception is not thrown if the input is numeric."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void numericInputTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(numericInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateAmount(numericInput2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"Exception is thrown although user input is numeric\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test that exception is thrown if the date specified is in the future."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void dateInputTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validateDate(localDateInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No future date exception is thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test whether the value is not a fraction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void positiveValueFractionInputTest() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validatePositiveInteger(fractionInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No positive whole number exception is thrown\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test whether the value has a leading zero."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void positiveValueLeadingZeroInputTest() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validatePositiveInteger(leadingZeroInput);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No leading zero number exception is thrown\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     * test whether the value is a zero."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void zeroInputTest() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            InputValidator.validatePositiveInteger(zeroInput);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            fail(\"No zero number exception is thrown\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryStu": 149
    }
  },
  {
    "path": "src/test/java/diyeats/logic/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.exceptions.ProgramException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddDefaultValueCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.AddTransactionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.DeleteDefaultValueCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.commands.SuggestExerciseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.beans.Expression;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Parser parser \u003d new Parser(autocorrect);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"breakfast burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"breakfast burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"breakfast burger /calories 100 /date 1/1/2019\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"lunch burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"lunch burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"lunch burger /calories 100 /date 1/1/2019\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"dinner burger\") instanceof AddCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"dinner burger /calories 100\") instanceof AddCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"dinner burger /calories 100 /date 1/1/2019\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"default burger /calories 100\") instanceof AddDefaultValueCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"default burger /calories 100 /sodium 20\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddDefaultValueCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"         default       burger /calorie 100 /sodium 20\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof AddDefaultValueCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"default burger\") instanceof AddDefaultValueCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"default\") instanceof AddDefaultValueCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"deldefault burger\") instanceof DeleteDefaultValueCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"       deldefault    burger\") instanceof DeleteDefaultValueCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"addexercise running /value 20\") instanceof AddExerciseCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"     addexercise running /value 20\") instanceof AddExerciseCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"delexercise running\") instanceof DeleteExerciseCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"     delexercise running\") instanceof DeleteExerciseCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"suggestexercise\") instanceof SuggestExerciseCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"        suggestexercise      \") instanceof SuggestExerciseCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"suggestexercise /date 1/1/2019\") instanceof SuggestExerciseCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"suggestexercise /find cycling\") instanceof SuggestExerciseCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"suggestexercise /find cycling /date 1/1/2019\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    instanceof SuggestExerciseCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"stats\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"    stats\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(parser.parse(\"list /sort cost /date 10/10/2019\") instanceof ListCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(parser.parse(\"list /sort calorie /date 10/10/2019\") instanceof ListCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertTrue(parser.parse(\"help breakfast\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(parser.parse(\"pay 200\") instanceof AddTransactionCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(parser.parse(\"pay 80 /date 1/1/2019\") instanceof AddTransactionCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(parser.parse(\"deposit 200\") instanceof  AddTransactionCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            assertTrue(parser.parse(\"deposit 100 /date 1/1/2019\") instanceof AddTransactionCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (ProgramException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "            System.out.println(\"Something is wrong with the parser\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 73,
      "GaryStu": 19
    }
  },
  {
    "path": "src/test/java/diyeats/logic/suggestion/ExerciseSuggestionHandlerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.datatypes.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class ExerciseSuggestionHandlerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ExerciseList exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private ExerciseSuggestionHandler exerciseSuggestionHandler \u003d new ExerciseSuggestionHandler();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void setupExerciseList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Running, 8 mph (7.5 min/mile)\", 8);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Running, 10 mph (6 min/mile)\", 10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Cycling, 10 - 12mph (light effort)\", 7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Cycling, 12 - 14mph (moderate effort)\", 8);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Cycling, 14 - 16mph (heavy effort)\", 10);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Soccer, casual, general\", 7);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Tennis, casual, general\", 7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        exerciseList.addStoredExercises(\"Martial arts, different types, moderate pace \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                + \"(taichi, taekwondo, etc)\", 10);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void getSizeTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertEquals(0, exerciseSuggestionHandler.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void getExerciseTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertNull(exerciseSuggestionHandler.getExercise(20));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void computeTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        setupExerciseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cPair\u003e pairList \u003d exerciseSuggestionHandler.compute(exerciseList, 1000,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                2000, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertEquals(8, pairList.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        pairList \u003d exerciseSuggestionHandler.compute(exerciseList, 1000,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                2000, \"Cycling\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertEquals(3, pairList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        pairList \u003d exerciseSuggestionHandler.compute(exerciseList, 1000,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                2000, \"cycling\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertEquals(3, pairList.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        pairList \u003d exerciseSuggestionHandler.compute(exerciseList, 1000,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                2000, \"biCycling\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertEquals(0, pairList.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        pairList \u003d exerciseSuggestionHandler.compute(exerciseList, 1000,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                2000, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        assertEquals(8, pairList.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exerciseSuggestionHandler.compute(exerciseList, 0,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    2000, \"null\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            exerciseSuggestionHandler.compute(exerciseList, -100,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "                    2000, \"null\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 71
    }
  },
  {
    "path": "src/test/java/diyeats/logic/suggestion/MealSuggestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "//@@author HashirZahir"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "public class MealSuggestionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private MealList meals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private LocalDate suggestionDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int calorieLimit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private int maxMealsToSuggest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private String mealSuggestionTypeStr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private MealSuggestionAnalytics mealSuggestionAnalytics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    public MealSuggestionTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals \u003d new MealList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        suggestionDate \u003d LocalDate.now(); // test meal suggestions for today"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        calorieLimit \u003d 500; // calorie limit from which suggestions are made"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        maxMealsToSuggest \u003d 4; // default value is 5, test if other numbers work"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        mealSuggestionTypeStr \u003d \"D\"; // default value is \"L\", see if other values work"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        mealSuggestionAnalytics \u003d new MealSuggestionAnalytics();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // helper function to create meal objects"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private Meal createMeal(String nameStr, int calories) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        HashMap\u003cString, Integer\u003e nutrition \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        nutrition.put(\"calorie\", calories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        return new Meal(nameStr, nutrition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // No default  meals stored"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private void setupEmptyDefaultMealList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    // Populate default meals with some sample data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    private void setupNormalDefaultMealList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"coke\", 150));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"biryani\", 800));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"prata\", 350));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"kopi\", 100));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"banana\", 100));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"chicken-fried-rice\", 450));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        meals.addDefaultValues(createMeal(\"chicken-chop\", 550));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    Tests if analytics runs fine even with empty default meal item list to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    take meal suggestions from. Should return an empty list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    void mealSuggestionEmptyDefaultTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        setupEmptyDefaultMealList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cMeal\u003e suggestedMeals \u003d mealSuggestionAnalytics.getMealSuggestions(meals, suggestionDate, calorieLimit,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                                                    maxMealsToSuggest, mealSuggestionTypeStr);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertTrue(suggestedMeals.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    Tests if excessive meal suggestions are cut off by the maxMealsToSuggest variable"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    void mealSuggestionNormalTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        setupNormalDefaultMealList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cMeal\u003e suggestedMeals \u003d mealSuggestionAnalytics.getMealSuggestions(meals, suggestionDate, calorieLimit,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                maxMealsToSuggest, mealSuggestionTypeStr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertTrue(suggestedMeals.size() \u003d\u003d maxMealsToSuggest);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    Tests if there is off by 1 error for suggested meal calories since the limit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    is the same as a meal item."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    void mealSuggestionConstrainedTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        calorieLimit \u003d 150;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        setupNormalDefaultMealList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        ArrayList\u003cMeal\u003e suggestedMeals \u003d mealSuggestionAnalytics.getMealSuggestions(meals, suggestionDate, calorieLimit,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "                maxMealsToSuggest, mealSuggestionTypeStr);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "        assertTrue(suggestedMeals.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HashirZahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "HashirZahir": 85
    }
  },
  {
    "path": "src/test/java/diyeats/model/user/UserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private User user \u003d new User(\"Foo Chi Hen\", 22, 100, Gender.MALE, 0, 100, LocalDate.now());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    void user() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user.setWeight(100);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getWeight(), 100);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getName(), \"Foo Chi Hen\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getHeight(), 100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getActivityLevel(), 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertEquals(user.getAge(), 22);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        assertTrue(user.getAllWeight() instanceof HashMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 8,
      "koushireo": 16
    }
  },
  {
    "path": "src/test/java/diyeats/model/wallet/WalletTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "package diyeats.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "public class WalletTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    private LocalDate localDate \u003d LocalDate.of(2019, 1, 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    final BigDecimal expectedAmountNormal \u003d new BigDecimal(\"100\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    //test for valid transaction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void walletNormalTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        wallet.setAccountBalance(\"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Payment normalPayment \u003d new Payment(\"100\", localDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Deposit normalDeposit \u003d new Deposit(\"200\", localDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        wallet.updateAccountBalance(normalDeposit);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        assertTrue(wallet.addPaymentTransaction(normalPayment));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        assertEquals(wallet.getAccountBalance().compareTo(expectedAmountNormal), 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    //test for transaction that exceeds the available amount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    public void walletNotEnoughTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        wallet.setAccountBalance(\"0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Deposit notEnoughDeposit \u003d new Deposit(\"100\", localDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        Payment notEnoughPayment \u003d new Payment(\"200\", localDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        wallet.updateAccountBalance(notEnoughDeposit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "        assertFalse(wallet.addPaymentTransaction(notEnoughPayment));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GaryStu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GaryStu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 1,
      "GaryStu": 38
    }
  },
  {
    "path": "src/test/java/diyeats/storage/LoadTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "package diyeats.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.datatypes.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.commons.file.LocalDateAdapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.logic.autocorrect.Autocorrect;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.Meal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.meal.MealList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import diyeats.model.wallet.Wallet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "//@@author Fractalisk"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "public class LoadTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private Load loader \u003d new Load(new GsonBuilder().setPrettyPrinting().registerTypeAdapter(LocalDate.class,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            new LocalDateAdapter()).create());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    private LocalDate date \u003d LocalDate.parse(\"2019-11-08\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadMealListDataTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        final String expectedEntry1 \u003d \"[B][NO] burger | sodium:20 fats:20 calorie:1000 cost: 0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        final String expectedEntry2 \u003d \"[L][YES] mac \u0026 cheese | sodium:20 fats:30 calorie:500 cost: 0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        final String expectedEntry3 \u003d \"[D][NO] pizza | calorie:800 cost: 0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        MealList meals \u003d new MealList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadMealListData(meals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ArrayList\u003cMeal\u003e mealTracker \u003d meals.getMealTracker().get(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(expectedEntry1, mealTracker.get(0).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(expectedEntry2, mealTracker.get(1).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(expectedEntry3, mealTracker.get(2).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadDefaultMealDataTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        MealList meals \u003d new MealList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadDefaultMealData(meals);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, HashMap\u003cString, Integer\u003e\u003e mealTracker \u003d meals.getDefaultValues();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e nutritionalValue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionalValue \u003d mealTracker.get(\"burger\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"calorie\"), 500);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"fats\"), 20);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"sodium\"), 20);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionalValue \u003d mealTracker.get(\"steak\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"calorie\"), 600);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"fats\"), 20);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"sodium\"), 10);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            nutritionalValue \u003d mealTracker.get(\"Tomato Pasta\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"calorie\"), 450);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"fats\"), 10);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(nutritionalValue.get(\"sodium\"), 10);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadExercisesTest() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        MealList meals \u003d new MealList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadExercises(meals);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            ExerciseList exerciseList \u003d meals.getExerciseList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            Pair pair \u003d exerciseList.getExerciseAtDate(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(pair.getKey(), \"Running\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(pair.getValue(), 35);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            HashMap\u003cString, Integer\u003e storedExercises \u003d exerciseList.getStoredExercises();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(storedExercises.get(\"Running\"), 14);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadTransactionsTest() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadTransactions(wallet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadUserTest() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        final String expectedString \u003d \"Hashir|175|22|MALE|true|2|70.0|2019-11-08\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        User user \u003d new User();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user \u003d loader.loadUser();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(user.toString(), expectedString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadGoalTest() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        final String expectedEntry \u003d \"2019-11-20|2020-11-20|60.0|1250116|4\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        User user;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            user \u003d loader.loadUser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadGoals(user);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            String userGoal \u003d user.getGoal().toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(userGoal, expectedEntry);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadAutocorrectTest() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        Autocorrect autocorrect \u003d new Autocorrect();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadAutoCorrect(autocorrect);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            autocorrect.setWord(\"calorei\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            autocorrect.execute();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(autocorrect.getWord(), \"calorie\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            autocorrect.setWord(\"lunxh\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            autocorrect.execute();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(autocorrect.getWord(), \"lunch\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            autocorrect.setWord(\"cacium\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            autocorrect.execute();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            assertEquals(autocorrect.getWord(), \"calcium\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    public void loadHelpTest() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        loader.test();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            loader.loadHelp(lines, \"add\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 165
    }
  },
  {
    "path": "unused/GUI.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.tasks.Meal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author koushireo-unused"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class GUI extends Application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static HashMap\u003cString, Integer\u003e weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static String startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static String endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private static String type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private Stage mainStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(HashMap\u003cString, Integer\u003e weight) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setMealList(HashMap\u003cString, ArrayList\u003cMeal\u003e\u003e mealList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.mealList \u003d mealList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setStartDate(String date) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.startDate \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setEndDate(String date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.endDate \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void start(Stage stage) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        xAxis.setLabel(\"Date\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        yAxis.setLabel(\"calorie\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        LineChart\u003cString, Number\u003e lineChart \u003d new LineChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        XYChart.Series dataSeries1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        XYChart.Series dataSeries2 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        LocalDate startDate \u003d LocalDate.parse(this.startDate, formatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        LocalDate endDate \u003d LocalDate.parse(this.endDate, formatter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        int days \u003d (int) ChronoUnit.DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            Date date \u003d sdf.parse(this.startDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            cal.setTime(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d days; i +\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            String current \u003d dateFormat.format(cal.getTime());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            System.out.println(current);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (this.type.equals(\"weight\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (weight.containsKey(current)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    System.out.println(weight.get(current));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    dataSeries1.getData().add(new XYChart.Data(current, weight.get(current)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    dataSeries2.getData().add(new XYChart.Data(current, 100));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    System.out.println(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    dataSeries1.getData().add(new XYChart.Data(current, 0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    dataSeries2.getData().add(new XYChart.Data(current, 100));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                int value \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                if (!mealList.containsKey(current)){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    dataSeries1.getData().add(new XYChart.Data(current, value));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    ArrayList\u003cMeal\u003e currentMealInDay \u003d mealList.get(current);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    for (int j \u003d 0; j \u003c currentMealInDay.size(); j +\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        HashMap\u003cString, Integer\u003e currentMeal \u003d currentMealInDay.get(j).getNutritionalValue();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        if (currentMeal.containsKey(this.type)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                            value +\u003d currentMeal.get(this.type);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    System.out.println(value);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                    dataSeries1.getData().add(new XYChart.Data(current, value));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            cal.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        lineChart.getData().add(dataSeries1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        lineChart.getData().add(dataSeries2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        HBox hbox \u003d new HBox(lineChart);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        Scene scene \u003d new Scene(hbox,500,500);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        stage.setTitle(\"duke\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "koushireo": 124,
      "-": 1
    }
  },
  {
    "path": "unused/GUICommand.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.gui.GUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.tasks.MealList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Fractalisk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author koushireo-unused"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * Display desired data based on dates"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class GUICommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * This is a constructor for AddCommand which create a new AddCommand object with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * the meal specified as the instance field meal."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meal The meal to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public GUICommand(String type, String startDate, String endDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * The object will execute the \"add\" command, updating the current tasks, ui, and storage in the process."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param meals the MealList object in which the meal is supposed to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param ui the ui object to display the user interface of an \"add\" command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param storage the storage object that stores the list of meals"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     * @param in the scanner object to handle secondary command IO"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void execute(MealList meals, Ui ui, Storage storage, User user, Scanner in, GUI gui) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        gui.setMealList(meals.getMealTracker());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        gui.setWeight(user.getAllWeight());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        gui.setStartDate(this.startDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        gui.setEndDate(this.endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        gui.setType(this.type);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        String[] args \u003d {};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        gui.main(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Fractalisk": 3,
      "koushireo": 46,
      "-": 1
    }
  },
  {
    "path": "unused/UserSetup.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "koushireo"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.model.user.Gender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.ui.InputHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "koushireo"
        },
        "content": "import duke.ui.UserUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author koushireo-unused"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "koushireo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "koushireo"
        },
        "content": " * UserSetup is a public class that facilitates user profile creation."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "koushireo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "koushireo"
        },
        "content": "public class UserSetup {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private UserUi ui \u003d new UserUi();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public UserSetup(User user) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.getIsSetup()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeBack(user);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcomeNew();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void initialise(String info) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        InputHandler in \u003d new InputHandler(info);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.getName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            setName(info);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getAge() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showAge();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int age \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                age \u003d in.getInt();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                setAge(age);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getAllWeight().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWeight();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int weight \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                weight \u003d in.getInt();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                setWeight(weight);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                user.setOriginalWeight(weight);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Please input a valid number for weight!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getHeight() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showHeight();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int height \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                height \u003d in.getInt();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                setHeight(height);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getGender() \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showGender();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            Gender sex \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            if (info.charAt(0) \u003d\u003d \u0027M\u0027 || info.charAt(0) \u003d\u003d \u0027m\u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                sex \u003d Gender.MALE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                setGender(sex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else if (info.charAt(0) \u003d\u003d \u0027F\u0027 || info.charAt(0) \u003d\u003d \u0027f\u0027) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                sex \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                setGender(sex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(\"Invalid gender info\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        } else if (user.getActivityLevel() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showActivity();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            int activity \u003d 5;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                activity \u003d Integer.parseInt(info) - 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                setActivity(activity);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "koushireo"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        if (user.valid()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showUserSetupDone(user);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "koushireo"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user.setName(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showAge();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user.setAge(age);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showWeight();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setWeight(int weight) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user.setWeight(weight);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showHeight();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user.setHeight(height);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showGender();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        this.user.setGender(gender);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        ui.showActivity();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public void setActivity(int level) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        user.setActivityLevel(level);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public User getUser() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "koushireo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "koushireo"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "koushireo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "koushireo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "koushireo": 131,
      "-": 1
    }
  }
]
