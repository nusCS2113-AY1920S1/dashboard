[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.8\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "group \u0027seedu.OwlMoney\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "version \u00271.3.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    compile \"com.opencsv:opencsv:4.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.5.1\u0027)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveBaseName \u003d \"OwlMoney\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveVersion \u003d \"v1.3\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    mainClassName \u003d \"owlmoney.Main\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        csv.enabled true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        html.enabled true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/test/jacocoTestReport.xml\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "// Run `test` task if `nonGuiTests` is specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \u0027site-name\u0027: \u0027OwlMoney\u0027,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2113T-W17-3/main\u0027,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "task buildJar(type: GradleBuild) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    tasks \u003d [\u0027clean\u0027, \u0027deployOfflineDocs\u0027, \u0027shadowJar\u0027]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options.warnings \u003d false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options.deprecation \u003d false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options.compilerArgs +\u003d [ \"-Xlint:cast,deprecation,divzero,rawtypes,unchecked\" ]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "compileTestJava {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options.warnings \u003d false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options.deprecation \u003d false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    options.compilerArgs +\u003d [ \"-Xlint:cast,deprecation,divzero,rawtypes,unchecked\" ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027checkstyleMain\u0027, \u0027checkstyleTest\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "shamussy": 108,
      "-": 35
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "audio, canvas, video {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden], template {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "script {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none !important"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "html {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: sans-serif;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -ms-text-size-adjust: 100%;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-text-size-adjust: 100%"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "body {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    background: transparent"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    outline: thin dotted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "a:active, a:hover {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    outline: 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "h1 {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 2em;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: .67em 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title] {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px dotted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "b, strong {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dfn {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "hr {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -moz-box-sizing: content-box;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    box-sizing: content-box;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "mark {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #ff0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "code, kbd, pre, samp {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: monospace;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "pre {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    white-space: pre-wrap"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "q {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    quotes: \"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "small {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 80%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "sub, sup {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 75%;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: baseline"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "sup {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    top: -.5em"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "sub {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    bottom: -.25em"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "img {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow: hidden"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "figure {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 1px solid silver;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 2px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .35em .625em .75em"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "legend {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "button, input, select, textarea {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: inherit;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 100%;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "button, input {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: normal"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "button, select {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    text-transform: none"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "button, html input[type\u003d\"button\"], input[type\u003d\"reset\"], input[type\u003d\"submit\"] {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-appearance: button;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: pointer"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled], html input[disabled] {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: default"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"], input[type\u003d\"radio\"] {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    box-sizing: border-box;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"] {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-appearance: textfield;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -moz-box-sizing: content-box;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-box-sizing: content-box;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    box-sizing: content-box"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button, input[type\u003d\"search\"]::-webkit-search-decoration {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-appearance: none"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner, input::-moz-focus-inner {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "textarea {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow: auto;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: top"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "table {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    border-collapse: collapse;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    border-spacing: 0"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "*, *:before, *:after {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -moz-box-sizing: border-box;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-box-sizing: border-box;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    box-sizing: border-box"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "html, body {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 100%"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "body {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Noto Serif\", \"DejaVu Serif\", serif;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: auto"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: pointer"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "img, object, embed {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 100%;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    height: auto"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "object, embed {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 100%"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "img {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -ms-interpolation-mode: bicubic"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".left {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    float: left !important"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".right {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    float: right !important"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: left !important"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: right !important"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center !important"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: justify !important"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".hide {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "body {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-font-smoothing: antialiased"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "img, object, svg {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "textarea {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    height: auto;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    min-height: 50px"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "select {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".center {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".spread {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead, .paragraph.lead \u003e p, #preamble \u003e .sectionbody \u003e .paragraph:first-of-type p {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.21875em;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.6"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader, .admonitionblock td.content \u003e .title, .audioblock \u003e .title, .exampleblock \u003e .title, .imageblock \u003e .title, .listingblock \u003e .title, .literalblock \u003e .title, .stemblock \u003e .title, .openblock \u003e .title, .paragraph \u003e .title, .quoteblock \u003e .title, table.tableblock \u003e .title, .verseblock \u003e .title, .videoblock \u003e .title, .dlist \u003e .title, .olist \u003e .title, .ulist \u003e .title, .qlist \u003e .title, .hdlist \u003e .title {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .25em"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "div, dl, dt, dd, ul, ol, li, h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6, pre, form, p, blockquote, th, td {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    direction: ltr"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #2156a5;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: underline;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover, a:focus {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #1d4b8f"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "a img {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "p {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: inherit;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeLegibility"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "p aside {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .875em;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.35;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6 {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 300;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #ba3925;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeLegibility;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 1em;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .5em;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.0125em"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small, h2 small, h3 small, #toctitle small, .sidebarblock \u003e .content \u003e .title small, h4 small, h5 small, h6 small {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 60%;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #e99b8f;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 0"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "h1 {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 2.125em"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "h2 {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.6875em"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "h3, #toctitle, .sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.375em"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "h4, h5 {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.125em"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "h6 {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "hr {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    border: solid #ddddd8;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px 0 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    clear: both;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 1.25em 0 1.1875em;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 0"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "em, i {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "strong, b {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "small {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 60%;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "code {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .9)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "ul, ol, dl {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-position: outside;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: inherit"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "ul, ol, ul.no-bullet, ol.no-bullet {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.5em"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul, ul li ol {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.25em;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul, ul.circle li ul, ul.disc li ul {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: inherit"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: square"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: circle"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: disc"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul, ol li ol {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.25em;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .3125em;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "abbr, acronym {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    text-transform: uppercase;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 90%;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px dotted #ddd;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: help"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "abbr {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    text-transform: none"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 0 1.25em;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .5625em 1.25em 0 1.1875em;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: 1px solid #ddd"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .9375em;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\2014 \\0020\""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a, blockquote cite a:visited {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote, blockquote p {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "    h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6 {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1.2"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    h1 {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 2.75em"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "    h2 {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 2.3125em"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "    h3, #toctitle, .sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1.6875em"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "    h4 {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1.4375em"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "table {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    border: solid 1px #dedede"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "table thead, table tfoot {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f7f8f7;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th, table thead tr td, table tfoot tr th, table tfoot tr td {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .5em .625em .625em;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: inherit;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: left"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th, table tr td {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .5625em .625em;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: inherit;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even, table tr.alt, table tr:nth-of-type(even) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f8f8f7"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th, table tfoot tr th, table tbody tr td, table tr td, table tfoot tr td {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    display: table-cell;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.6"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "body {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "    tab-size: 4"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "h1, h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title, h4, h5, h6 {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.2;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    word-spacing: -.05em"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong, h2 strong, h3 strong, #toctitle strong, .sidebarblock \u003e .content \u003e .title strong, h4 strong, h5 strong, h6 strong {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before, .clearfix:after, .float-group:before, .float-group:after {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \" \";"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "    display: table"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after, .float-group:after {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    clear: both"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre) \u003e code {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .9375em;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: normal !important;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "    letter-spacing: 0;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .1em .5ex;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "    word-spacing: -.15em;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f7f7f8;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 4px;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeSpeed"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "pre, pre \u003e code {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .9);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeSpeed"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(51, 51, 51, .8)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "kbd {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Droid Sans Mono\", \"DejaVu Sans Mono\", monospace;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .65em;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f7f7f7;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 1px solid #ccc;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 3px;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 3px;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em white inset;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    box-shadow: 0 1px 0 rgba(0, 0, 0, .2), 0 0 0 .1em #fff inset;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 .15em;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .2em .5em;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "    top: -.1em;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    white-space: nowrap"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 0"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 0"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq, .menu {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8)"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before, b.button:after {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    top: -1px;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"[\";"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 3px 0 2px"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"]\";"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 2px 0 3px"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "p a \u003e code:hover {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .9)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "#header, #content, #footnotes, #footer {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5em;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    *zoom: 1;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .9375em;"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: .9375em"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before, #header:after, #content:before, #content:after, #footnotes:before, #footnotes:after, #footer:before, #footer:after {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \" \";"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    display: table"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after, #content:after, #footnotes:after, #footer:after {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    clear: both"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "#content {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 1.25em"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "    content: none"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "#header \u003e h1:first-child {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 2.25rem;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "#header \u003e h1:first-child + #toc {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 8px;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    border-top: 1px solid #ddddd8"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "#header \u003e h1:only-child, body.toc2 #header \u003e h1:nth-last-child(2) {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 8px"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: .25em;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: .25em;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .25em;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .6);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "    display: -ms-flexbox;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    display: -webkit-flex;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    -ms-flex-flow: row wrap;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-flex-flow: row wrap;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-flow: row wrap"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: -.125em"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br + span:before {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\00a0\\2013\\00a0\""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br + span.author:before {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\00a0\\22c5\\00a0\";"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br + span#revremark:before {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\00a0|\\00a0\""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "    text-transform: capitalize"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\00a0\""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "#content \u003e h1:first-child:not([class]) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 8px;"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 1rem;"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25rem"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "#toc {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px solid #efefed;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: .5em"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "#toc \u003e ul {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: .125em"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 \u003e li \u003e a {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1 {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: .5em 0"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: none"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.3334;"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: .3334em"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: underline"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.2em"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    #toctitle {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1.375em"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "    body.toc2 {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 15em;"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-right: 0"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-top: 0 !important;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f8f8f7;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "        position: fixed;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        width: 15em;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        left: 0;"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "        top: 0;"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        border-right: 1px solid #efefed;"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top-width: 0 !important;"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom-width: 0 !important;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        z-index: 1000;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        padding: 1.25em 1em;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        height: 100%;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        overflow: auto"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 #toctitle {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-top: 0;"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-bottom: .8rem;"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1.2em"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 \u003e ul {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: .9em;"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-bottom: 0"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 ul ul {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-left: 0;"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 1em"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 ul.sectlevel0 ul.sectlevel1 {"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 0;"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-top: .5em;"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-bottom: .5em"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "    body.toc2.toc-right {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 0;"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-right: 15em"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "    body.toc2.toc-right #toc.toc2 {"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        border-right-width: 0;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        border-left: 1px solid #efefed;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        left: auto;"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        right: 0"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width: 1280px) {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "    body.toc2 {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 20em;"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-right: 0"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "        width: 20em"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 #toctitle {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1.375em"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 \u003e ul {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: .95em"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc.toc2 ul ul {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 1.25em"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "    body.toc2.toc-right {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: 0;"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-right: 20em"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc {"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "    border-style: solid;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "    border-color: #e0e0dc;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1.25em;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f8f8f7;"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc \u003e :first-child {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc \u003e :last-child {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "#footer {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 100%;"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1.25em"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(255, 255, 255, .8);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.44"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1 {"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: .625em"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "    .sect1 {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-bottom: 1.25em"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1 + .sect1 {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "    border-top: 1px solid #efefed"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.anchor, h2 \u003e a.anchor, h3 \u003e a.anchor, #toctitle \u003e a.anchor, .sidebarblock \u003e .content \u003e .title \u003e a.anchor, h4 \u003e a.anchor, h5 \u003e a.anchor, h6 \u003e a.anchor {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "    z-index: 1001;"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 1.5ex;"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: -1.5ex;"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none !important;"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "    visibility: hidden;"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.anchor:before, h2 \u003e a.anchor:before, h3 \u003e a.anchor:before, #toctitle \u003e a.anchor:before, .sidebarblock \u003e .content \u003e .title \u003e a.anchor:before, h4 \u003e a.anchor:before, h5 \u003e a.anchor:before, h6 \u003e a.anchor:before {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\00A7\";"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .85em;"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: .1em"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover \u003e a.anchor, #content h1 \u003e a.anchor:hover, h2:hover \u003e a.anchor, h2 \u003e a.anchor:hover, h3:hover \u003e a.anchor, #toctitle:hover \u003e a.anchor, .sidebarblock \u003e .content \u003e .title:hover \u003e a.anchor, h3 \u003e a.anchor:hover, #toctitle \u003e a.anchor:hover, .sidebarblock \u003e .content \u003e .title \u003e a.anchor:hover, h4:hover \u003e a.anchor, h4 \u003e a.anchor:hover, h5:hover \u003e a.anchor, h5 \u003e a.anchor:hover, h6:hover \u003e a.anchor, h6 \u003e a.anchor:hover {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "    visibility: visible"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link, h2 \u003e a.link, h3 \u003e a.link, #toctitle \u003e a.link, .sidebarblock \u003e .content \u003e .title \u003e a.link, h4 \u003e a.link, h5 \u003e a.link, h6 \u003e a.link {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #ba3925;"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link:hover, h2 \u003e a.link:hover, h3 \u003e a.link:hover, #toctitle \u003e a.link:hover, .sidebarblock \u003e .content \u003e .title \u003e a.link:hover, h4 \u003e a.link:hover, h5 \u003e a.link:hover, h6 \u003e a.link:hover {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #a53221"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock, .imageblock, .literalblock, .listingblock, .stemblock, .videoblock {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title, .audioblock \u003e .title, .exampleblock \u003e .title, .imageblock \u003e .title, .listingblock \u003e .title, .literalblock \u003e .title, .stemblock \u003e .title, .openblock \u003e .title, .paragraph \u003e .title, .quoteblock \u003e .title, table.tableblock \u003e .title, .verseblock \u003e .title, .videoblock \u003e .title, .dlist \u003e .title, .olist \u003e .title, .ulist \u003e .title, .qlist \u003e .title, .hdlist \u003e .title {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeLegibility;"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Noto Serif\", \"DejaVu Serif\", serif;"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e caption.title {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow: visible;"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 0"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead \u003e p, #preamble \u003e .sectionbody \u003e .paragraph:first-of-type p {"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85)"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble \u003e .sectionbody \u003e .paragraph:first-of-type p {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: inherit"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock \u003e table {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    border-collapse: separate;"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "    background: none;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock \u003e table td.icon {"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 80px"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock \u003e table td.icon img {"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: none"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock \u003e table td.icon .title {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "    text-transform: uppercase"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock \u003e table td.content {"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 1.125em;"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: 1.25em;"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: 1px solid #ddddd8;"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock \u003e table td.content \u003e :last-child \u003e :last-child {"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .content {"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "    border-style: solid;"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "    border-color: #e6e6e6;"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1.25em;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .content \u003e :first-child {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .content \u003e :last-child {"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock {"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "    border-style: solid;"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px;"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "    border-color: #e0e0dc;"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25em;"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1.25em;"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f8f8f7;"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e :first-child {"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e :last-child {"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 0;"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .content \u003e :last-child \u003e :last-child, .exampleblock \u003e .content .olist \u003e ol \u003e li:last-child \u003e :last-child, .exampleblock \u003e .content .ulist \u003e ul \u003e li:last-child \u003e :last-child, .exampleblock \u003e .content .qlist \u003e ol \u003e li:last-child \u003e :last-child, .sidebarblock \u003e .content \u003e :last-child \u003e :last-child, .sidebarblock \u003e .content .olist \u003e ol \u003e li:last-child \u003e :last-child, .sidebarblock \u003e .content .ulist \u003e ul \u003e li:last-child \u003e :last-child, .sidebarblock \u003e .content .qlist \u003e ol \u003e li:last-child \u003e :last-child {"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre, .listingblock pre:not(.highlight), .listingblock pre[class\u003d\"highlight\"], .listingblock pre[class^\u003d\"highlight \"], .listingblock pre.CodeRay, .listingblock pre.prettyprint {"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f7f7f8"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre, .sidebarblock .listingblock pre:not(.highlight), .sidebarblock .listingblock pre[class\u003d\"highlight\"], .sidebarblock .listingblock pre[class^\u003d\"highlight \"], .sidebarblock .listingblock pre.CodeRay, .sidebarblock .listingblock pre.prettyprint {"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f2f1f1"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 4px;"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "    word-wrap: break-word;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1em;"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .8125em"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap, .literalblock pre[class].nowrap, .listingblock pre.nowrap, .listingblock pre[class].nowrap {"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow-x: auto;"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "    white-space: pre;"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "    word-wrap: normal"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width: 768px) {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: .90625em"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width: 1280px) {"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "    .literalblock pre, .literalblock pre[class], .listingblock pre, .listingblock pre[class] {"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1em"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre {"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #f7f7f8;"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: rgba(0, 0, 0, .9)"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs {"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs \u003e code {"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1em;"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 4px;"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 4px"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 0"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .content {"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "    content: attr(data-lang);"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .75em;"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "    top: .425rem;"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "    right: .5rem;"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1;"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "    text-transform: uppercase;"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #999"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before {"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "    content: attr(data-prompt);"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: .5em;"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #999"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"$\""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "    border-collapse: separate;"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "    background: none"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td {"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: top;"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code {"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .75em;"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: 0"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno, table.pyhltable td:not(.code) {"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #999;"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: .5em;"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "    border-right: 1px solid #ddddd8"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno {"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: .25em"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv {"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "    background: none !important;"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-right: 0 !important"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock {"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 1em 1.25em 1.5em;"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "    display: table"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title {"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: -1.5em;"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .75em"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote, .quoteblock blockquote p {"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.15rem;"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.75;"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "    word-spacing: .1em;"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "    letter-spacing: 0;"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic;"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: justify"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before {"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\201c\";"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 2.75em;"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: .6em;"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: -.6em;"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #7a2518;"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "    text-shadow: 0 1px 2px rgba(0, 0, 0, .1)"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote \u003e .paragraph:last-child p {"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: .5em;"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: .5ex;"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: right"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 0;"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 0;"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .5em 0;"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: 3px solid rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote {"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 0 0 .75em"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before {"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock {"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 1em 1.25em 1em"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre {"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans;"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.15rem;"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .85);"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 300;"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeLegibility"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution {"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: 1.25rem;"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: .5ex"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution, .verseblock .attribution {"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .9375em;"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.45;"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: italic"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br, .verseblock .attribution br {"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite, .verseblock .attribution cite {"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "    letter-spacing: -.025em;"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .6)"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract {"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 0 1.25em 0;"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote, .quoteblock.abstract blockquote p {"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "    word-spacing: 0"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before, .quoteblock.abstract blockquote p:first-of-type:before {"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock {"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 100%;"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "    border-collapse: separate"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td \u003e .paragraph:last-child p \u003e p:last-child, table.tableblock th \u003e p:last-child, table.tableblock td \u003e p:last-child {"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock, th.tableblock, td.tableblock {"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0 solid #dedede"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock, table.grid-all td.tableblock {"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 0 1px 1px 0"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot \u003e tr \u003e th.tableblock, table.grid-all tfoot \u003e tr \u003e td.tableblock {"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px 1px 0 0"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock, table.grid-cols td.tableblock {"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 0 1px 0 0"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all * \u003e tr \u003e .tableblock:last-child, table.grid-cols * \u003e tr \u003e .tableblock:last-child {"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "    border-right-width: 0"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock, table.grid-rows td.tableblock {"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 0 0 1px 0"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody \u003e tr:last-child \u003e th.tableblock, table.grid-all tbody \u003e tr:last-child \u003e td.tableblock, table.grid-all thead:last-child \u003e tr \u003e th.tableblock, table.grid-rows tbody \u003e tr:last-child \u003e th.tableblock, table.grid-rows tbody \u003e tr:last-child \u003e td.tableblock, table.grid-rows thead:last-child \u003e tr \u003e th.tableblock {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom-width: 0"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot \u003e tr \u003e th.tableblock, table.grid-rows tfoot \u003e tr \u003e td.tableblock {"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px 0 0 0"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all {"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides {"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 0 1px"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot {"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px 0"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left, td.halign-left {"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: left"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right, td.halign-right {"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: right"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center, td.halign-center {"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top, td.valign-top {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: top"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom, td.valign-bottom {"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: bottom"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle, td.valign-middle {"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th, table tfoot th {"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th {"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "    display: table-cell;"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.6;"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #f7f8f7"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th, tbody tr th p, tfoot tr th, tfoot tr th p {"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock \u003e code:only-child {"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "    background: none;"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock {"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "td \u003e div.verse {"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "    white-space: pre"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "ol {"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.75em"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol {"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.5em"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd {"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.125em"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child, dl dd:last-child \u003e :last-child {"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "ol \u003e li p, ul \u003e li p, ul dd, ol dd, .olist .olist, .ulist .ulist, .ulist .olist, .olist .ulist {"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .625em"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled, ol.unnumbered, ul.checklist, ul.none {"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: none"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled, ol.unnumbered, ul.checklist {"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: .625em"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li \u003e p:first-child \u003e .fa-square-o:first-child, ul.checklist li \u003e p:first-child \u003e .fa-check-square-o:first-child {"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 1em;"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .85em"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li \u003e p:first-child \u003e input[type\u003d\"checkbox\"]:first-child {"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 1em;"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "    top: 1px"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline {"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0 auto .625em auto;"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: -1.375em;"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 0;"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "    overflow: hidden"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline \u003e li {"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.375em;"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline \u003e li \u003e * {"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt {"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: 400;"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: normal"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic {"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: decimal"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal {"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: decimal-leading-zero"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha {"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: lower-alpha"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha {"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: upper-alpha"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman {"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: lower-roman"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman {"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: upper-roman"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek {"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style-type: lower-greek"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e table, .colist \u003e table {"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "    background: none"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e table \u003e tbody \u003e tr, .colist \u003e table \u003e tbody \u003e tr {"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "    background: none"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1, td.hdlist2 {"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: top;"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 .625em"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1 {"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 1.25em"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock + .colist, .listingblock + .colist {"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: -.5em"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ".colist \u003e table tr \u003e td:first-of-type {"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 .75em;"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ".colist \u003e table tr \u003e td:last-of-type {"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .25em 0"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb, .th {"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 0;"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "    border: solid 4px #fff;"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-box-shadow: 0 0 0 1px #ddd;"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "    box-shadow: 0 0 0 1px #ddd"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left, .imageblock[style*\u003d\"float: left\"] {"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: .25em .625em 1.25em 0"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right, .imageblock[style*\u003d\"float: right\"] {"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: .25em 0 1.25em .625em"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title {"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb, .imageblock.th {"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 6px"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb \u003e .title, .imageblock.th \u003e .title {"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 .125em"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left, .image.right {"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: .25em;"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .25em;"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 0"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left {"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: .625em"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right {"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: .625em"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "a.image {"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object {"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "    pointer-events: none"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote, sup.footnoteref {"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .875em;"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "    position: static;"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: super"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a, sup.footnoteref a {"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active, sup.footnoteref a:active {"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: underline"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes {"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: .75em;"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: .75em;"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .625em"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr {"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 20%;"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "    min-width: 6.25em;"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: -.25em 0 .75em 0;"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "    border-width: 1px 0 0 0"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote {"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0 .375em 0 .225em;"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.3334;"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .875em;"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: 1.2em;"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "    text-indent: -1.05em;"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: .2em"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type {"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type {"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes {"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-top: -.625em;"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: .75em 0"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data \u003e table {"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0;"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "    background: #fff;"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 0"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data \u003e table td.line-data {"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 99%"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable {"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "    page-break-inside: avoid"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": ".big {"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: larger"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": ".small {"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: smaller"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ".underline {"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: underline"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": ".overline {"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: overline"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through {"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: line-through"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua {"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #00bfbf"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background {"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #00fafa"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": ".black {"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background {"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #000"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ".blue {"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #0000bf"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background {"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #0000fa"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia {"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bf00bf"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background {"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fa00fa"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": ".gray {"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #606060"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background {"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #7d7d7d"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": ".green {"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #006000"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background {"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #007d00"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": ".lime {"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #00bf00"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background {"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #00fa00"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon {"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #600000"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background {"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #7d0000"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": ".navy {"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000060"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background {"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #00007d"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": ".olive {"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #606000"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background {"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #7d7d00"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": ".purple {"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #600060"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background {"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #7d007d"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": ".red {"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bf0000"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background {"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fa0000"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": ".silver {"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #909090"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background {"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #bcbcbc"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": ".teal {"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #006060"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background {"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #007d7d"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": ".white {"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bfbfbf"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background {"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fafafa"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow {"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bfbf00"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background {"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fafa00"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon \u003e .fa {"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: default"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"] {"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 2.5em;"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "    text-shadow: 1px 1px 2px rgba(0, 0, 0, .5);"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "    cursor: default"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before {"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\f05a\";"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #19407c"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before {"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\f0eb\";"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "    text-shadow: 1px 1px 2px rgba(155, 155, 0, .8);"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #111"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before {"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\f071\";"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bf6900"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before {"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\f06d\";"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bf3400"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before {"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "    content: \"\\f06a\";"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #bf0000"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] {"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #fff !important;"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: rgba(0, 0, 0, .8);"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-border-radius: 100px;"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "    border-radius: 100px;"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: .75em;"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 1.67em;"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.67em;"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: 1.67em;"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "    font-style: normal;"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] * {"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #fff !important"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] + b {"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after {"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "    content: attr(data-value)"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value] {"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "    top: -.125em"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum * {"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "    color: inherit !important"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty {"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "dt, th.tableblock, td.content, div.footnote {"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "    text-rendering: optimizeLegibility"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": "h1, h2, p, td.content, span.alt {"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "    letter-spacing: -.01em"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "p strong, td.content strong, div.footnote strong {"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "    letter-spacing: -.005em"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "p, blockquote, dt, td.content, span.alt {"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.0625rem"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "p {"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-bottom: 1.25rem"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p, .sidebarblock dt, .sidebarblock td.content, p.tableblock {"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1em"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .content {"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fffef7;"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": "    border-color: #e0e0dc;"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "    -webkit-box-shadow: 0 1px 4px #e0e0dc;"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "    box-shadow: 0 1px 4px #e0e0dc"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only {"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "    display: none !important"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": "    @page {"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "        margin: 1.25cm .75cm"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "    * {"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "        -webkit-box-shadow: none !important;"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "        box-shadow: none !important;"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "        text-shadow: none !important"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "    a {"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "        color: inherit !important;"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "        text-decoration: underline !important"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "    a.bare, a[href^\u003d\"#\"], a[href^\u003d\"mailto:\"] {"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "        text-decoration: none !important"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": "    a[href^\u003d\"http:\"]:not(.bare):after, a[href^\u003d\"https:\"]:not(.bare):after {"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "        content: \"(\" attr(href) \")\";"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": "        display: inline-block;"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: .875em;"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-left: .25em"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "    abbr[title]:after {"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": "        content: \" (\" attr(title) \")\""
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": "    pre, blockquote, tr, img, object, svg {"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "        page-break-inside: avoid"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "    thead {"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "        display: table-header-group"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "    svg {"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "        max-width: 100%"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "    p, blockquote, dt, td.content {"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: 1em;"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": "        orphans: 3;"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "        widows: 3"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "    h2, h3, #toctitle, .sidebarblock \u003e .content \u003e .title {"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "        page-break-after: avoid"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc, .sidebarblock, .exampleblock \u003e .content {"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": "        background: none !important"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": "    #toc {"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px solid #ddddd8 !important;"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-bottom: 0 !important"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": "    .sect1 {"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "        padding-bottom: 0 !important"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "    .sect1 + .sect1 {"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "        border: 0 !important"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "    #header \u003e h1:first-child {"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-top: 1.25rem"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #header {"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "        text-align: center"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #header \u003e h1:first-child {"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": "        border: 0 !important;"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "        margin: 2.5em 0 1em 0"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #header .details {"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "        border: 0 !important;"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "        display: block;"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "        padding: 0 !important"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #header .details span:first-child {"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "        margin-left: 0 !important"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #header .details br {"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "        display: block"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #header .details br + span:before {"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": "        content: none !important"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #toc {"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "        border: 0 !important;"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "        text-align: left !important;"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "        padding: 0 !important;"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": "        margin: 0 !important"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "    body.book #toc, body.book #preamble, body.book h1.sect0, body.book .sect1 \u003e h2 {"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": "        page-break-before: always"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "    .listingblock code[data-lang]:before {"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": "        display: block"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": "        background: none !important;"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": "        padding: 0 .9375em"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": "        color: rgba(0, 0, 0, .6) !important;"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "-"
        },
        "content": "        font-size: .9em"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "-"
        },
        "content": "    .hide-on-print {"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none !important"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "-"
        },
        "content": "    .print-only {"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "-"
        },
        "content": "        display: block !important"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "    .hide-for-print {"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none !important"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "-"
        },
        "content": "    .show-for-print {"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "-"
        },
        "content": "        display: inherit !important"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 2030
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #0074c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #e46c0a;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e .title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    color: rgb(197, 90, 17);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px #e46c0a solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 213
    }
  },
  {
    "path": "src/main/java/owlmoney/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.exception.ProfileException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Starts an instance of OwlMoney."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class Main {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseCommand parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String PROFILE_FILE_NAME \u003d \"profile.csv\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Initializes a new OwlMoney session."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Main() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parser \u003d new ParseCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if username meets requirement."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name Profile user name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws MainException If name is empty or if name contain special characters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private void checkUserName(String name) throws MainException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (name.isEmpty() || name.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new MainException(\"Name cannot be empty!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!RegexUtil.regexCheckName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new MainException(\"Name can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets username when first run."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private void getUserName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        boolean check \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        while (check) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                String username \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkUserName(username);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                profile \u003d new Profile(username, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                check \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } catch (MainException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                ui.printError(e.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Starts up the initialized OwlMoney session."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        boolean hasExited \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            List\u003cString[]\u003e importData \u003d storage.readFile(PROFILE_FILE_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String userName \u003d importData.get(0)[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            profile \u003d new Profile(userName, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.greet(profile.profileGetUsername());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Unable to import profile files, starting fresh\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.firstTimeRun();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            getUserName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.greet(profile.profileGetUsername());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                storage.writeProfileFile(new String[]{profile.profileGetUsername()},PROFILE_FILE_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"Unable to save profile now, your data is at risk, but we will\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        + \" try saving again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (parser.hasNextLine()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Command command \u003d parser.parseLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                hasExited \u003d command.execute(profile, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (hasExited) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } catch (ParserException | BankException | TransactionException | BondException | CardException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    | GoalsException | ProfileException exceptionMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(exceptionMessage.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 7,
      "TerenceTanWT": 1,
      "valerietyj": 38,
      "shamussy": 69
    }
  },
  {
    "path": "src/main/java/owlmoney/MainException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class MainException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates a new GoalsException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public MainException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 9,
      "-": 15
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.exception.ProfileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Executes the expected command and prints the results."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the expected commands given by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return True if OwlMoney should terminate after execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract boolean execute(Profile profile, Ui ui) throws BankException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            TransactionException, BondException, CardException, GoalsException, ProfileException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 12,
      "TerenceTanWT": 1,
      "valerietyj": 3,
      "shamussy": 11
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Executes ExitCommand and ends OwlMoney."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ExitCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to exit OwlMoney."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return true so OwlMoney will terminate after execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 28,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/PlaceHolderEmptyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class PlaceHolderEmptyCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public PlaceHolderEmptyCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.message \u003d \"Execute command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 15,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Executes UpdateCommand and prints the result."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to update outdated recurring transactions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return False so OwlMoney does not terminate yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileUpdate(ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 23
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/AddInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.Investment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddInvestmentCommand to add a new investment object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of AddInvestmentCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name   Name of new investment object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount Initial amount of money in the new investment object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public AddInvestmentCommand(String name, double amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to create a new investment account in the profile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If duplicate investment account name found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank newInvestment \u003d new Investment(this.name, this.amount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileAddNewBank(newInvestment, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "shamussy": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/AddSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddSavingsCommand to add a new saving object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddSavingsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of AddSavingCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name   Name of new saving object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income Income of new saving object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Initial amount of new saving object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddSavingsCommand(String name, double income, double amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to create a new savings account in the profile."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If duplicate savings account name found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank newSaving \u003d new Saving(this.name, this.amount, this.income);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileAddNewBank(newSaving, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 35,
      "shamussy": 8
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/DeleteInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteInvestmentCommand to delete an investment object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String BANK_TYPE \u003d \"investment\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of DeleteInvestmentCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName Bank name to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public DeleteInvestmentCommand(String bankName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to delete an investment account from the profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank account fails check criteria."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileDeleteBank(this.bankName, BANK_TYPE, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "shamussy": 35
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/DeleteSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteSavingsCommand to delete a saving object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteSavingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of DeleteSavingCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank name to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteSavingsCommand(String bankName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to delete a savings account from the profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank account fails check criteria."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileDeleteBank(this.bankName, SAVING, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 26,
      "shamussy": 9
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/EditInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditInvestmentCommand to edit an investment object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class EditInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of EditInvestmentCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name    Name of bank account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount  New amount of bank account if any."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName New name of bank account if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public EditInvestmentCommand(String name, String amount, String newName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to edit the details of an investment account in the profile."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If duplicate bank account name is found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileEditInvestmentAccount(name, newName, amount, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 2,
      "shamussy": 38
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/EditSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditSavingsCommand to edit a saving object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditSavingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String income;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of EditSavingCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name    Name of bank account."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income  New income of bank account if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount  New amount of bank account if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of bank account if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditSavingsCommand(String name, String income, String amount, String newName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to edit the details of a savings account in the profile."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If duplicate bank account name is found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileEditSavingsAccount(name, newName, amount, income, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 40,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/ListInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListInvestmentCommand to list investment objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to list savings in the profile."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If there are no bank account of specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileListBanks(INVESTMENT, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "shamussy": 25
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/ListSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListSavingsCommand to list saving objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListSavingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to list savings in the profile."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If there are no bank account of specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileListBanks(SAVING, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 18,
      "shamussy": 7
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bond/AddBondCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Executes AddBondCommand and prints the results."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddBondCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bondName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankAccountName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final double rate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String BONDS \u003d \"bonds\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of AddBondCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName name of the bond."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount   cost of the bond."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate     interest rate of the bond."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date     date the bond was purchased."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     number of years the bond holds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public AddBondCommand(String bondName, String bankAccountName, double amount, double rate, Date date, int year,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bondName \u003d bondName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankAccountName \u003d bankAccountName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to create a new investment account in the profile."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if used on savings or bank does not exist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are no bonds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws CardException if card commands are executed in bonds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, BondException, CardException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond newBond \u003d new Bond(this.bondName, this.amount, this.rate, this.date, this.year);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Expenditure newExpenditure \u003d new Expenditure(this.bondName, this.amount, this.date, BONDS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileIsBondUnique(this.bankAccountName, newBond);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileAddNewExpenditure(this.bankAccountName, newExpenditure, ui, this.type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileAddNewBond(this.bankAccountName, newBond, ui);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 6,
      "BrianTKM": 1,
      "shamussy": 60
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bond/DeleteBondCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Executes DeleteBondCommand and prints the results."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteBondCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bondName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String BOND \u003d \"bonds\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of DeleteInvestmentCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public DeleteBondCommand(String bankName, String bondName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bondName \u003d bondName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to delete an investment account from the profile."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if used on savings or bank does not exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are no bonds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BondException, BankException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond tempBond \u003d profile.profileGetBond(this.bankName, this.bondName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Deposit newDeposit \u003d new Deposit(this.bondName, tempBond.getAmount(), new Date(), BOND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileAddNewDeposit(this.bankName, newDeposit, ui, BOND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileDeleteBond(this.bankName, this.bondName, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "shamussy": 48
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bond/EditBondCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Executes EditBondCommand and prints the results."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class EditBondCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bondName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String rate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of EditInvestmentCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to be deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate     the new rate of the bond."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public EditBondCommand(String bankName, String bondName, String rate, String year) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bondName \u003d bondName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to edit the bond in the investment account from the profile."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if used on savings or bank does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are no bonds."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BondException, BankException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileEditBond(this.bankName, this.bondName, this.year, this.rate, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 47
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bond/ListBondCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Executes ListBondCommand and prints the results."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListBondCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor to create an instance of ListBondCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName   Bank account name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum Number of expenditures to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ListBondCommand(String bankName, int displayNum) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to list the bonds in the investment account from the profile."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if used on savings or bank does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are no bonds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileListBonds(bankName, ui, displayNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/AddCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddCardCommand to add a new card object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final double limit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final double rebate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of AddCardCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name   Credit card name of the new card object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param limit  Credit card monthly limit of the new card object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param rebate Credit card monthly rebate of the new card object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public AddCardCommand(String name, double limit, double rebate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Executes the function to create a new card in the profile."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If duplicate credit card name found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Card newCard \u003d new Card(this.name, this.limit, this.rebate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileAddNewCard(newCard, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 5,
      "TerenceTanWT": 38,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/DeleteCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteCardCommand to delete a card object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance the DeleteCardCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name Card name to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public DeleteCardCommand(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Executes the function to delete a card from the profile."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If card does not exist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileDeleteCard(this.name, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "TerenceTanWT": 32,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/EditCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditCardCommand to edit a credit card object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String limit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String rebate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of EditCardCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name    Name of credit card."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param limit   New limit of credit card if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate  New rebate of credit card if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newName New name of credit card if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public EditCardCommand(String name, String limit, String rebate, String newName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Executes the function to edit the details of a credit card in the profile."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If card cannot be found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileEditCardDetails(name, newName, limit, rebate, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 42,
      "TerenceTanWT": 1,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/ListCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListCardCommand to list card objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ListCardCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Executes the function to list cards in the profile."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If CardList is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileListCards(ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "TerenceTanWT": 23,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/exception/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * FILL IN JAVADOCS HERE ##############################################################################."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new parserException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 27
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/find/FindBankOrCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes FindBankOrCardCommand to find bank or card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class FindBankOrCardCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of FindBankOrCardCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name The name of either bank or card."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents type of object to find."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public FindBankOrCardCommand(String name, String type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Executes the function to find either bank or card."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If there is no matches for saving or investment object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If the credit card name cannot be found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, CardException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.findBankOrCard(this.name, this.type, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 41
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/find/FindBondCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes FindBondCommand to find bonds."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class FindBondCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of FindBondCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name The bond name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param from The name of the investment account containing the bond."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public FindBondCommand(String name, String from) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Executes the function to find the bonds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If investment account does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BondException If no bonds could be found."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.findBond(this.name, this.from, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/find/FindTransactionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes FindTransactionCommand to find transaction."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class FindTransactionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String fromDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String toDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of FindTransactionCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name        The name of bank or card depending on the search."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate    The date to search from."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate      The date to search until."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to search for."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category    The category keyword to search for."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type        The type of object to search for such as bank or card object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public FindTransactionCommand(String name, String fromDate, String toDate, String description,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String category, String type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.fromDate \u003d fromDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Executes the function to find the transaction."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank name specified does not exist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If parsing of date fails."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If card with the name does not exist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.findTransaction(this.name, this.fromDate, this.toDate, this.description, this.category, this.type, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 55
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/goals/AddGoalsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.command.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.Goals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddGoalsCommand to add a new goal object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class AddGoalsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String savingName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of AddGoalsCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name   Name of new goal object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param amount Income of new goal object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param date   Initial amount of new goal object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public AddGoalsCommand(String name, double amount, Date date, String savingName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.savingName \u003d savingName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Executes the function to create a new goals in the profile."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException invalid parameters / attempt to add the same goal name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws GoalsException, BankException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        Goals newGoals;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (savingName.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            newGoals \u003d new Goals(this.name, this.amount, this.date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            Bank savingAccount \u003d profile.profileGetSavingAccount(savingName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            newGoals \u003d new Goals(this.name, this.amount, this.date, savingAccount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        profile.profileAddGoals(newGoals, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "valerietyj": 57
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/goals/DeleteGoalsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.command.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteGoalsCommand to delete goal object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class DeleteGoalsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of DeleteGoalsCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name Name of goal object to delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public DeleteGoalsCommand(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Executes the function to delete goals in the profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If delete invalid goals."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws GoalsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        profile.profileDeleteGoals(name, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "valerietyj": 36
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/goals/EditGoalsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.command.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditGoalsCommand to edit goal object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class EditGoalsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String savingName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private Bank savingAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of EditGoalsCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name    Name of goal object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param amount  Income of new goal object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param date    Initial amount of new goal object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName New name of the goal object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public EditGoalsCommand(String name, String amount, Date date, String newName, String savingName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.savingName \u003d savingName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Executes the function to edit goals in the profile."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If goal does not exists / invalid parameters provided"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws GoalsException, BankException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!(savingName.isEmpty() || savingName.isBlank())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            savingAccount \u003d profile.profileGetSavingAccount(savingName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        profile.profileEditGoals(name, amount, date, newName, savingAccount, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "valerietyj": 55
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/goals/ListGoalsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.command.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListGoalsCommand to list goals object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class ListGoalsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Executes the function to list goals in the profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        profile.profileListGoals(ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "valerietyj": 23
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/profile/EditProfileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.command.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.exception.ProfileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " * Executes EditProfileCommand to edit profile name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class EditProfileCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of EditProfileCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name    Name of goal object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName  New name of object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public EditProfileCommand(String name, String newName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Executes the function to edit profile name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ProfileException If profile name does not exists / invalid parameters provided."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws ProfileException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileSetUsername(this.name, this.newName, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 38,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddDepositCommand to add a new deposit transaction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class AddDepositCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String type \u003d \"bank\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category \u003d \"deposit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of AddDepositCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount deposited."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of deposit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of deposit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddDepositCommand(String name, double amount, Date date, String description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new deposit to the bank."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newDeposit \u003d new Deposit(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileAddNewDeposit(accName, newDeposit, ui, this.type);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 47,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddExpenditureCommand to add an expenditure transaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of AddExpenditureCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of the expenditure."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of the expenditure."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of the expenditure."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of the expenditure."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type        Represents type of expenditure to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public AddExpenditureCommand(String name, double amount, Date date, String description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String category, String type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new expenditure to the bank account."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If the credit card name cannot be found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, CardException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newExpenditure \u003d new Expenditure(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileAddNewExpenditure(accName, newExpenditure, ui, this.type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 29,
      "BrianTKM": 26,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddRecurringExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes AddRecurringExpenditureCommand to add a recurring expenditure transaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class AddRecurringExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of AddRecurringExpenditureCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of the recurring expenditure."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of the next expenditure."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of the recurring expenditure."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of the recurring expenditure."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type        Represents type of expenditure to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddRecurringExpenditureCommand(String name, double amount, Date date, String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String category, String type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new recurring expenditure to the bank account."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exists or is an investment account."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If the recurring expenditure list is full."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newExpenditure \u003d new Expenditure(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileAddRecurringExpenditure(accName, newExpenditure, ui, this.type);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 56
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteDepositCommand to delete a deposit transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteDepositCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of DeleteDepositCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index    Transaction number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteDepositCommand(String bankName, int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d bankName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileDeleteDeposit(this.expNumber, this.from, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 4,
      "BrianTKM": 32,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteExpenditureCommand to delete an expenditure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of a DeleteExpenditureCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Transaction number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param accountName Card or Bank account name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type        The type of account to delete expenditure from."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public DeleteExpenditureCommand(int index, String accountName, String type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.from \u003d accountName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete an expenditure transaction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If card does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileDeleteExpenditure(this.expNumber, this.from, ui, this.type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 6,
      "BrianTKM": 28,
      "TerenceTanWT": 5,
      "shamussy": 6
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteRecurringExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes DeleteRecurringExpenditureCommand to delete a recurring expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteRecurringExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expenditureNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of a DeleteRecurringExpenditureCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Recurring expenditure index number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accountName Card or Bank account name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type        The type of account to delete expenditure from."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteRecurringExpenditureCommand(int index, String accountName, String type) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expenditureNumber \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d accountName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a recurring expenditure transaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist or is an investment account."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileDeleteRecurringExpenditure(this.from, this.expenditureNumber, ui, this.type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 42
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditDepositCommand to edit a deposit transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditDepositCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of EditDepositCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      New deposit amount if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        New date of deposit if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of deposit if any."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Transaction number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditDepositCommand(String name, String amount, String date, String description, int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to edit a deposit transaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileEditDeposit(index, accName, description, amount, date, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 4,
      "BrianTKM": 41,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditExpenditureCommand to edit an expenditure transaction."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of EditExpenditureCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      New amount of expenditure if any."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        New date of expenditure if any."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of expenditure if any."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    New category of expenditure if any."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Transaction number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type        The type of account to retrieve expenditure from."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public EditExpenditureCommand(String name, String amount, String date,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String description, String category, int index, String type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to edit an expenditure transaction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If card does not exist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileEditExpenditure(index, accName, description, amount, date, category, ui, this.type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 7,
      "BrianTKM": 44,
      "TerenceTanWT": 2,
      "shamussy": 6
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditRecurringExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes EditRecurringExpenditureCommand to edit a recurring expenditure transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditRecurringExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of EditRecurringExpenditureCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      New amount of recurring expenditure if any."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of recurring expenditure if any."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    New category of recurring expenditure if any."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Transaction number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type        The type of account to retrieve expenditure from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditRecurringExpenditureCommand(String name, String amount,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String description, String category, int index, String type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a recurring expenditure."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist or is an investment account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditure or index is out of range."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileEditRecurringExpenditure(accName, index, description, amount, category, ui, this.type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 52
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListDepositCommand to list deposits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ListDepositCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ListDepositCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name       Bank account name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListDepositCommand(String name, int displayNum) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to list the specified number of deposit transactions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If invalid transaction"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileListDeposit(accName, ui, displayNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 33,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListExpenditureCommand to list expenditures."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ListExpenditureCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name       Bank account name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type       Represents type of expenditure to be listed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ListExpenditureCommand(String name, int displayNum, String type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to list the specified number of expenditures."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If no expenditure found or no expenditure is in the list.."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If the credit card name cannot be found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.profileListExpenditure(accName, ui, displayNum, this.type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 9,
      "BrianTKM": 29,
      "shamussy": 7
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListRecurringExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes ListRecurringExpenditureCommand to list expenditures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ListRecurringExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ListRecurringExpenditureCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name       Bank account name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type       Represents type of expenditure to be listed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListRecurringExpenditureCommand(String name, String type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to list all recurring expenditure."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist or is an investment account."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are no recurring expenditures."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.profileListRecurringExpenditure(accName, ui, this.type);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 38
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transfer/TransferCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.transfer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Executes TransferCommand to transfer fund."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class TransferCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of TransferCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param from   The account name for transferring the fund."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param to     The account name to receive the fund."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount The amount to be transferred."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param date   The date that the fund was transferred."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public TransferCommand(String from, String to, double amount, Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Executes the function to transfer the fund in the profile."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank account could not be found or insufficient amount to transfer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.transferFund(this.from, this.to, this.amount, this.date, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 47
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.UpdateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the first instance of parsing user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user has entered."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseCommand extends Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseType parseType \u003d new ParseType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] COMMAND_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/help\", \"/undo\", \"/add\", \"/edit\", \"/delete\", \"/list\", \"/find\", \"/transfer\", \"/exit\", \"/update\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_KEYWORD_LISTS \u003d Arrays.asList(COMMAND_KEYWORDS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if there are any more user input if using I/O redirection."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a boolean true when there are more inputs and false when no more input is detected."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Takes in the user input and checks if it is blank first before extracting the command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command extracted is then check against a whitelist before removing it from the input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command then determines which command to execute."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a Command object that is required to be executed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if command is not in the whitelist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command parseLine() throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parseIsBlank(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String command \u003d parseFirstField(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!COMMAND_KEYWORD_LISTS.contains(command)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \" is an invalid command\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String data \u003d removeFirstField(input, command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseCommandMenu(command, data);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user input is full of spaces or is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if it is blank or full of spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void parseIsBlank(String input) throws ParserException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Input cannot be blank or space-bar only\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command menu determines what type of command to execute and pass to parseType."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted with parseFirstField."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data    The data that has command removed from the first field."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The Command object that is required to be executed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException When an invalid command is detected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseCommandMenu(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/add\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/delete\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/edit\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/transfer\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/find\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/list\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!data.isBlank()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"/exit cannot have trailing arguments\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/update\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!data.isBlank()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"/update cannot have trailing arguments\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new UpdateCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid command\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 4,
      "BrianTKM": 20,
      "shamussy": 76
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseRawData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the third layer of parsing for raw data after removing command and type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This forms the baseline raw data parsing that specific data level parsers can extend from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseRawData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final int NEXT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts specific keyword values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data        The raw data that requires parsing to extract keyword values."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keyword     The keyword that we want to extract."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keywordList The list of keywords that are available in the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The extracted keyword value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if duplicated keywords are detected."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String extractParameter(String data, String keyword, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] splitTypeSpecificArguments \u003d data.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String parameter \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkDuplicateKeywords(splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int startIndex \u003d findStartIndex(splitTypeSpecificArguments, keyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (startIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int endIndex \u003d findEndIndex(startIndex, splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            parameter \u003d concatenateParameter(startIndex, endIndex, splitTypeSpecificArguments);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkDuplicateKeywords(String[] splitArray, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordList.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            checkEachKeyword(keywordList[i], splitArray);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkEachKeyword(String keyword, String[] splitArray) throws ParserException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int keywordCounter \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c splitArray.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitArray[i].equals(keyword)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                keywordCounter++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (keywordCounter \u003e 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"Duplicate \" + keyword + \" found!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findStartIndex(String[] splitTypeSpecificArguments, String keyword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitTypeSpecificArguments[i].equals(keyword)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findEndIndex(int startIndex, String[] splitTypeSpecificArguments, String[] keywordList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            for (int k \u003d 0; k \u003c keywordList.length; k++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (splitTypeSpecificArguments[i].equals(keywordList[k])) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return splitTypeSpecificArguments.length;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String concatenateParameter(int startIndex, int endIndex, String[] splitTypeSpecificArguments) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        StringBuilder individualParameter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (individualParameter.toString().isEmpty() || individualParameter.toString().isBlank()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(\" \").append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return individualParameter.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "TerenceTanWT": 61,
      "shamussy": 22
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.PlaceHolderEmptyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.ListInvestmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.ListSavingsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.goals.ListGoalsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.card.ListCardCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseAddBond;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseBond;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseDeleteBond;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseEditBond;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseListBond;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.card.ParseAddCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.card.ParseCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.card.ParseDeleteCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.card.ParseEditCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.find.ParseFindBankOrCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.find.ParseFindBond;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.find.ParseFindTransaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.goals.ParseAddGoals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.goals.ParseDeleteGoals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.goals.ParseEditGoals;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.goals.ParseGoals;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseAddInvestment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseDeleteInvestment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseEditInvestment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseInvestment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.profile.ParseEditProfile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.saving.ParseAddSaving;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.saving.ParseDeleteSaving;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.saving.ParseEditSaving;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.saving.ParseSaving;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseAddDeposit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseDeleteDeposit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseDeposit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseEditDeposit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseListDeposit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseAddExpenditure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseAddRecurringExpenditure;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseDeleteExpenditure;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseDeleteRecurringExpenditure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseEditExpenditure;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseEditRecurringExpenditure;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseExpenditure;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseListExpenditure;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseListRecurringExpenditure;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseRecurringExpenditure;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.transfer.ParseTransfer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the second layer of parsing for secondary category of command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user desires after specifying the command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class ParseType extends Parser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * List of whitelisted keywords that the user can use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] TYPE_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/savings\", \"/investment\", \"/cardexpenditure\", \"/bankexpenditure\", \"/goals\", \"/card\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/recurbankexp\", \"/bonds\", \"/profile\", \"/deposit\", \"/fund\", \"/banktransaction\", \"/cardtransaction\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e TYPE_KEYWORD_LISTS \u003d Arrays.asList(TYPE_KEYWORDS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BANK \u003d \"bank\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String CARD \u003d \"card\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String BOND \u003d \"bonds\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String GOALS \u003d \"goals\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Determines the type of command and checks if it is of valid type."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * After determining that it is of a legal type."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The type is extracted just like how the first field was extracted when extracting command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command previously extracted from the first field of user input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data    The remaining user input string with command removed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The raw data left with command and type removed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user specified an invalid type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Command parseData(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String type \u003d parseFirstField(data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!TYPE_KEYWORD_LISTS.contains(type)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(type + \" is an invalid type\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String rawData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeListFirstField(data, type);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeFirstField(data, type);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseTypeMenu(command, type, rawData);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user wants to delete profile."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The extracted first field from the initial user input that determines the command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user wants to delete his profile."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void isDeleteProfile(String command) throws ParserException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Profile cannot be deleted\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The parseTypeMenu determines what type of command object to generate based on the command and type."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted from the initial first field."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type    The type of command extracted from the subsequent first field after first layer of parsing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rawData The remaining data after removing command and type."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The command object that is required to be executed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException when an invalid type if specified."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseTypeMenu(String command, String type, String rawData) throws ParserException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/profile\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                ParseEditProfile parseEditProfile \u003d new ParseEditProfile(rawData);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseEditProfile.fillHashTable();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseEditProfile.checkParameter();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return parseEditProfile.getCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                isDeleteProfile(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for profile\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/savings\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseAddSaving \u003d new ParseAddSaving(rawData);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.fillHashTable();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.checkParameter();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseAddSaving.getCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseEditSaving \u003d new ParseEditSaving(rawData);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.fillHashTable();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.checkParameter();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseEditSaving.getCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseDeleteSaving \u003d new ParseDeleteSaving(rawData);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.fillHashTable();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.checkParameter();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseDeleteSaving.getCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return new ListSavingsCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/find\".equals(command)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseFindBankOrCard parseFindSaving \u003d new ParseFindBankOrCard(rawData, SAVING);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindSaving.fillHashTable();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindSaving.checkParameter();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseFindSaving.getCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for savings\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/investment\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseInvestment parseAddInvestment \u003d new ParseAddInvestment(rawData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddInvestment.fillHashTable();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddInvestment.checkParameter();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseAddInvestment.getCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseInvestment parseEditInvestment \u003d new ParseEditInvestment(rawData);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseEditInvestment.fillHashTable();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseEditInvestment.checkParameter();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseEditInvestment.getCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseInvestment parseDeleteInvestment \u003d new ParseDeleteInvestment(rawData);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseDeleteInvestment.fillHashTable();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseDeleteInvestment.checkParameter();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseDeleteInvestment.getCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return new ListInvestmentCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/find\".equals(command)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseFindBankOrCard parseFindInvestment \u003d new ParseFindBankOrCard(rawData, INVESTMENT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindInvestment.fillHashTable();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindInvestment.checkParameter();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseFindInvestment.getCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for investment\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/bonds\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseBond parseAddBond \u003d new ParseAddBond(rawData, BOND);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddBond.fillHashTable();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddBond.checkParameter();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseAddBond.getCommand();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseBond parseEditBond \u003d new ParseEditBond(rawData, BOND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseEditBond.fillHashTable();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseEditBond.checkParameter();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseEditBond.getCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseBond parseDeleteBond \u003d new ParseDeleteBond(rawData, BOND);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseDeleteBond.fillHashTable();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseDeleteBond.checkParameter();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseDeleteBond.getCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseBond parseListBond \u003d new ParseListBond(rawData, BOND);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseListBond.fillHashTable();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseListBond.checkParameter();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseListBond.getCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/find\".equals(command)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseFindBond parseFindBond \u003d new ParseFindBond(rawData, BOND);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindBond.fillHashTable();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindBond.checkParameter();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseFindBond.getCommand();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for bond\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/bankexpenditure\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure addExp \u003d new ParseAddExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.fillHashTable();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.checkParameter();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addExp.getCommand();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure listExp \u003d new ParseListExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.fillHashTable();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.checkParameter();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listExp.getCommand();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure deleteExp \u003d new ParseDeleteExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.fillHashTable();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.checkParameter();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteExp.getCommand();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure editExp \u003d new ParseEditExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editExp.fillHashTable();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editExp.checkParameter();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editExp.getCommand();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for bank expenditure\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/cardexpenditure\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure addExp \u003d new ParseAddExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.fillHashTable();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.checkParameter();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return addExp.getCommand();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure listExp \u003d new ParseListExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                listExp.fillHashTable();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                listExp.checkParameter();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return listExp.getCommand();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure deleteExp \u003d new ParseDeleteExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                deleteExp.fillHashTable();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                deleteExp.checkParameter();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return deleteExp.getCommand();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure editExp \u003d new ParseEditExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editExp.fillHashTable();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editExp.checkParameter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return editExp.getCommand();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for card expenditure\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/deposit\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit addDep \u003d new ParseAddDeposit(rawData);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addDep.fillHashTable();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addDep.checkParameter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addDep.getCommand();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit listDep \u003d new ParseListDeposit(rawData);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listDep.fillHashTable();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listDep.checkParameter();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listDep.getCommand();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit deleteDep \u003d new ParseDeleteDeposit(rawData);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteDep.fillHashTable();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteDep.checkParameter();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteDep.getCommand();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit editDep \u003d new ParseEditDeposit(rawData);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editDep.fillHashTable();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editDep.checkParameter();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editDep.getCommand();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for deposit\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/card\":"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ParseCard addCard \u003d new ParseAddCard(rawData);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                addCard.fillHashTable();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                addCard.checkParameter();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return addCard.getCommand();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ParseCard deleteCard \u003d new ParseDeleteCard(rawData);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                deleteCard.fillHashTable();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                deleteCard.checkParameter();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return deleteCard.getCommand();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return new ListCardCommand();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseCard editCard \u003d new ParseEditCard(rawData);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editCard.fillHashTable();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editCard.checkParameter();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return editCard.getCommand();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/find\".equals(command)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseFindBankOrCard parseFindCard \u003d new ParseFindBankOrCard(rawData, CARD);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindCard.fillHashTable();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindCard.checkParameter();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseFindCard.getCommand();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for card\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        case \"/goals\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                ParseGoals addGoals \u003d new ParseAddGoals(rawData);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                addGoals.fillHashTable();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                addGoals.checkParameter();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return addGoals.getCommand();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                ParseGoals deleteGoals \u003d new ParseDeleteGoals(rawData);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                deleteGoals.fillHashTable();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                deleteGoals.checkParameter();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return deleteGoals.getCommand();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                ParseGoals editGoals \u003d new ParseEditGoals(rawData);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                editGoals.fillHashTable();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                editGoals.checkParameter();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return editGoals.getCommand();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return new ListGoalsCommand();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for goals\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/recurbankexp\":"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseRecurringExpenditure addRecurringExpenditure \u003d new ParseAddRecurringExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addRecurringExpenditure.fillHashTable();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addRecurringExpenditure.checkParameter();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addRecurringExpenditure.getCommand();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeleteRecurringExpenditure"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        deleteRecurringExpenditure \u003d new ParseDeleteRecurringExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteRecurringExpenditure.fillHashTable();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteRecurringExpenditure.checkParameter();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteRecurringExpenditure.getCommand();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseRecurringExpenditure editRecurringExpenditure \u003d new ParseEditRecurringExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editRecurringExpenditure.fillHashTable();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editRecurringExpenditure.checkParameter();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editRecurringExpenditure.getCommand();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseRecurringExpenditure listRecurringExpenditure \u003d new ParseListRecurringExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listRecurringExpenditure.fillHashTable();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listRecurringExpenditure.checkParameter();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listRecurringExpenditure.getCommand();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for recurbankexp\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/fund\":"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (\"/transfer\".equals(command)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseTransfer parseTransfer \u003d new ParseTransfer(rawData);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseTransfer.fillHashTable();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseTransfer.checkParameter();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseTransfer.getCommand();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for fund\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/banktransaction\":"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (\"/find\".equals(command)) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseFindTransaction parseFindBankTransaction \u003d new ParseFindTransaction(rawData, BANK);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindBankTransaction.fillHashTable();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindBankTransaction.checkParameter();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseFindBankTransaction.getCommand();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for banktransaction\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/cardtransaction\":"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (\"/find\".equals(command)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseFindTransaction parseFindCardTransaction \u003d new ParseFindTransaction(rawData, CARD);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindCardTransaction.fillHashTable();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseFindCardTransaction.checkParameter();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return parseFindCardTransaction.getCommand();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for cardtransaction\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 92,
      "BrianTKM": 100,
      "TerenceTanWT": 25,
      "valerietyj": 35,
      "shamussy": 125
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parser class which provides methods that more specific parser classes will require."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "abstract class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int SPACE_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts the first field of the string based on the first space detected."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The input entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The first element of the input string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String parseFirstField(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return inputSplit[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the first field from the input string after extracting it with parseFirstField."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String removeFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/exit\".equals(firstField) || \"/update\".equals(firstField)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Modified method which removes the first field from the input string after extracting it"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * with parseFirstField if the command is List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String removeListFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (\"/savings\".equals(firstField) || \"/card\".equals(firstField)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                || \"/investment\".equals(firstField) || \"/goals\".equals(firstField)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (input.equals(firstField)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"/list \" + firstField + \" cannot have trailing arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 23,
      "TerenceTanWT": 1,
      "valerietyj": 2,
      "shamussy": 39
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseAddBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bond.AddBondCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parses input by user for adding bonds."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseAddBond extends ParseBond {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseAddBond."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseAddBond(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e bondIterator \u003d bondParameters.keySet().iterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (bondIterator.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d bondIterator.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d bondParameters.get(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (!NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding bond\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (RATE.equals(key)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkInterestRate(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (YEAR.equals(key)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkYear(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the adding of a new bond."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return AddBondCommand to be executed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        AddBondCommand newAddBondCommand \u003d new AddBondCommand(bondParameters.get(NAME),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondParameters.get(FROM),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Double.parseDouble(bondParameters.get(AMOUNT)),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Double.parseDouble(bondParameters.get(RATE)),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                this.date,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Integer.parseInt(bondParameters.get(YEAR)), this.type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newAddBondCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "shamussy": 75
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Abstracts common bond methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class ParseBond {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    HashMap\u003cString, String\u003e bondParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] BOND_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/amount\", \"/name\", \"/rate\", \"/date\", \"/year\", \"/from\", \"/num\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String RATE \u003d \"/rate\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String YEAR \u003d \"/year\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e BOND_KEYWORD_LISTS \u003d Arrays.asList(BOND_KEYWORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of any ParseBond type object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseBond(String data, String type) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \"/bond should not contain \" + parameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!BOND_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, BOND_KEYWORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(NAME,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, BOND_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(DATE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, BOND_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(RATE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, RATE, BOND_KEYWORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(YEAR,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, YEAR, BOND_KEYWORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(FROM,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, BOND_KEYWORD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(NUM,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, BOND_KEYWORD));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    + \" and a value of more than 0\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the interest rate of the bond is more than 0 and less than 100%."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rateString String to be converted to double as the interest rate."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not a double value or amount is more than 100%."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkInterestRate(String rateString) throws ParserException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckInterestRate(rateString)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Interest rate should be less than 100%\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param key        /name or /newname"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param nameString Name of bond"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(key + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond is within 1 and 10 years."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param yearString year in string format."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the year does not follow the specified format of max of 10 years."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkYear(String yearString) throws ParserException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckBondYear(yearString)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Bond years must be between 1 and 10 years\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters entered by the user."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the relevant command to be executed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 6,
      "BrianTKM": 2,
      "valerietyj": 1,
      "shamussy": 185
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseDeleteBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bond.DeleteBondCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parses input by user for editing bonds."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseDeleteBond extends ParseBond {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseDeleteBond."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data raw user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type the type of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteBond(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(RATE, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(YEAR, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e bondIterator \u003d bondParameters.keySet().iterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (bondIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d bondIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d bondParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting a bond\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting a bond\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the deletion of a bond."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Returns DeleteBondCommand to be executed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DeleteBondCommand newDeleteBondCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new DeleteBondCommand(bondParameters.get(FROM), bondParameters.get(NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newDeleteBondCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "shamussy": 66
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseEditBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bond.EditBondCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parses input by user for editing bonds."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseEditBond extends ParseBond {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseEditBond."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data raw user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type the type of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseEditBond(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(AMOUNT, EDIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(DATE, EDIT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e bondIterator \u003d bondParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (bondIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d bondIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d bondParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a bond\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a bond\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (RATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkInterestRate(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (YEAR.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkYear(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the editing of a bond."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Returns EditBondCommand to be executed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        EditBondCommand newEditBondCommand \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new EditBondCommand(bondParameters.get(FROM),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondParameters.get(NAME),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondParameters.get(RATE),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondParameters.get(YEAR));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newEditBondCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "shamussy": 79
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseListBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bond.ListBondCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parses input by user for listing bonds."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseListBond extends ParseBond {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseDeleteBond."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data raw user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type the type of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseListBond(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NAME, LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(AMOUNT, LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(RATE, LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(DATE, LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(YEAR, LIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e bondIterator \u003d bondParameters.keySet().iterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (bondIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d bondIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d bondParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondParameters.put(NUM, \"30\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting a bond\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the deletion of a bond."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Returns ListBondCommand to be executed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ListBondCommand newListBondCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new ListBondCommand(bondParameters.get(FROM), Integer.parseInt(bondParameters.get(NUM)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newListBondCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "shamussy": 66
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseAddCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.card.AddCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * Represents the parsing of inputs for adding a new card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseAddCard extends ParseCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseAddCard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public ParseAddCard(String data) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e cardIterator \u003d cardParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (cardIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d cardIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d cardParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new card\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (LIMIT.equals(key)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkLimit(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (REBATE.equals(key)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkCashBack(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Returns the command to execute the adding of a new card."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return AddCardCommand to be executed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        AddCardCommand newAddCardCommand \u003d new AddCardCommand(cardParameters.get(NAME),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                Double.parseDouble(cardParameters.get(LIMIT)), Double.parseDouble(cardParameters.get(REBATE)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return newAddCardCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 1,
      "TerenceTanWT": 58
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Card methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public abstract class ParseCard {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    HashMap\u003cString, String\u003e cardParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final String[] CARD_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/name\", \"/limit\", \"/rebate\", \"/newname\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(CARD_KEYWORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String LIMIT \u003d \"/limit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String REBATE \u003d \"/rebate\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of Card object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    ParseCard(String data) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Fills the hash table to map each user input to each parameter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, CARD_KEYWORD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(LIMIT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, LIMIT, CARD_KEYWORD));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(REBATE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, REBATE, CARD_KEYWORD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, CARD_KEYWORD));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if the parameter entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param valueString String to be checked and converted to double."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkLimit(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Limit can only be positive numbers\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the parameter entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param valueString String to be checked and converted to double."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkCashBack(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Cash back can only be positive numbers\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 2 digits and 2 decimal places and at most 20\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if the card name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param nameString Name of the card"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"Card name can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(command + \"/card should not contain \" + parameter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters entered by the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the relevant command to be executed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 13,
      "BrianTKM": 11,
      "TerenceTanWT": 104,
      "valerietyj": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseDeleteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.card.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * Represents the parsing of inputs for deleting a card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseDeleteCard extends ParseCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseDeleteCard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public ParseDeleteCard(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkRedundantParameter(LIMIT, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkRedundantParameter(REBATE, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e cardIterator \u003d cardParameters.keySet().iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (cardIterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d cardIterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d cardParameters.get(key);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if ((NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty()))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting a card\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Returns the command to execute the deleting of card."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return DeleteCardCommand to be executed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        DeleteCardCommand newDeleteCardCommand \u003d new DeleteCardCommand(cardParameters.get(NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return newDeleteCardCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "TerenceTanWT": 57,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseEditCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.card.EditCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Parses input by user for editing card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseEditCard extends ParseCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseEditCard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseEditCard(String data) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e cardIterator \u003d cardParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (cardIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d cardIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d cardParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (LIMIT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkLimit(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (REBATE.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkCashBack(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the editing of a card."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Returns EditCardCommand to be executed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        EditCardCommand newEditCardCommand \u003d new EditCardCommand(cardParameters.get(NAME),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardParameters.get(LIMIT), cardParameters.get(REBATE), cardParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return newEditCardCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 63,
      "BrianTKM": 1,
      "shamussy": 5
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/exception/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * ParserException that extends Exception and handles all exception that parser would throw."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new parserException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 27
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/find/ParseFind.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Find methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public abstract class ParseFind {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    HashMap\u003cString, String\u003e findParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String[] FIND_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/name\", \"/desc\", \"/category\", \"/from\", \"/to\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final List\u003cString\u003e FIND_KEYWORD_LISTS \u003d Arrays.asList(FIND_KEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String CATEGORY \u003d \"/category\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String TO \u003d \"/to\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of any ParseFind object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents the type of object to be searched."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseFind(String data, String type) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(command + \" should not contain \" + parameter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!FIND_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        findParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, FIND_KEYWORD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        findParameters.put(CATEGORY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, CATEGORY, FIND_KEYWORD));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        findParameters.put(FROM,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, FIND_KEYWORD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        findParameters.put(TO,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, TO, FIND_KEYWORD));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        findParameters.put(NAME,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, FIND_KEYWORD));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param descString The description of the transaction."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkDescription(String descString) throws ParserException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"/desc can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the category entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param categoryString The category of the transaction."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkCategory(String categoryString) throws ParserException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!RegexUtil.regexCheckCategory(categoryString)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            \"/category can only contains letters and at most 15 characters\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the bank or card name entered by the user does not contain"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * special character and not too long."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param nameString Name of bank or card"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"/name and /from can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the date is of valid format and not after now."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    throw new ParserException(\"/from and /to date cannot be after today\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Abstract method where each child parser for ParseFind performs different checks on the parameters."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Abstract method where each child parser for ParseFind  creates different commands."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 164,
      "valerietyj": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/find/ParseFindBankOrCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.find.FindBankOrCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Represents the parsing of inputs for finding of bank or card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseFindBankOrCard extends ParseFind {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String FINDBANKORCARD \u003d \"/find /savings or /find /investment or /find /card\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseFindBankOrCard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents the type of object to be searched."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseFindBankOrCard(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, FINDBANKORCARD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(CATEGORY, FINDBANKORCARD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(FROM, FINDBANKORCARD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(TO, FINDBANKORCARD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e findIterator \u003d findParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (findIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d findIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d findParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (!DESCRIPTION.equals(key) \u0026\u0026 !CATEGORY.equals(key) \u0026\u0026 !FROM.equals(key) \u0026\u0026 !TO.equals(key)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when doing a search\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the command to find bank or card."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Returns FindBankOrCardCommand to be executed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        FindBankOrCardCommand newFindBankOrCardCommand \u003d new FindBankOrCardCommand(findParameters.get(NAME), this.type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return newFindBankOrCardCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 61
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/find/ParseFindBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.find.FindBondCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Represents the parsing of inputs for finding of bonds."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseFindBond extends ParseFind {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String FINDBOND \u003d \"/find /bonds\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseFindBond."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents the type of object to be searched."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseFindBond(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, FINDBOND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(CATEGORY, FINDBOND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkRedundantParameter(TO, FINDBOND);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e findIterator \u003d findParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (findIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d findIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d findParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (!DESCRIPTION.equals(key) \u0026\u0026 !CATEGORY.equals(key) \u0026\u0026 !TO.equals(key)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when doing a search\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the command to find bonds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Returns FindBondCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        FindBondCommand newFindBondCommand \u003d new FindBondCommand(findParameters.get(NAME), findParameters.get(FROM));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return newFindBondCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 63
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/find/ParseFindTransaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.find.FindTransactionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Represents the parsing of inputs for finding of transactions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseFindTransaction extends ParseFind {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseFindTransaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents the type of object to be searched."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseFindTransaction(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e findIterator \u003d findParameters.keySet().iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        boolean isFromExist \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        boolean isToExist \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date fromDate \u003d new Date();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date toDate \u003d new Date();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (findIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d findIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d findParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                fromDate \u003d checkDate(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                isFromExist \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (TO.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                toDate \u003d checkDate(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                isToExist \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkCategory(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when finding transaction\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if ((isFromExist \u0026\u0026 !isToExist) || (isToExist \u0026\u0026 !isFromExist)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"/from and /to both must exist to be a valid command.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (isFromExist \u0026\u0026 isToExist) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            checkDateRange(fromDate, toDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (findCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"Finding of transaction should have at least 1 parameter \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"which is not empty for find.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks the to date is not before the from date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the to date is before the from date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void checkDateRange(Date fromDate, Date toDate) throws ParserException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (toDate.before(fromDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"/to date cannot be before /from date.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the command to find transaction."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Returns FindTransactionCommand to be executed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        FindTransactionCommand newFindTransactionCommand \u003d new FindTransactionCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            findParameters.get(NAME), findParameters.get(FROM), findParameters.get(TO),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            findParameters.get(DESCRIPTION),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            findParameters.get(CATEGORY), this.type);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return newFindTransactionCommand;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mong-nus": 102
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/goals/ParseAddGoals.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.parser.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.goals.AddGoalsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " * Represents the parsing of inputs for adding a new goal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class ParseAddGoals extends ParseGoals {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates instance of ParseAddGoals Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param data raw data of user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is of invalid type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public ParseAddGoals(String data) throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        //check wrong parameter e.g. if user accidentally keys in /date instead of by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If there are nay invalid or missing input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        Iterator\u003cString\u003e goalsIterator \u003d goalsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkOptionalParameter(goalsParameters.get(BY), goalsParameters.get(IN));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        while (goalsIterator.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String key \u003d goalsIterator.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String value \u003d goalsParameters.get(key);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding new goals\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding new goals\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (BY.equals(key) \u0026\u0026 (!value.isBlank())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                by \u003d checkDate(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (IN.equals(key) \u0026\u0026 (!value.isBlank())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkInt(IN, value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                by \u003d convertDaysToDate(Integer.parseInt(value));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (!value.isBlank())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if only one of /by or /in is provided for Goals deadline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param by Date of goals deadline."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param in Days of goals deadline."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If both /by and /in provided, or none provided."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkOptionalParameter(String by, String in) throws ParserException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (by.isBlank() \u0026\u0026 in.isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"/by and /in cannot be both empty when adding new goals\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        } else if (!by.isBlank() \u0026\u0026 !in.isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"/by and /in cannot be specified concurrently when adding new goals\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Returns command to execute the adding of a new goal."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return AddGoalsCommand to be executed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        AddGoalsCommand newAddGoalsCommand \u003d new AddGoalsCommand(goalsParameters.get(NAME),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                Double.parseDouble(goalsParameters.get(AMOUNT)), by, goalsParameters.get(FROM));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return newAddGoalsCommand;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 96
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/goals/ParseDeleteGoals.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.parser.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.goals.DeleteGoalsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import javax.swing.text.html.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " * Represents the parsing of inputs for deleting a goal."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class ParseDeleteGoals extends ParseGoals {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of ParseDeleteGoals Class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param data raw data of the input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If redundant parameter is provided or first parameter is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public ParseDeleteGoals(String data) throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkRedundantParameter(NEW_NAME, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkRedundantParameter(BY, DELETE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        Iterator\u003cString\u003e goalsIterator \u003d goalsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        while (goalsIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String key \u003d goalsIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String value \u003d goalsParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting goals\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Returns the command to execute the deleting of a goal."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return DeleteGoalsCommand to be executed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        DeleteGoalsCommand newDeleteGoalsCommand \u003d new DeleteGoalsCommand(goalsParameters.get(NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return newDeleteGoalsCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "valerietyj": 61
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/goals/ParseEditGoals.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.parser.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.goals.EditGoalsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " * Represents the parsing of inputs for editing a goal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class ParseEditGoals extends ParseGoals {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of ParseEditGoals class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param data raw data of the input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If valid parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public ParseEditGoals(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        Iterator\u003cString\u003e goalIterator \u003d goalsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        while (goalIterator.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String key \u003d goalIterator.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String value \u003d goalsParameters.get(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (BY.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                by \u003d checkDate(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (IN.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkInt(IN, value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                by \u003d convertDaysToDate(Integer.parseInt(value));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Returns command to execute editing of goals."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return EditGoalsCommand to be executed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        EditGoalsCommand newEditGoalsCommand \u003d new EditGoalsCommand(goalsParameters.get(NAME),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                goalsParameters.get(AMOUNT),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                by, goalsParameters.get(NEW_NAME), goalsParameters.get(FROM));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return newEditGoalsCommand;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "valerietyj": 83
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/goals/ParseGoals.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.parser.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Goals methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public abstract class ParseGoals {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    HashMap\u003cString, String\u003e goalsParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String[] GOALS_KEYWORD \u003d new String[]{\"/name\", \"/amount\", \"/by\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        \"/newname\", \"/from\", \"/num\", \"/in\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final List\u003cString\u003e GOALS_KEYWORD_LISTS \u003d Arrays.asList(GOALS_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String BY \u003d \"/by\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String IN \u003d \"/in\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of any ParseGoals type object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    ParseGoals(String data) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(command + \" /goals should not contain \" + parameter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        String[] rawDataSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!GOALS_KEYWORD_LISTS.contains(rawDataSplit[0])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"Incorrect parameter\" + rawDataSplit[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsParameters.put(NAME,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, GOALS_KEYWORD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, GOALS_KEYWORD));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsParameters.put(BY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseRawData.extractParameter(rawData, BY, GOALS_KEYWORD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, GOALS_KEYWORD));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsParameters.put(IN,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseRawData.extractParameter(rawData, IN, GOALS_KEYWORD));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsParameters.put(FROM,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, GOALS_KEYWORD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if the goal name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param key  /name or /newname"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name Name of goal"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkName(String key, String name) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!RegexUtil.regexCheckName(name)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(key + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if the date set for the goal is of valid format and not before now."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                if (((Date) date).compareTo(new Date()) \u003c 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    throw new ParserException(\"/date has already passed\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if days set for goal is valid format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param variable    number of days."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param valueString value of number of days."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If days is set too long after or contain invalid parameters."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Converts days to Date."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param day number of days in which user expects to achieve goal."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return Date of goal deadline."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    Date convertDaysToDate(int day) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        //count from now to number of days left"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        calendar.clear();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        calendar.setTime(new Date());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        calendar.add(Calendar.DATE, day);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters entered by the user."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the relevant command to be executed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 4,
      "valerietyj": 178
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseAddInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.AddInvestmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the parsing of inputs for adding a new investment account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseAddInvestment extends ParseInvestment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseAddInvestment."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseAddInvestment(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d investmentParameters.keySet().iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d investmentParameters.get(key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding investment account\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the adding of a new investment account."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return AddInvestmentCommand to be executed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        AddInvestmentCommand newAddInvestmentCommand \u003d new AddInvestmentCommand(investmentParameters.get(NAME),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Double.parseDouble(investmentParameters.get(AMOUNT)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newAddInvestmentCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 60
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseDeleteInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.DeleteInvestmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the parsing of inputs for deleting an investment account.."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseDeleteInvestment extends ParseInvestment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseDeleteInvestment."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteInvestment(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d investmentParameters.keySet().iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d investmentParameters.get(key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting an investment account\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the deletion of investment account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return DeleteInvestmentCommand to be executed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DeleteInvestmentCommand newDeleteInvestmentCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new DeleteInvestmentCommand(investmentParameters.get(NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newDeleteInvestmentCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 56
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseEditInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.EditInvestmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the parsing of inputs for editing an investment account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseEditInvestment extends ParseInvestment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseEditInvestment."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseEditInvestment(String data) throws ParserException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d investmentParameters.keySet().iterator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d investmentParameters.get(key);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the editing of details for investment account."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Returns EditInvestmentCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        EditInvestmentCommand newEditInvestmentCommand \u003d new EditInvestmentCommand(investmentParameters.get(NAME),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                investmentParameters.get(AMOUNT), investmentParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newEditInvestmentCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Investment methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class ParseInvestment {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    HashMap\u003cString, String\u003e investmentParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] INVESTMENT_KEYWORD \u003d new String[] {\"/amount\", \"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e INVESTMENT_KEYWORD_LISTS \u003d Arrays.asList(INVESTMENT_KEYWORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of any ParseInvestment type object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ParseInvestment(String data) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \"/investment should not contain \" + parameter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!INVESTMENT_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        investmentParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, INVESTMENT_KEYWORD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        investmentParameters.put(NAME,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, INVESTMENT_KEYWORD));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        investmentParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, INVESTMENT_KEYWORD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param key        /name or /newname"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(key + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Abstract method where each investment parser performs different checks on the parameters."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Abstract method where each investment parser creates different commands."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "valerietyj": 1,
      "shamussy": 109
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/profile/ParseEditProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.logic.parser.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.command.profile.EditProfileCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " * Represents the parsing of inputs for editing a profile name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class ParseEditProfile {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    HashMap\u003cString, String\u003e profileParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String[] PROFILE_KEYWORD \u003d new String[] {\"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final List\u003cString\u003e PROFILE_KEYWORD_LISTS \u003d Arrays.asList(PROFILE_KEYWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates instance of ParseEditProfile class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If first parameter is of invalid type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public ParseEditProfile(String data) throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!PROFILE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"Incorrect parameter + rawDateSplit[0]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        profileParameters.put(NAME, parseRawData.extractParameter(rawData, NAME, PROFILE_KEYWORD));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        profileParameters.put(NEW_NAME, parseRawData.extractParameter(rawData, NEW_NAME, PROFILE_KEYWORD));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if the profile name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param key        /name and /newname"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param nameString Name of profile"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(key + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks the parameters entered by the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        Iterator\u003cString\u003e profileIterator \u003d profileParameters.keySet().iterator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        while (profileIterator.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String key \u003d profileIterator.next();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String value \u003d profileParameters.get(key);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Returns command to execute editing of profile."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return EditProfileCommand to be executed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        EditProfileCommand newEditProfileCommand \u003d new EditProfileCommand(profileParameters.get(NAME),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                profileParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return newEditProfileCommand;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 109
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseAddSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.AddSavingsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for adding a saving."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseAddSaving extends ParseSaving {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseAddSaving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseAddSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding savings account\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (INCOME.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkIncome(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the adding of a new saving."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return AddSavingsCommand to be executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddSavingsCommand newAddSavingsCommand \u003d new AddSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(INCOME)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(AMOUNT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddSavingsCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 39,
      "TerenceTanWT": 24,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseDeleteSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.DeleteSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for deleting a saving."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteSaving extends ParseSaving {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseDeleteSaving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(INCOME, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NEW_NAME, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting savings account\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deleting of a saving."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return DeleteSavingsCommand to be executed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteSavingsCommand newDeleteSavingsCommand \u003d new DeleteSavingsCommand(savingsParameters.get(NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteSavingsCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 55,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseEditSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.EditSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for editing a saving."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseEditSaving extends ParseSaving {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseEditSaving."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (INCOME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkIncome(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a saving."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns EditSavingsCommand to be executed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditSavingsCommand newEditSavingsCommand \u003d new EditSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                savingsParameters.get(INCOME), savingsParameters.get(AMOUNT), savingsParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditSavingsCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 42,
      "TerenceTanWT": 27,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Savings methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public abstract class ParseSaving {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    HashMap\u003cString, String\u003e savingsParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] SAVINGS_KEYWORD \u003d new String[] {\"/amount\", \"/income\", \"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String INCOME \u003d \"/income\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e SAVINGS_KEYWORD_LISTS \u003d Arrays.asList(SAVINGS_KEYWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    ParseSaving(String data) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \"/savings should not contain \" + parameter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!SAVINGS_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(INCOME,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, INCOME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NAME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the income entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s income."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkIncome(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/income can only be numbers with at most 9 digits and 2 decimal places\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param key        /name or /newname"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(key + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters entered by the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the command needed to be executed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 84,
      "TerenceTanWT": 32,
      "valerietyj": 1,
      "shamussy": 10
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseAddDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddDepositCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for adding a deposit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseAddDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseAddDeposit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseAddDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(FROM, ADD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!(TRANSNO.equals(key) || NUM.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new deposit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TO.equals(key)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, TO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new deposit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddDepositCommand to be executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddDepositCommand newAddDepositCommand \u003d new AddDepositCommand(depositParameters.get(TO),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(depositParameters.get(AMOUNT)), date,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                (depositParameters.get(DESCRIPTION)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddDepositCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 71
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseDeleteDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for deleting a deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseDeleteDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseDeleteDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new deposit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of a deposit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionDepositCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteDepositCommand newDeleteDepositCommand \u003d new DeleteDepositCommand((depositParameters.get(FROM)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(depositParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteDepositCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Deposit methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class ParseDeposit {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    HashMap\u003cString, String\u003e depositParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/date\", \"/desc\", \"/category\", \"/to\", \"/transno\", \"/from\", \"/num\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TO \u003d \"/to\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    ParseDeposit(String data) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /deposit should not contain \" + parameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(DATE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(TO,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(FROM,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(NUM,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString) throws ParserException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/desc can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param variable   /to or /from"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString, String variable) throws ParserException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(variable + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters given by the user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the expected command to be executed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 178,
      "valerietyj": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseEditDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseEditDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, EDIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a deposit\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a deposit\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDate(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a deposit."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditDepositCommand to be executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditDepositCommand newEditDepositCommand \u003d new EditDepositCommand(depositParameters.get(FROM),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.get(AMOUNT), depositParameters.get(DATE),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.get(DESCRIPTION), Integer.parseInt(depositParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditDepositCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 77
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseListDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for listing deposits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseListDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseListDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when listing deposits from a bank\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.put(key, \"30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of deposits."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListDepositCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListDepositCommand newListDepositCommand \u003d new ListDepositCommand(depositParameters.get(FROM),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(depositParameters.get(NUM)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListDepositCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseAddExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddExpenditureCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for adding an expenditure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseAddExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseAddExpenditure."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents type of expenditure to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseAddExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!TRANSNO.equals(key) \u0026\u0026 !NUM.equals(key) \u0026\u0026 !CATEGORY.equals(key)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 \"deposit\".equals(value)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new expenditure\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(CATEGORY, \"Miscellaneous\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value, key);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value, key);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new expenditure."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddExpenditureCommand to be executed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddExpenditureCommand newAddExpenditureCommand \u003d new AddExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(expendituresParameters.get(AMOUNT)), date,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                (expendituresParameters.get(DESCRIPTION)), (expendituresParameters.get(CATEGORY)), this.type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddExpenditureCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 26,
      "BrianTKM": 52,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseAddRecurringExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for adding a recurring expenditure."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseAddRecurringExpenditure extends ParseRecurringExpenditure {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseAddRecurringExpenditure."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type Represents type of recurring expenditure to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseAddRecurringExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 \"deposit\".equals(value)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new recurring expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(CATEGORY, \"Miscellaneous\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value, key);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 value.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new recurring expenditure\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 value.isBlank()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new recurring expenditure\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value, key);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 value.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new recurring expenditure\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new recurring expenditure."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddRecurringExpenditureCommand to be executed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.setTime(new Date());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.set(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddRecurringExpenditureCommand newAddRecurringExpenditureCommand \u003d new AddRecurringExpenditureCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(FROM), Double.parseDouble(expendituresParameters.get(AMOUNT)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                calendar.getTime(), (expendituresParameters.get(DESCRIPTION)),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                (expendituresParameters.get(CATEGORY)), this.type);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 83
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseDeleteExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for deleting an expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseDeleteExpenditure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseDeleteExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of an expenditure."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionExpenditureCommand to be executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteExpenditureCommand newDeleteExpenditureCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new DeleteExpenditureCommand(Integer.parseInt(expendituresParameters.get(TRANSNO)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        expendituresParameters.get(FROM), this.type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteExpenditureCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 61,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseDeleteRecurringExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Represents the parsing of inputs for deleting a recurring expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteRecurringExpenditure extends ParseRecurringExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseDeleteRecurringExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseDeleteRecurringExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of a recurring expenditure."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionRecurringExpenditureCommand to be executed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteRecurringExpenditureCommand newDeleteERecurringxpenditureCommand \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new DeleteRecurringExpenditureCommand(Integer.parseInt(expendituresParameters.get(TRANSNO)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        expendituresParameters.get(FROM), this.type);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteERecurringxpenditureCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 60,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseEditExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for editing an expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseEditExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseEditExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value, key);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDate(value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of an expenditure."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditExpenditureCommand to be executed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditExpenditureCommand newEditExpenditureCommand \u003d new EditExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(AMOUNT), expendituresParameters.get(DATE),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(DESCRIPTION), expendituresParameters.get(CATEGORY),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(TRANSNO)), this.type);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditExpenditureCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 78
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseEditRecurringExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for editing a recurring expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditRecurringExpenditure extends ParseRecurringExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseEditRecurringExpenditure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditRecurringExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value, key);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a recurring expenditure."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditRecurringExpenditureCommand to be executed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditRecurringExpenditureCommand newEditRecurringExpenditureCommand \u003d new EditRecurringExpenditureCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(FROM), expendituresParameters.get(AMOUNT),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(DESCRIPTION), expendituresParameters.get(CATEGORY),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(TRANSNO)), this.type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 75
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common Expenditure methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public abstract class ParseExpenditure {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    HashMap\u003cString, String\u003e expendituresParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/date\", \"/desc\", \"/category\", \"/from\", \"/transno\", \"/num\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String CATEGORY \u003d \"/category\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of any ParseExpenditure type object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents type of expenditure to be added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseExpenditure(String data, String type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /expenditure should not contain \" + parameter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DATE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(CATEGORY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, CATEGORY, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(FROM,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(NUM,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString, String keyword) throws ParserException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(keyword + \" can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(\"/from can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters given by the user."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the command to be executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 31,
      "BrianTKM": 149,
      "valerietyj": 1,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseListExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for listing expenditures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseListExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseListExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY, LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(NUM, \"30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of expenditures."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListExpendituresCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListExpenditureCommand newListExpenditureCommand \u003d new ListExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(NUM)), this.type);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListExpenditureCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 59,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseListRecurringExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Parses the inputs for listing recurring expenditures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListRecurringExpenditure extends ParseRecurringExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of ParseListRecurringExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseListRecurringExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY, LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of recurring expenditures."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListRecurringExpendituresCommand to be executed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListRecurringExpenditureCommand newListRecurringExpenditureCommand \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new ListRecurringExpenditureCommand(expendituresParameters.get(FROM), this.type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListRecurringExpenditureCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 59
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseRecurringExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Abstracts common RecurringExpenditure methods and functions where the child parsers will inherit from."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class ParseRecurringExpenditure {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    HashMap\u003cString, String\u003e expendituresParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/desc\", \"/category\", \"/from\", \"/transno\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String CATEGORY \u003d \"/category\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of any ParseRecurringExpenditure type object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type Represents type of recurring expenditure to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    ParseRecurringExpenditure(String data, String type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /expenditure should not contain \" + parameter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(CATEGORY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, CATEGORY, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(FROM,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString, String keyword) throws ParserException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(keyword + \" can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/from can only contain letters and at most 30 characters\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the parameters given by the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the command to be executed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 146
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transfer/ParseTransfer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.transfer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.transfer.TransferCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " * Represents the parsing of inputs for transferring of fund."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseTransfer {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private HashMap\u003cString, String\u003e transferParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String[] TRANSFER_KEYWORD \u003d new String[] {\"/amount\", \"/from\", \"/to\", \"/date\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String TO \u003d \"/to\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final List\u003cString\u003e TRANSFER_KEYWORD_LISTS \u003d Arrays.asList(TRANSFER_KEYWORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of any ParseTransfer type object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseTransfer(String data) throws ParserException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!TRANSFER_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        transferParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, TRANSFER_KEYWORD));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        transferParameters.put(FROM,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, TRANSFER_KEYWORD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        transferParameters.put(TO,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, TO, TRANSFER_KEYWORD));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        transferParameters.put(DATE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, TRANSFER_KEYWORD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param key        /from or /to"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ParserException(key + \" can only be alphanumeric and at most 30 characters\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the  date is of valid format and not after now."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e transferIterator \u003d transferParameters.keySet().iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (transferIterator.hasNext()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d transferIterator.next();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d transferParameters.get(key);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if ((value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when transferring fund.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (TO.equals(key)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(TO, value);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the command to execute the transferring of fund."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Returns newTransferCommand to be executed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransferCommand newTransferCommand \u003d new TransferCommand(transferParameters.get(FROM),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                transferParameters.get(TO), Double.parseDouble(transferParameters.get(AMOUNT)), date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return newTransferCommand;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 162,
      "valerietyj": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/regex/RegexUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.regex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * RegexUtil is used to validate user input to make sure it satisfies constraints set for user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public final class RegexUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether amount input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckMoney(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,9}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks whether bank values input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public static boolean regexCheckBankAmount(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[0-9])\\\\d{1,9}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the interest rate entered is within the 100% limit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 2 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 100%."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckInterestRate(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,2}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c 100.00);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the credit card cashback rate entered is within the 20% limit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 2 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 20%."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckCashbackRate(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,2}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 20.00);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is numeric and is within the 9 digit constraints with no decimals."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckListNumber(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String listRegex \u003d \"^[1-9]\\\\d{0,8}$\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(listRegex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is numeric and is within the 9 digit constraints with no decimals."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckBondYear(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String yearRegex \u003d \"^[1-9]\\\\d{0,1}$\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(yearRegex)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int parsedInput \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 10);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 30 characters only."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckName(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String nameRegex \u003d \"^[a-zA-Z0-9 ]{1,30}$\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(nameRegex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 50 characters only."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDescription(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String descriptionRegex \u003d \"^[a-zA-Z0-9 ]{1,50}$\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(descriptionRegex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks whether input entered by user only contains letter and space"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * with a maximum of 15 characters only."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static boolean regexCheckCategory(String input) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        final String categoryRegex \u003d \"^[a-zA-Z ]{1,15}$\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return input.matches(categoryRegex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether user input days is less than or equal to 365 days limit set for short term goals."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDay(String input) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String dayRegex \u003d \"^[1-9]\\\\d{0,2}$\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(dayRegex)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int parsedDay \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedDay \u003c\u003d 365);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if date is in DD/MM/YYYY format from year 1900 to 2099."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * It does not check for whether the month has 30 or 31 days or whether february is a leap year."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDateFormat(String input) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateRegex \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(dateRegex);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 15,
      "BrianTKM": 13,
      "shamussy": 135
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Bank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details of a bank object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Bank {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String accountName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double currentAmount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    TransactionList transactions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Allows the child class to create an instance with name and current amount."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          A name of the bank account."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The amount of money in the bank on initial creation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Bank(String name, double currentAmount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d currentAmount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the name of the bank account to a new name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName the new name of the bank account."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setAccountName(String newName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d newName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the type of the bank account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bank account type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the bank account to a new amount."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newAmount the new amount in the bank account."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setCurrentAmount(double newAmount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d newAmount;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the account name of the instance of the bank account."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The accountName of the bank account."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String getAccountName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.accountName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money in the instance of the bank account."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The currentAmount of money in the bank account."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public double getCurrentAmount() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.currentAmount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the details of the bank account which consist of name and amount."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return accountName and currentAmount."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Account name: \" + accountName + \"\\nType: \" + getType() + \"\\nCurrent Amount: $\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + new DecimalFormat(\"0.00\").format(currentAmount);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deducts from amount in bank."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount to be deducted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deductFromAmount(double amount) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount -\u003d amount;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds to amount in bank."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount to be added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addToAmount(double amount) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount +\u003d amount;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new expenditure to the current bank account."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exp      Expenditure to be added."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add expenditure into."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void addInExpenditure(Transaction exp, Ui ui, String bankType) throws BankException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes an expenditure from the current bank account."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exNum Transaction number."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    Ui of OwlMoney."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If used on investment account."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteExpenditure(int exNum, Ui ui) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits expenditure in the current bank account."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank amount becomes negative after editing expenditure."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits deposit in the current bank account."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     Ui of OwlMoney."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank amount becomes negative after editing deposit."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editDepositDetails(int expNum, String desc, String amount, String date, Ui ui)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the income of the current bank."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newIncome Income to set."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on investment account."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setIncome(double newIncome) throws BankException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditures from the current bank."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new TransactionException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits from the current bank."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If used on investment account."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep      Deposit to add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add deposit into"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on investment account."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    abstract void addDepositTransaction(Transaction dep, Ui ui, String bankType) throws BankException;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the current bank account."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    Ui of OwlMoney."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If amount becomes negative after deleting deposit."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void deleteDepositTransaction(int index, Ui ui) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a bond to the current bank account."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond the bond object."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addBondToInvestmentAccount(Bond newBond, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists before adding."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name exists."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentCheckBondExist(Bond bond) throws BankException, BondException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes bond from the current investment account."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to delete."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentDeleteBond(String bondName, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the investment account."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If the bond does not exist."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Bond investmentGetBond(String bondName) throws BankException, BondException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond in the bank account."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to edit."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param rate     the new rate."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentEditBond(String bondName, String year, String rate, Ui ui)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, BondException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bank specified bank account."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum the number of bonds to display."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If there are no bonds."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentListBond(int displayNum, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Gets the income of the instance of the bank account."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return The income of the bank account."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If used on investment account."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public double getIncome() throws BankException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates recurring transactions to transaction list if any."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    abstract void updateRecurringTransactions(Ui ui);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new recurring expenditure to a savings account."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newExpenditure New recurring expenditure to be added."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on an investment account."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If the recurring expenditure list is full."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingAddRecurringExpenditure(Transaction newExpenditure, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a recurring expenditure from the bank."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the recurring expenditure."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on an investment account."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures or the index is out of range."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingDeleteRecurringExpenditure(int index, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a recurring expenditure from the bank."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the recurring expenditure."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on an investment account."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures or the index is out of range."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingEditRecurringExpenditure(int index, String description, String amount, String category, Ui ui)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists all recurring expenditures from the bank."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on an investment account."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingListRecurringExpenditure(Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the bonds that matches with the keywords specified by the user."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bondName The bondName keyword to match against."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      The object required for printing."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BondException If no bonds could be found."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findBondInInvestment(String bondName, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions from the bank object that matches with the keywords specified by the user."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate The date to search from."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate The date to search until."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to match against."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category The category keyword to match against."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The object required for printing."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException  If parsing of date fails."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findTransaction(String fromDate, String toDate, String description, String category, Ui ui)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        transactions.findMatchingTransaction(fromDate, toDate, description, category, ui);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports bond details of the bank account."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are problems with loading saved data."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void exportInvestmentBondList(String prependFileName) throws BankException, IOException {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prepares transaction details of the bank account for exporting."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the arrayList that is formatted nicely ready to be exported."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ArrayList\u003cString[]\u003e prepareExportTransactionList() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e exportArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        decimalFormat.setRoundingMode(RoundingMode.DOWN);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        SimpleDateFormat exportDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        exportArrayList.add(new String[]{\"description\",\"amount\",\"date\",\"category\",\"spent\"});"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String description \u003d transactions.get(i).getDescription();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double amount \u003d transactions.get(i).getAmount();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date \u003d exportDateFormat.format(transactions.get(i).getDateInDateFormat());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String category \u003d transactions.get(i).getCategory();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            boolean spent \u003d transactions.get(i).getSpent();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringAmount \u003d decimalFormat.format(amount);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringSpent \u003d String.valueOf(spent);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            exportArrayList.add(new String[] {description,stringAmount,date,category,stringSpent});"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return exportArrayList;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prepares transaction details of the bank account for exporting."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are problems with loading saved data."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ArrayList\u003cString[]\u003e prepareExportRecurringTransactionList() throws BankException, IOException {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports transaction details of the bank account."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are problems with loading saved data."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void exportBankTransactionList(String prependFileName) throws BankException, IOException {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports recurring transaction details of the bank account."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are problems with loading saved data."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void exportBankRecurringTransactionList(String prependFileName) throws BankException, IOException {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports bonds from the imported saved file line by line."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond an instance of the bond, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void importNewBonds(Bond newBond) throws BankException {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports deposits from the imported saved file line by line."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit an instance of the deposit, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of deposit and bank type."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void importNewDeposit(Transaction deposit, String bankType) throws BankException {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports expenditures from the imported saved file line by line."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the expenditure, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type the type of expenditure."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature.     */"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void importNewExpenditure(Transaction expenditure, String type) throws BankException {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports recurring expenditures from the imported saved file line by line."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the recurring expenditure, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void importNewRecurringExpenditure(Transaction expenditure) throws BankException {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 39,
      "BrianTKM": 214,
      "valerietyj": 2,
      "shamussy": 236
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/BankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains a list of all bank objects in the profile."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class BankList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cBank\u003e bankLists;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISMULTIPLE \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISSINGLE \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ISZERO \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String PROFILE_BANK_LIST_FILE_NAME \u003d \"profile_banklist.csv\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT_BOND_LIST_FILE_NAME \u003d \"_investment_bondList.csv\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT_TRANSACTION_LIST_FILE_NAME \u003d \"_investment_transactionList.csv\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING_TRANSACTION_LIST_FILE_NAME \u003d \"_saving_transactionList.csv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING_RECURRING_TRANSACTION_LIST_FILE_NAME \u003d \"_saving_recurring_transactionList.csv\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a instance of BankList that contains an arrayList of Banks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param storage for importing and exporting purposes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BankList(Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists \u003d new ArrayList\u003cBank\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the saving account with the specified name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param bankName The name of the bank account in the arrayList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The name of the bank account."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Bank bankListGetSavingAccount(String bankName) throws BankException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName) \u0026\u0026 bankLists.get(i).getType().equals(SAVING)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return bankLists.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        throw new BankException(\"Cannot find savings account with the name: \" + bankName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an instance of a bank account into the BankList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank a new bank object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicate bank account name found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListAddBank(Bank newBank, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankAccountExists(newBank.getAccountName())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There is already a bank account with the name \" + newBank.getAccountName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists.add(newBank);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Added new bank with following details: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        printOneBank(ONE_INDEX, newBank, ISSINGLE, ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        prepareExportBankListNamesAndType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            exportBankList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Error trying to save your additions to disk. Your data is\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns true if bankList is empty and false if there are banks stored in bankList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return status of whether there are banks stored."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bankLists.isEmpty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the bankList which counts all types of accounts."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return size of bankList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public int getBankListSize() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bankLists.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Counts the number of bank accounts of the type specified."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accountType The type of bank account"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the number of accounts of the specified type."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int getNumberOfAccountType(String accountType) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int counter \u003d ISZERO;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (accountType.equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bank name and type that the user specified is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of bank account."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType type of bank account."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result bankName is of bankType."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean hasCorrectBankNameAndType(String bankName, String bankType) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if ((bankName.equals(bankLists.get(i).getAccountName()))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \u0026\u0026 (bankType.equals(bankLists.get(i).getType()))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name that the user specified exists."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName name of bank account."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return the result bankName exists."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private boolean bankAccountExists(String bankName) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user passes all requirements to delete a bank account."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of bank account."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType type of bank account."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result bankName is of bankType."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account fails any criteria."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean canPassDeleteBankRequirements(String bankName, String bankType) throws BankException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There are 0 bank accounts in your profile\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankType.equals(SAVING) \u0026\u0026 getNumberOfAccountType(SAVING) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There must be at least 1 savings account\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!bankAccountExists(bankName)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There are no bank accounts with name \" + bankName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (hasCorrectBankNameAndType(bankName, bankType)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(bankName + \" is not not of type: \" + bankType);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an instance of a bank account from the BankList."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the bank account."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType type of bank account."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account fails any criteria."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListDeleteBank(String bankName, String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (canPassDeleteBankRequirements(bankName, bankType)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    Bank temp \u003d bankLists.get(i);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.remove(i);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    ui.printMessage(\"Removed bank with the following details: \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    printOneBank(ONE_INDEX, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        exportBankList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        Files.deleteIfExists(Paths.get(FILE_PATH + Integer.toString(i)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                                + INVESTMENT_BOND_LIST_FILE_NAME));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        Files.deleteIfExists(Paths.get(FILE_PATH + Integer.toString(i)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                                + INVESTMENT_TRANSACTION_LIST_FILE_NAME));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        Files.deleteIfExists(Paths.get(FILE_PATH + Integer.toString(i)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                                + SAVING_TRANSACTION_LIST_FILE_NAME));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        Files.deleteIfExists(Paths.get(FILE_PATH + Integer.toString(i)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                                + SAVING_RECURRING_TRANSACTION_LIST_FILE_NAME));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        ui.printError(\"Error trying to save your deletions to disk.\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                                + \" Your data is at risk, but we will try again,\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                                + \" feel free to continue using the program.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the saving details."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account to be edited."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName  New name of bank account."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount of bank account."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income   New income of bank account."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListEditSavings(String bankName, String newName, String amount, String income, Ui ui)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    \u0026\u0026 \"saving\".equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    compareBank(bankLists.get(i), newName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setAccountName(newName);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setCurrentAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(income.isEmpty() || income.isBlank())) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setIncome(Double.parseDouble(income));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"New details of the account:\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneBank(ONE_INDEX, bankLists.get(i), ISSINGLE, ui);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your edits to disk. Your data is\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"There are no bank with the name: \" + bankName);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if new bank name is unique."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param currentBank The bank to be changed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newBankName The new name of the bank."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If new name is not unique."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private void compareBank(Bank currentBank, String newBankName) throws BankException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(newBankName) \u0026\u0026 !bankLists.get(i).equals(currentBank)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new BankException(\"There is already a bank account with the name \" + newBankName);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the investment account details."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName Bank account to be edited."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName  New name of bank account."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount   New amount of bank account."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicate bank name found."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListEditInvestment(String bankName, String newName, String amount, Ui ui)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \u0026\u0026 \"investment\".equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    compareBank(bankLists.get(i), newName);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).setAccountName(newName);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).setCurrentAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"New details of the account:\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneBank(ONE_INDEX, bankLists.get(i), ISSINGLE, ui);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your edits to disk. Your data is\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all bank accounts in the BankList."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If there are no specified bank accounts."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListListBankAccount(String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (getBankListSize() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There are 0 bank accounts\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int numberOfBanks \u003d ISZERO;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankType.equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneHeader(numberOfBanks, ui);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneBank(numberOfBanks + ONE_INDEX, bankLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                numberOfBanks++;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (numberOfBanks \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new BankException(\"There are 0 \" + bankType + \" accounts\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditures in the bank account."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankToList The name of the bank account."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank name does not exist."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListListBankExpenditure(String bankToList, Ui ui, int displayNum)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits in the bank account."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankToList The name of the bank account."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListListBankDeposit(String bankToList, Ui ui, int displayNum)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to a bank account."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * This will store the expenditure in the ExpenditureList in the bank account."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName The Bank account name."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     The instance of the expenditure."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type    Type of bank to add expenditure into."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListAddExpenditure(String accName, Transaction exp, Ui ui, String type)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addInExpenditure(exp, ui, type);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your additions to disk. Your data is\""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"There is no account with the name: \" + accName);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits an expenditure from the transactionList in the bank account."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       The transaction number."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank The name of the bank account."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         The description of the expenditure."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       The amount of the expenditure."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         The date of the expenditure."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category     The category of the expenditure."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for printing."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListEditExpenditure(int expNum, String editFromBank, String desc,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String amount, String date, String category, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(editFromBank)) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).editExpenditureDetails(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your edits to disk. Your data is\""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + editFromBank);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure from the transactionList in the bank account."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum         The transaction number."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deleteFromBank The name of the bank account."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui             required for printing."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListDeleteExpenditure(int expNum, String deleteFromBank, Ui ui)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (deleteFromBank.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).deleteExpenditure(expNum, ui);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your deletes to disk. Your data is\""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + deleteFromBank);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a deposit tied to a bank account."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * This will store the expenditure in the transactionList in the bank account."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName  The Bank account name."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep      The instance of the deposit."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Required for printing."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add deposit into"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank name does not exist."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListAddDeposit(String accName, Transaction dep, Ui ui, String bankType) throws BankException {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addDepositTransaction(dep, ui, bankType);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your additions to disk. Your data is\""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits a deposit from the transactionList in the bank account."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expNum       The transaction number."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param editFromBank The name of the bank account."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param desc         The description of the deposit."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount       The amount of the deposit."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date         The date of the deposit."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui           required for printing."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException        If bank name does not exist."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListEditDeposit(int expNum, String editFromBank, String desc,"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String amount, String date, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(editFromBank)) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).editDepositDetails(expNum, desc, amount, date, ui);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your edits to disk. Your data is\""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + editFromBank);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the transactionList in the bank account."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName The name of the bank account."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index   The transaction number."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListDeleteDeposit(String accName, int index, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).deleteDepositTransaction(index, ui);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your deletions to disk. Your data is\""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists before adding."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName the bank account name."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond    the bond object."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If bank does not exist."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If duplicate bond name found."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListIsBondExist(String accName, Bond bond) throws BankException, BondException {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (accName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).investmentCheckBondExist(bond);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a bond to a bank account in the bankList."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName name of bank account."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond    bond object."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListAddBond(String accName, Bond bond, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (accName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).addBondToInvestmentAccount(bond, ui);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your additions to disk. Your data is\""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond in the bank account."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to edit."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate     the new rate"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank does not exist."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListEditBond(String bankName, String bondName, String year, String rate, Ui ui)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, BondException {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).investmentEditBond(bondName, year, rate, ui);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your edits to disk. Your data is\""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes bond from the bondList in the specified investment account."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to delete."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank is not found."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListDeleteBond(String bankName, String bondName, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).investmentDeleteBond(bondName, ui);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your deletions to disk. Your data is\""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the investment account if it exists."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank does not exist."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the bond does not exist."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond bankListGetBond(String bankName, String bondName) throws BankException, BondException {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return bankLists.get(i).investmentGetBond(bondName);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bank specified bank account."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName   the name of the bank account."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum the number of bonds to display."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If there are no bonds."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListListBond(String bankName, Ui ui, int displayNum) throws BankException, BondException {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).investmentListBond(displayNum, ui);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints bank details."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num                Represents the numbering of the bank."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bank               The bank object to be printed."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param isMultiplePrinting Represents whether the function will be called for printing once or multiple"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *                           time"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui                 The object use for printing."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneBank(int num, Bank bank, boolean isMultiplePrinting, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printBankHeader();"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (INVESTMENT.equals(bank.getType())) {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printInvestment(num, bank.getAccountName(), bank.getType(),"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"$\" + new DecimalFormat(\"0.00\").format(bank.getCurrentAmount()));"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (SAVING.equals(bank.getType())) {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printSaving(num, bank.getAccountName(), bank.getType(),"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"$\" + new DecimalFormat(\"0.00\").format(bank.getCurrentAmount()),"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"$\" + new DecimalFormat(\"0.00\").format(bank.getIncome()));"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the bank header details once only when listing of multiple bank."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num Represents the current number of bank being listed."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui  The object use for printing."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneHeader(int num, Ui ui) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (num \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printBankHeader();"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Retrieves the total amount in Bank Saving."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param savingName Represents the account name of Saving."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return The total amount in Saving account."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws BankException If no bank of such name is found."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public double getSavingAmount(String savingName) throws BankException {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(savingName)) {"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return bankLists.get(i).getCurrentAmount();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + savingName);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds a new recurring expenditure to the specified bank account."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName                Name of bank account."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newRecurringExpenditure New recurring expenditure to be added."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui                      Used for printing."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank is not found or is an investment account."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If the recurring expenditure list is full."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListAddRecurringExpenditure(String bankName, Transaction newRecurringExpenditure, Ui ui)"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).savingAddRecurringExpenditure(newRecurringExpenditure, ui);"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    if (bankLists.get(i).getType().equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankRecurringTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your additions to disk. Your data is\""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes the recurring expenditure of the specified index from the specified bank account."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Name of bank account."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index    Index of recurring expenditure."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Used for printing."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank is not found or is an investment account."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException There are 0 recurring expenditures or index is out of range."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListDeleteRecurringExpenditure(String bankName, int index, Ui ui)"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).savingDeleteRecurringExpenditure(index, ui);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    if (bankLists.get(i).getType().equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankRecurringTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your deletions to disk. Your data is\""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists all recurring expenditures from the specified bank account."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Name of bank account."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Used for printing."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank is not found or is an investment account."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException There are 0 recurring expenditures."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListListRecurringExpenditure(String bankName, Ui ui)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).savingListRecurringExpenditure(ui);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates the recurring expenditure of the specified index from the specified bank account."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Name of bank account."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index    Index of recurring expenditure."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Used for printing."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank is not found or is an investment account."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException There are 0 recurring expenditures or index is out of range."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListEditRecurringExpenditure("
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String bankName, int index, String description, String amount, String category, Ui ui)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).savingEditRecurringExpenditure(index, description, amount, category, ui);"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    exportBankList();"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    if (bankLists.get(i).getType().equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankRecurringTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error trying to save your edits to disk. Your data is\""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                            + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankName);"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates all recurring transactions from all banks."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing,"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void bankListUpdateRecurringTransactions(Ui ui) {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankLists.get(i).updateRecurringTransactions(ui);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                exportBankList();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (bankLists.get(i).getType().equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportInvestmentBondList(Integer.toString(i));"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (bankLists.get(i).getType().equals(SAVING)) {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).exportBankRecurringTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).exportBankTransactionList(Integer.toString(i));"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (IOException | BankException e) {"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"Error trying to save your updates to disk. Your data is\""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        + \" at risk, but we will try again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks whether the bank object to transfer the fund actually exist in the list."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param accName the bank account name."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount  the amount to transfer."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank does not exist."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String bankListIsAccountExistToTransfer(String accName, double amount) throws BankException {"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (accName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                bankListIsSufficientForTransfer(bankLists.get(i), amount);"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return bankLists.get(i).getType();"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"Unable to transfer fund as bank the sender bank account does not exist: \""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + accName);"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks whether the bank object to receive the fund actually exist in the list."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param accName the bank account name."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank does not exist."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String bankListIsAccountExistToReceive(String accName) throws BankException {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (accName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return bankLists.get(i).getType();"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"Unable to transfer fund as the receiving bank account does not exist: \""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + accName);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks whether the bank object has sufficient amount to transfer."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bank   the bank object."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount the amount to be transferred."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If bank does not have sufficient fund."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void bankListIsSufficientForTransfer(Bank bank, double amount) throws BankException {"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (bank.getCurrentAmount() \u003e\u003d amount) {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"Insufficient amount for transfer in this bank: \" + bank.getAccountName());"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks investment account specified by the user actually exist."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param investmentName The name of the investment account."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return The investment account object will be return if found."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If investment account does not exist."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Bank checkInvestmentAccountExist(String investmentName) throws BankException {"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (investmentName.equals(bankLists.get(i).getAccountName())"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \u0026\u0026 INVESTMENT.equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return bankLists.get(i);"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"Investment account with the following name \""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"does not exist for search: \" + investmentName);"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds either the savings or investment account that matches with the name specified by user."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param accName The name to be matched against."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type    The type of object to find such as savings or investment object."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If there is no matches for saving or investment object."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findBankAccount(String accName, String type, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ArrayList\u003cBank\u003e tempBankList \u003d new ArrayList\u003cBank\u003e();"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String matchingWord \u003d accName.toUpperCase();"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (bankLists.get(i).getAccountName().toUpperCase().contains(matchingWord)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \u0026\u0026 type.equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                tempBankList.add(bankLists.get(i));"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (tempBankList.isEmpty() \u0026\u0026 SAVING.equals(type)) {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new BankException("
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            \"Savings account with the following keyword could not be found: \" + accName);"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (tempBankList.isEmpty() \u0026\u0026 INVESTMENT.equals(type)) {"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new BankException("
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            \"Investment account with the following keyword could not be found: \" + accName);"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c tempBankList.size(); i++) {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneHeader(i, ui);"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneBank((i + ONE_INDEX), tempBankList.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printDivider();"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds matching bank transactions from the account specified by the user."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bankName    The name of the bank object to search for matching bank transaction."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate    The date to search from."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate      The date to search until."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to match against."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category    The category keyword to match against."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui          The object required for printing."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank name specified does not exist."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If parsing of date fails."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void bankListFindTransaction(String bankName, String fromDate, String toDate,"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String description, String category, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                bankLists.get(i).findTransaction(fromDate, toDate, description, category, ui);"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new BankException(\"Bank with the following name does not exist: \" + bankName);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prepares the bankList for exporting of bank name and type of the bank account."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return ArrayList of String arrays for containing each bank in the bank list."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ArrayList\u003cString[]\u003e prepareExportBankListNamesAndType() {"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e exportArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\".00\");"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        decimalFormat.setRoundingMode(RoundingMode.DOWN);"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        exportArrayList.add(new String[]{\"accountName\",\"type\",\"amount\",\"income\"});"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String accountName \u003d bankLists.get(i).getAccountName();"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String accountType \u003d bankLists.get(i).getType();"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double amount \u003d bankLists.get(i).getCurrentAmount();"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double income \u003d 0;"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringAmount \u003d decimalFormat.format(amount);"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                income \u003d bankLists.get(i).getIncome();"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (BankException e) {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                income \u003d 0;"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringIncome \u003d decimalFormat.format(income);"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            exportArrayList.add(new String[]{accountName,accountType,stringAmount,stringIncome});"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return exportArrayList;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Writes the data of the bank list that was prepared to permanent storage."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException when unable to write to file."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void exportBankList() throws IOException {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e inputData \u003d prepareExportBankListNamesAndType();"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        storage.writeFile(inputData,PROFILE_BANK_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports bonds loaded from save file into respective investment accounts."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName bank name the bond should be imported to."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond an instance of the bond to be imported."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListImportNewBonds(String bankName, Bond newBond) throws BankException {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).importNewBonds(newBond);"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports deposits loaded from save file into respective bank accounts."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName bank name the deposits should be imported to."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit an instance of the deposit to be imported."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of bank account."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListImportNewDeposit(String bankName, Transaction deposit, String bankType)"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).importNewDeposit(deposit, bankType);"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports expenditures loaded from save file into respective bank accounts."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName bank name the deposits should be imported to."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the expenditure to be imported."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type type of expenditure."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListImportNewExpenditure(String bankName, Transaction expenditure, String type)"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).importNewExpenditure(expenditure,type);"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"There is no account with the name: \" + bankName);"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports banks loaded from save file into bankList."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank an instance of the bank account to be imported."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListImportNewBank(Bank newBank) {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankLists.add(newBank);"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports recurring expenditures from save file into respective bank accounts."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName bank name the deposits should be imported to."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newRecurringExpenditure an instance of the expenditure to be imported."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bankListImportNewRecurringExpenditure(String bankName, Transaction newRecurringExpenditure)"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).importNewRecurringExpenditure(newRecurringExpenditure);"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 204,
      "BrianTKM": 287,
      "valerietyj": 22,
      "shamussy": 579
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Investment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.BondList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Extends a normal bank account and produce characteristics specific for investment accounts."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Investment extends Bank {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private BondList bonds;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT_BOND_LIST_FILE_NAME \u003d \"_investment_bondList.csv\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT_TRANSACTION_LIST_FILE_NAME \u003d \"_investment_transactionList.csv\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of an investment account."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          The name of the bank account."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The current amount of money in  the bank account."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Investment(String name, double currentAmount) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(name, currentAmount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.type \u003d INVESTMENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bonds \u003d new BondList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to this instance of the bank account."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp      an instance of expenditure."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add expenditure into."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addInExpenditure(Transaction exp, Ui ui, String bankType) throws BankException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!\"bonds\".equals(bankType) \u0026\u0026 !\"investment transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new BankException(\"This account does not support savings expenditures\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (exp.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactions.addExpenditureToList(exp, ui, bankType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            deductFromAmount(exp.getAmount());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit  Deposit to add."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add deposit into."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If user manually adds deposit into investment account"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addDepositTransaction(Transaction deposit, Ui ui, String bankType) throws BankException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!\"bonds\".equals(bankType) \u0026\u0026 !\"investment transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.addDepositToList(deposit, ui, bankType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        addToAmount(deposit.getAmount());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a bond to this investment account."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addBondToInvestmentAccount(Bond bond, Ui ui) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.addBondToList(bond, ui);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if bond exists in the bondList."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name exists."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentCheckBondExist(Bond bond) throws BondException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.bondExist(bond);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes bond from the bondList in the specified investment account."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to delete."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the bond does not exist."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentDeleteBond(String bondName, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond targetBond \u003d bonds.getBond(bondName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Transaction newDeposit \u003d createNewDeposit(bondName,targetBond.getAmount(),calendar.getTime());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.addDepositToList(newDeposit, ui, \"bonds\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        addToAmount(targetBond.getAmount());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.removeBondFromList(bondName, ui);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the investment account."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the bond does not exist."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Bond investmentGetBond(String bondName) throws BondException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bonds.getBond(bondName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond in the bank account."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to edit."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param rate     the new rate."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If the bond does not exist or the year is smaller than the original."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentEditBond(String bondName, String year, String rate, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.editBond(bondName, year, rate, ui);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bank specified bank account."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum the number of bonds to display."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are not bonds."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentListBond(int displayNum, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.listBond(displayNum, ui);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new deposit object."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName        the name of the bond that generated this deposit from interest."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amountToDeposit the deposit amount, generated from interest."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param depositDate     the date of deposit."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the deposit object."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Transaction createNewDeposit(String bondName, double amountToDeposit, Date depositDate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Transaction newDeposit \u003d new Deposit(bondName, amountToDeposit,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                depositDate, \"bonds\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newDeposit;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Updates the bank amount with the interest generated from the bond and the corresponding deposit"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * record in the transaction list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond that generated the interest."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void addBondInterestDeposit(Bond bond, Ui ui) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double interestAmount \u003d bond.getAmount() * bond.getHalfYearlyCouponRate() / 100;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Transaction newDeposit \u003d createNewDeposit(bond.getName(), interestAmount, bond.getNextDateToCreditInterest());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.addDepositToList(newDeposit, ui, \"bonds\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        addToAmount(interestAmount);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Calculates the next interest rate date."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentInterestDate the current interest rate to calculate from."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the next interest rate crediting date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date calculateNextInterestDate(Date currentInterestDate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendar.setTime(currentInterestDate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendar.add(Calendar.MONTH, 6);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the bond if the bond has reached its maturity date."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param targetBond the target bond to delete."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param endDate    the maturity date of the bond."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void removeBondIfMature(Ui ui, Bond targetBond, Date endDate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (targetBond.getNextDateToCreditInterest().compareTo(endDate) \u003e 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage(\"Bond has reached maturity, removing bond.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                investmentDeleteBond(targetBond.getName(), ui);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (BondException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"Unable to delete bond after crediting interest.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks the investment account for bonds interest crediting and updates the bonds to the next deposit date."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void updateRecurringTransactions(Ui ui) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bonds.getSize(); i++) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Bond targetBond \u003d bonds.get(i);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date endDate \u003d targetBond.getBondEndDate();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Calendar calendarCurrentDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date currentDate \u003d calendarCurrentDate.getTime();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date nextDateToCreditInterest \u003d targetBond.getNextDateToCreditInterest();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            while (currentDate.compareTo(nextDateToCreditInterest) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                addBondInterestDeposit(targetBond,ui);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                nextDateToCreditInterest \u003d calculateNextInterestDate(nextDateToCreditInterest);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                targetBond.setNextDateToCreditInterest(nextDateToCreditInterest);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                removeBondIfMature(ui, targetBond, endDate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.listDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.listExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the bonds that matches with the keywords specified by the user."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bondName The bondName keyword to match against."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      The object required for printing."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BondException If no bonds could be found."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findBondInInvestment(String bondName, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        bonds.findBond(bondName, ui);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prepares bond list for exporting."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return properly formatted bond list in arraylist that contains array of strings."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ArrayList\u003cString[]\u003e prepareExportBondList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e exportArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\".00\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        decimalFormat.setRoundingMode(RoundingMode.DOWN);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        SimpleDateFormat exportDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        exportArrayList.add(new String[]{\"bondName\",\"amount\",\"rate\",\"boughtDate\",\"year\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"nextDateToCreditInterest\"});"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bonds.getSize(); i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String bondName \u003d bonds.get(i).getName();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double amount \u003d bonds.get(i).getAmount();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double rate \u003d bonds.get(i).getYearlyCouponRate();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String boughtDate \u003d exportDateFormat.format(bonds.get(i).getDateInDateFormat());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int year \u003d bonds.get(i).getYear();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String nextDateToCreditInterest \u003d exportDateFormat.format(bonds.get(i).getNextDateToCreditInterest());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringAmount \u003d decimalFormat.format(amount);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringRate \u003d decimalFormat.format(rate);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringYear \u003d Integer.toString(year);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            exportArrayList.add(new String[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                {bondName,stringAmount,stringRate,boughtDate,stringYear, nextDateToCreditInterest});"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return exportArrayList;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports the bond list."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are errors exporting the file."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void exportInvestmentBondList(String prependFileName) throws IOException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e inputData \u003d prepareExportBondList();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            storage.writeFile(inputData,prependFileName + INVESTMENT_BOND_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports the transaction list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are errors exporting the file."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void exportBankTransactionList(String prependFileName) throws IOException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e inputData \u003d prepareExportTransactionList();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            storage.writeFile(inputData,prependFileName + INVESTMENT_TRANSACTION_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports new bonds one at a time."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond an instance of the bond, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importNewBonds(Bond newBond) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.importBondToList(newBond);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports new deposits one at a time."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit an instance of the deposit, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of deposit and bank type."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importNewDeposit(Transaction deposit, String bankType) throws BankException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!\"bonds\".equals(bankType) \u0026\u0026 !\"investment transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.importDepositToList(deposit);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports new expenditures one at a time."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the expenditure, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of bank."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importNewExpenditure(Transaction expenditure, String bankType) throws BankException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!\"bonds\".equals(bankType) \u0026\u0026 !\"investment transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"This account does not support savings expenditures\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (expenditure.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            transactions.importExpenditureToList(expenditure, bankType);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 13,
      "BrianTKM": 16,
      "shamussy": 357
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Saving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.RecurringExpenditureList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details in a savings account in addition to a normal bank account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Saving extends Bank {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private double income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ACCOUNT_TYPE \u003d \"bank\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date nextIncomeDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private RecurringExpenditureList recurringExpenditures;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING_TRANSACTION_LIST_FILE_NAME \u003d \"_saving_transactionList.csv\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING_RECURRING_TRANSACTION_LIST_FILE_NAME \u003d \"_saving_recurring_transactionList.csv\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a savings account."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          The name of the bank account."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The current amount of money in  the bank account."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param income        The amount of money that is credited monthly into the account."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Saving(String name, double currentAmount, double income) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(name, currentAmount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.type \u003d SAVING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.recurringExpenditures \u003d new RecurringExpenditureList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.setTime(new Date());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.set(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        nextIncomeDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates the next income date and current amount if an income has been earned."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return If there is an update to the income."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private boolean earnedIncome() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (new Date().compareTo(nextIncomeDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (income \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addToAmount(income);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            calendar.setTime(nextIncomeDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            nextIncomeDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the income of the bank accounts."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return the income of the bank account which includes income and type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public double getIncome() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return income;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the bank accounts."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the description of the bank account which includes income and type."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return super.getDescription() + \"\\nIncome: $\" + new DecimalFormat(\"0.00\").format(getIncome());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to this instance of the bank account."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp      an instance of expenditure."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add expenditure into."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account becomes negative after adding expenditure."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addInExpenditure(Transaction exp, Ui ui, String bankType) throws BankException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!\"bank\".equals(bankType) \u0026\u0026 !\"savings transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new BankException(\"Bonds cannot be added to this account\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (exp.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactions.addExpenditureToList(exp, ui, bankType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            deductFromAmount(exp.getAmount());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to this bank account."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exId The id of the expenditure in ExpenditureList."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteExpenditure(int exId, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        addToAmount(transactions.deleteExpenditureFromList(exId, ui));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets a new income of the current bank account."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newIncome Income to set."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setIncome(double newIncome) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d newIncome;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the expenditure details from the current bank account."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If amount is negative after editing expenditure."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 this.getCurrentAmount()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + transactions.getExpenditureAmount(expNum) \u003c Double.parseDouble(amount)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double oldAmount \u003d transactions.getExpenditureAmount(expNum);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double newAmount \u003d transactions.editExpenditure(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.addToAmount(oldAmount);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.deductFromAmount(newAmount);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the deposit details from the current bank account."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     Ui of OwlMoney."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If amount becomes negative after editing deposit."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editDepositDetails(int expNum, String desc, String amount, String date, Ui ui)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 this.getCurrentAmount()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + Double.parseDouble(amount) \u003c transactions.getDepositValue(expNum)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double oldAmount \u003d transactions.getDepositValue(expNum);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double newAmount \u003d transactions.editDeposit(expNum, desc, amount, date, ui);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.addToAmount(newAmount);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.deductFromAmount(oldAmount);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep      Deposit to add."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add deposit into."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addDepositTransaction(Transaction dep, Ui ui, String bankType) throws BankException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!\"bank\".equals(bankType) \u0026\u0026 !\"savings transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new BankException(\"This account does not support investment account deposits\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.addDepositToList(dep, ui, bankType);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        addToAmount(dep.getAmount());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the current bank account."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    Ui of OwlMoney."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If amount becomes negative after editing deposit."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void deleteDepositTransaction(int index, Ui ui) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double depositValue \u003d transactions.getDepositValue(index);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (this.getCurrentAmount() \u003c depositValue) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            this.deductFromAmount(transactions.deleteDepositFromList(index, ui));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates the recurring expenditure to the net date and add an expenditure to expenditure list if overdue."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param recurringExpenditure The recurring expenditure to check."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param outdatedState The state of the recurring expenditure if it is outdated."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Outdated state of the expenditure."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private boolean savingUpdateRecurringExpenditure(Transaction recurringExpenditure, boolean outdatedState, Ui ui)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DateFormat dateOutputFormat \u003d new SimpleDateFormat(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Date expenditureDate \u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        boolean currentState \u003d outdatedState;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expenditureDate \u003d dateOutputFormat.parse(recurringExpenditure.getDate());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            //check is already done when adding expenditure"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (new Date().compareTo(expenditureDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Transaction newExpenditure \u003d new Expenditure("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    recurringExpenditure.getDescription(), recurringExpenditure.getAmount(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    expenditureDate, recurringExpenditure.getCategory());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            addInExpenditure(newExpenditure, ui, ACCOUNT_TYPE);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            calendar.clear();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            calendar.setTime(expenditureDate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            calendar.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            recurringExpenditure.setDate(calendar.getTime());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            currentState \u003d true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return currentState;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates all recurring expenditures in the bank."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void updateRecurringTransactions(Ui ui) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        boolean outdatedIncome;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        boolean outdatedExpenditure;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            outdatedExpenditure \u003d false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            outdatedIncome \u003d earnedIncome();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d 0; i \u003c recurringExpenditures.getListSize(); i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    outdatedExpenditure \u003d savingUpdateRecurringExpenditure("
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                            recurringExpenditures.getRecurringExpenditure(i), outdatedExpenditure, ui);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    ui.printError(\"There is not enough money in the bank for: \""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                            + recurringExpenditures.getRecurringExpenditure(i).getDescription());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } while (outdatedIncome || outdatedExpenditure);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new recurring expenditure to the bank."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newExpenditure New recurring expenditure to be added."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If the recurring expenditure list is full."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingAddRecurringExpenditure(Transaction newExpenditure, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures.addRecurringExpenditure(newExpenditure, ui);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a recurring expenditure from the bank."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the recurring expenditure."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures or index is out of range."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingDeleteRecurringExpenditure(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures.deleteRecurringExpenditure(index, ui);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a recurring transaction from the bank."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the recurring expenditure."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of the recurring expenditure."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the recurring expenditure."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of the recurring expenditure."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures or index is out of range."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingEditRecurringExpenditure(int index, String description, String amount, String category, Ui ui)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures.editRecurringExpenditure(index, description, amount, category, ui);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists all recurring expenditures in the bank."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void savingListRecurringExpenditure(Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures.listRecurringExpenditure(ui);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports the transaction list."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are errors exporting the file."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void exportBankTransactionList(String prependFileName) throws IOException {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e inputData \u003d prepareExportTransactionList();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            storage.writeFile(inputData,prependFileName + SAVING_TRANSACTION_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prepares the recurring transaction list for exporting."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return properly formatted recurring transaction list in Arraylist that contains array of strings."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are errors exporting the file."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ArrayList\u003cString[]\u003e prepareExportRecurringTransactionList() throws BankException, IOException {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e exportArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        decimalFormat.setRoundingMode(RoundingMode.DOWN);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        SimpleDateFormat exportDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        exportArrayList.add(new String[]{\"description\",\"amount\",\"date\",\"category\",\"spent\"});"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c recurringExpenditures.getSize(); i++) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String description \u003d recurringExpenditures.get(i).getDescription();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double amount \u003d recurringExpenditures.get(i).getAmount();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date \u003d exportDateFormat.format(recurringExpenditures.get(i).getDateInDateFormat());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String category \u003d recurringExpenditures.get(i).getCategory();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            boolean spent \u003d recurringExpenditures.get(i).getSpent();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringAmount \u003d decimalFormat.format(amount);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String stringSpent \u003d String.valueOf(spent);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            exportArrayList.add(new String[] {description,stringAmount,date,category,stringSpent});"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return exportArrayList;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Exports the recurring transaction list."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param prependFileName the index of the bankAccount in the bankList."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException if there are errors exporting the file."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void exportBankRecurringTransactionList(String prependFileName) throws BankException, IOException {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString[]\u003e inputData \u003d prepareExportRecurringTransactionList();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            storage.writeFile(inputData,prependFileName + SAVING_RECURRING_TRANSACTION_LIST_FILE_NAME);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports new expenditures one at a time."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the expenditure, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of bank account."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importNewExpenditure(Transaction expenditure, String bankType) throws BankException {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!\"bank\".equals(bankType) \u0026\u0026 !\"savings transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bonds cannot be added to this account\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (expenditure.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            transactions.importExpenditureToList(expenditure, bankType);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports new deposits one at a time."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit an instance of the deposit, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of deposit and bank type."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importNewDeposit(Transaction deposit, String bankType) throws BankException {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!\"bank\".equals(bankType) \u0026\u0026 !\"savings transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"This account does not support investment account deposits\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactions.importDepositToList(deposit);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports new recurring expenditures one at a time."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the recurring expenditure, contained in 1 line in the saved file."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importNewRecurringExpenditure(Transaction expenditure) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        recurringExpenditures.importRecurringExpenditureToList(expenditure);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 9,
      "BrianTKM": 291,
      "shamussy": 157
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/exception/BankException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bank.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BankException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new BankException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BankException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bond/Bond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents one investment bond."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Bond {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double rate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date nextDateToCreditBondCouponInterest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a Bond with details of name, amount, rate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name   The name of the bond issue."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount The amount of money the bond costs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate   The coupon rate of the bond."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date   The date the bond was purchased."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year   The year the bond will last."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond(String name, double amount, double rate, Date date, int year) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.category \u003d \"bonds\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.nextDateToCreditBondCouponInterest \u003d calculateNextDateToCreditInterest(this.date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Calculates the next date the bond interest will be credited upon bond creation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param boughtDate the date the bond was bought."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the next date coupon interest will be credited."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date calculateNextDateToCreditInterest(Date boughtDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar nextDateToCreditInterest \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        nextDateToCreditInterest.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        nextDateToCreditInterest.setTime(boughtDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        nextDateToCreditInterest.add(Calendar.MONTH, 6);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return nextDateToCreditInterest.getTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the next date to credit interest."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the next date that interest can be credited."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Date getNextDateToCreditInterest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.nextDateToCreditBondCouponInterest;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the next date to credit interest."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setNextDateToCreditInterest(Date newDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.nextDateToCreditBondCouponInterest \u003d newDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date of expiry of the bond."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the date of expiry of the bond."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Date getBondEndDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar nextDateToCreditInterest \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        nextDateToCreditInterest.clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        nextDateToCreditInterest.setTime(this.date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        nextDateToCreditInterest.add(Calendar.YEAR, this.year);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return nextDateToCreditInterest.getTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the number of years the bond will last."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the number of years the bond will last."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date the bond was purchased."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the date the bond was purchased."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DateFormat temp \u003d new SimpleDateFormat(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return temp.format(this.date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date the bond was purchased."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the date the bond was purchased in Date format."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Date getDateInDateFormat() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the annual coupon rate of the bond."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return rate of the coupon annual rate."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getYearlyCouponRate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.rate;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the half annual coupon rate that is used for biannual coupon rate issuance calculation."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the half annual coupon rate."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getHalfYearlyCouponRate() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.rate / 2;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money the bond was bought for."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the amount of money the bond costs."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the name of the bond purchased."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the name of the bond."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of the bond purchased."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the category of this bond purchased."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the bond to a new interest rate."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newRate new amount of the bond"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setRate(double newRate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d newRate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the year of the bond to a new year."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newYear new name of the bond"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setYear(int newYear) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d newYear;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the bond."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the description of the bond."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getBondDescription() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"Name: \" + getName() + \"\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Amount: $\" + new DecimalFormat(\"0.00\").format(getAmount()) + \"\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Rate: \" + new DecimalFormat(\"0.00\").format(getYearlyCouponRate()) + \"\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date Purchased: \" + getDate() + \"\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of years: \" + getYear() + \"\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 185
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bond/BondList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Provides a layer of abstraction for the ArrayList that stores bond objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BondList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ArrayList\u003cBond\u003e bondLists;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISMULTIPLE \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISSINGLE \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ISZERO \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an arrayList of bonds."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BondList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists \u003d new ArrayList\u003cBond\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bondList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum bond number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for display."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are no bonds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBond(int displayNum, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (getSize() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BondException(\"There are no bonds\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d bondLists.size() - 1; i \u003e\u003d ISZERO; i--) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneHeader(counter, displayNum, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneBond((i + ONE_INDEX), bondLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                counter--;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (counter \u003c\u003d ISZERO || i \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    ui.printDivider();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (counter \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Add bond to list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond bond object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addBondToList(Bond bond, Ui ui) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists.add(bond);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Bond with the following details has been added: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        printOneBond(ONE_INDEX, bond, ISSINGLE, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the bondList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the size of the bondList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bondLists.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bond the bond object that the user is expecting to add."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name is found."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bondExist(Bond bond) throws BondException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bond.getName().equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new BondException(\"Bond with the name: \" + bond.getName() + \" already exists\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the bond from the bondList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void removeBondFromList(String bondName, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (getSize() \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BondException(\"There are no bonds\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bondName.equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Bond temp \u003d bondLists.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondLists.remove(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(\"Bond with the following details has been deleted: \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneBond(ONE_INDEX, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BondException(\"There are no bonds with the name: \" + bondName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the bondList by specifying the name."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the bond does not exist."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond getBond(String bondName) throws BondException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bondName.equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return bondLists.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BondException(\"There are no bonds with the name: \" + bondName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the bondList by specifying the bond index in the bondList."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond get(int bondIndex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bondLists.get(bondIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond details specifically."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param rate     the new rate of the bond."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If the bond does not exist or the year is smaller than the original."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void editBond(String bondName, String year, String rate, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bondName.equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                editBondYear(year, i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                editBondRate(rate, i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(\"Bond with the following details has been edited: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneBond(ONE_INDEX, bondLists.get(i), ISSINGLE, ui);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BondException(\"There are no bonds with the name: \" + bondName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond rate specifically to a new rate."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate the new interest rate of the bond."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param i    position of the bond in the bondList."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void editBondRate(String rate, int i) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!(rate.isEmpty() || rate.isBlank())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bondLists.get(i).setRate(Double.parseDouble(rate));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the year of the bond."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year the new year of the bond."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param i    position of the bond in the bondList."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the year is smaller than the original year."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void editBondYear(String year, int i) throws BondException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!(year.isEmpty() || year.isBlank())) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int originalYear \u003d bondLists.get(i).getYear();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (Integer.parseInt(year) \u003c originalYear) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new BondException(\"The year can only be larger than: \" + originalYear);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bondLists.get(i).setYear(Integer.parseInt(year));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints bond details."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num                Represents the numbering of the bond."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bond               The bond object to be printed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param isMultiplePrinting Represents whether the function will be called for printing once or"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *                           multiple time"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui                 The object use for printing."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneBond(int num, Bond bond, boolean isMultiplePrinting, Ui ui) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printBondHeader();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printBond(num, bond.getName(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"$\" + new DecimalFormat(\"0.00\").format(bond.getAmount()),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                new DecimalFormat(\"0.00\").format(bond.getYearlyCouponRate()),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                bond.getDate(), bond.getYear());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the bond header details once only when listing of multiple transaction."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param counter    Represents the counter of the bond for printing."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param displayNum Represents number of bond to list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         The object use for printing."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneHeader(int counter, int displayNum, Ui ui) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (counter \u003d\u003d displayNum) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printBondHeader();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the bonds that matches with the keywords specified by the user."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bondName The bondName keyword to match against."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      The object required for printing."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BondException If no bonds could be found."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findBond(String bondName, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ArrayList\u003cBond\u003e tempBondList \u003d new ArrayList\u003cBond\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String matchingWord \u003d bondName.toUpperCase();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (bondLists.get(i).getName().toUpperCase().contains(matchingWord)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                tempBondList.add(bondLists.get(i));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (tempBondList.isEmpty()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new BondException(\"Bond with the following keyword could not be found: \" + bondName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printBondHeader();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c tempBondList.size(); i++) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneBond((i + ONE_INDEX), tempBondList.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printDivider();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports bond to list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond bond object."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importBondToList(Bond bond) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists.add(bond);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 83,
      "BrianTKM": 7,
      "shamussy": 164
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bond/exception/BondException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BondException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new BondException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BondException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/card/Card.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * Card class for initialisation of credit card object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private double limit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private double rebate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private TransactionList paid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private TransactionList unpaid;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates a Card with details of name, limit and rebate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name   A name for the credit card."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param limit  Credit card monthly spending limit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param rebate Credit card monthly cash back rebate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Card(String name, double limit, double rebate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.paid \u003d new TransactionList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.unpaid \u003d new TransactionList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the card name of the credit card."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return name of the credit card."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Sets the card name for the credit card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name A name for the credit card."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void setName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the card limit of the credit card."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return card limit of the credit card."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    double getLimit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.limit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Sets the card limit for the credit card."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param limit A name for the credit card."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void setLimit(double limit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the rebate of the credit card."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return rebate of the credit card."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    double getRebate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.rebate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Sets the rebate for the credit card."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param rebate Rebate for the credit card."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void setRebate(double rebate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the credit card details."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return String of credit card details."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return \"Card Name: \" + getName()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"\\nMonthly Limit: $\" + new DecimalFormat(\"0.00\").format(getLimit())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"\\nRemaining Limit: $\" + new DecimalFormat(\"0.00\").format(getRemainingLimit())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"\\nRebate: \" + new DecimalFormat(\"0.00\").format(getRebate()) + \"%\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if expenditure exceeds remaining card limit."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param exp Expenditure to be added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException If expenditure exceeds remaining card limit."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkExpExceedRemainingLimit(Transaction exp) throws CardException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        LocalDate date \u003d exp.getLocalDate();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        double monthAmountSpent \u003d unpaid.getMonthAmountSpent(date.getMonthValue(), date.getYear());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        double remainingMonthAmount \u003d limit - monthAmountSpent;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (exp.getAmount() \u003e remainingMonthAmount) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new CardException(\"Expenditure to be added cannot exceed remaining limit of $\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    + remainingMonthAmount);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds expenditure to the credit card."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param exp  Expenditure to be added."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui   Ui of OwlMoney."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type Type of account to add expenditure into"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException If expenditure exceeds card limit."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addInExpenditure(Transaction exp, Ui ui, String type) throws CardException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.checkExpExceedRemainingLimit(exp);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        unpaid.addExpenditureToList(exp, ui, type);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists the expenditures in the current credit card."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If no expenditure is found or no expenditure is in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        unpaid.listExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Deletes an expenditure in the current credit card."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param exId Transaction number of the transaction."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui   Ui of OwlMoney."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void deleteExpenditure(int exId, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        unpaid.deleteExpenditureFromList(exId, ui);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the expenditure details from the current card account."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param expNum   Transaction number."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param desc     New description."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param amount   New amount."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param date     New date."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException        If amount is negative after editing expenditure."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throws TransactionException, CardException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        double remainingLimit \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (date.isBlank() || date.isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int expMonth \u003d unpaid.getTransactionMonthByIndex(expNum);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int expYear \u003d unpaid.getTransactionYearByIndex(expNum);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            remainingLimit \u003d limit - unpaid.getMonthAmountSpent(expMonth, expYear);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            LocalDate expDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int expMonth \u003d expDate.getDayOfMonth();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int expYear \u003d expDate.getYear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            remainingLimit \u003d limit - unpaid.getMonthAmountSpent(expMonth, expYear);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 remainingLimit"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + unpaid.getExpenditureAmount(expNum) \u003c Double.parseDouble(amount)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new CardException(\"Edited expenditure cannot exceed remaining limit of $\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    + remainingLimit);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        unpaid.editExpenditure(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /** Returns remaining limit of this current month."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return      Remaining limit of this current month."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public double getRemainingLimitNow() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int month \u003d currentDate.getDayOfMonth();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int year \u003d currentDate.getYear();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return limit - unpaid.getMonthAmountSpent(month, year);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Returns true if unpaid expenditure list is empty."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return True if unpaid expenditure list is empty."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return unpaid.expListIsEmpty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions from the card object that matches with the keywords specified by the user."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate The date to search from."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate The date to search until."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to match against."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category The category keyword to match against."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The object required for printing."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findTransaction(String fromDate, String toDate, String description, String category, Ui ui)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        unpaid.findMatchingTransaction(fromDate, toDate, description, category, ui);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 46,
      "BrianTKM": 8,
      "TerenceTanWT": 170
    }
  },
  {
    "path": "src/main/java/owlmoney/model/card/CardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Provides a layer of abstraction for the ArrayList that stores credit cards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private ArrayList\u003cCard\u003e cardLists;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISMULTIPLE \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISSINGLE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ISZERO \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an arrayList of Cards."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param storage for importing and exporting purposes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public CardList(Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardLists \u003d new ArrayList\u003cCard\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Adds an instance of card into the CardList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param newCard a new card object to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If duplicate credit card name found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void cardListAddCard(Card newCard, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (cardExists(newCard.getName())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"There is already a credit card with the name \" + newCard.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardLists.add(newCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Added a new card with the below details: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        printOneCard(ONE_INDEX, newCard, ISSINGLE, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Deletes an instance of a card from the CardList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name name of the card to be deleted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If CardList is empty or card to be deleted do not exist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void cardListDeleteCard(String name, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        cardListCheckListEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        boolean isDeleted \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (cardLists.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Card temp \u003d cardLists.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                cardLists.remove(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(\"Card with the following details has been removed:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneCard(ONE_INDEX, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                isDeleted \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!isDeleted) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"No such card exist for deletion.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Throws CardException if CardList is empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException If CardList is empty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void cardListCheckListEmpty() throws CardException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (cardLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"There are 0 cards in your profile.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Gets the size of the cardList which counts the number of credit cards object within."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return size of cardList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public int getCardListSize() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return cardLists.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if the credit card name that the user specified exists."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardName name of credit card."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return the result specifying whether the credit card name already exists."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private boolean cardExists(String cardName) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getCardListSize(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardName.equals(cardLists.get(i).getName())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if new card name is unique."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param currentCard The card to be changed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newCardName The new name of the card."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If new card name is not unique."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void compareCard(Card currentCard, String newCardName) throws CardException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getCardListSize(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().equals(newCardName) \u0026\u0026 !cardLists.get(i).equals(currentCard)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new CardException(\"There is already a credit card with the name: \" + newCardName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks if all credit card expenditures have been paid else cannot edit card limit."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param card The card object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If credit card contains unpaid expenditures."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void checkUnpaidCannotEditLimit(Card card) throws CardException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!card.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"Card limit cannot be edited if there are unpaid expenditures\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Edits the credit card details."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name    Credit Card to be edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newName New name of credit card if any."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param limit   New limit of credit card if any."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate  New rebate of credit card if any."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If card cannot be found or new card name already exist."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void cardListEditCard(String name, String newName, String limit, String rebate, Ui ui)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws CardException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    compareCard(cardLists.get(i), newName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    cardLists.get(i).setName(newName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!(limit.isEmpty() || limit.isBlank())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    this.checkUnpaidCannotEditLimit(cardLists.get(i));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    cardLists.get(i).setLimit(Double.parseDouble(limit));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!(rebate.isEmpty() || rebate.isBlank())) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    cardLists.get(i).setRebate(Double.parseDouble(rebate));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(\"New details of the cards: \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneCard(ONE_INDEX, cardLists.get(i), ISSINGLE, ui);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new CardException(\"Card could not be found for editing card details.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists all credit cards details."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui Required for printing."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If CardList is empty."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void cardListListCards(Ui ui) throws CardException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        cardListCheckListEmpty();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printCardHeader();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneCard((i + ONE_INDEX), cardLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printDivider();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds an expenditure tied to a credit card."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * This will store the expenditure in the ExpenditureList in the credit card."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardName The credit card name."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param exp      The instance of the expenditure."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui       Required for printing."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type     Type of account to add expenditure into"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If the credit card name cannot be found."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void cardListAddExpenditure(String cardName, Transaction exp, Ui ui, String type)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throws CardException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().equals(cardName)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                cardLists.get(i).addInExpenditure(exp, ui, type);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new CardException(\"Card cannot be found for adding expenditure:\" + cardName);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists expenditures in the credit card."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardToList The name of the credit card."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If the credit card name cannot be found."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If no expenditure found or no expenditure is in the list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void cardListListCardExpenditure(String cardToList, Ui ui, int displayNum)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throws TransactionException, CardException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardToList.equals(cardLists.get(i).getName())) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardLists.get(i).listAllExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new CardException(\"Card cannot be found to list expenditure: \" + cardToList);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Deletes an expenditure from the transactionList in the card object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param expNum                The transaction number."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param deleteFromAccountCard The name of the card."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui                    Required for printing."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException        If card does not exist."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void cardListDeleteExpenditure(int expNum, String deleteFromAccountCard, Ui ui)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throws CardException, TransactionException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (deleteFromAccountCard.equals(cardLists.get(i).getName())) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                cardLists.get(i).deleteExpenditure(expNum, ui);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new CardException(\"Card cannot be found for deleting expenditure: \" + deleteFromAccountCard);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Edits an expenditure from the transactionList in the card object."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param expNum       The transaction number."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param editFromCard The name of the card."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param desc         The description of the expenditure."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param amount       The amount of the expenditure."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param date         The date of the expenditure."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param category     The category of the expenditure."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui           Required for printing."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException        If card does not exist."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void cardListEditExpenditure(int expNum, String editFromCard, String desc, String amount,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date, String category, Ui ui) throws CardException, TransactionException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (cardLists.get(i).getName().equals(editFromCard)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                cardLists.get(i).editExpenditureDetails(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new CardException(\"Card cannot be found for editing expenditure: \" + editFromCard);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints card details."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num                Represents the numbering of the card."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param card               The card object to be printed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param isMultiplePrinting Represents whether the function will be called for printing once or"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *                           multiple time"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui                 The object use for printing."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneCard(int num, Card card, boolean isMultiplePrinting, Ui ui) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printCardHeader();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printCard(num, card.getName(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"$\" + new DecimalFormat(\"0.00\").format(card.getLimit()),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"$\" + new DecimalFormat(\"0.00\").format(card.getRemainingLimitNow()),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                new DecimalFormat(\"0.00\").format(card.getRebate()) + \"%\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the card header details once only when listing of multiple card."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num Represents the current number of card being listed."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui  The object use for printing."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneCardHeader(int num, Ui ui) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (num \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printBankHeader();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds card that matches the name provided by user."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardName The name of the card to match against."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui       The object required for printing."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If there is no matches for card object."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findCard(String cardName, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ArrayList\u003cCard\u003e tempCardList \u003d new ArrayList\u003cCard\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String matchingWord \u003d cardName.toUpperCase();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getCardListSize(); i++) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().toUpperCase().contains(matchingWord)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                tempCardList.add(cardLists.get(i));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (tempCardList.isEmpty()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"Card with the following keyword could not be found: \" + cardName);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c tempCardList.size(); i++) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneCardHeader(i, ui);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneCard((i + ONE_INDEX), tempCardList.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printDivider();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds matching card transactions from the card specified by the user."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardName    The name of the card object to be searched for matching transaction."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate    The date to search from."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate      The date to search until."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to match against."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category    The category keyword to match against."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui          The object required for printing."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If card with the name does not exist."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If parsing of date fails."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void cardListFindTransaction(String cardName, String fromDate, String toDate,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String description, String category, Ui ui) throws CardException, TransactionException {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getCardListSize(); i++) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().equals(cardName)) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardLists.get(i).findTransaction(fromDate, toDate, description, category, ui);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new CardException(\"Card with the following name does not exist: \" + cardName);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 211,
      "BrianTKM": 3,
      "TerenceTanWT": 119,
      "shamussy": 19
    }
  },
  {
    "path": "src/main/java/owlmoney/model/card/exception/CardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.card.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class CardException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates a new CardException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public CardException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/goals/Goals.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.model.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details for each goal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class Goals {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private Bank savingAcc \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private boolean done \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of Goals."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name   The name used to understand the goal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param amount The target amount to reach for the goal."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param date   The targeted date to meet the goal."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Goals(String name, double amount, Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates an instance of Goals which is tied to a saving account."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name   The name used to understand the goal."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param amount The target amount to reach for the goal."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param date   The targeted date to meet the goal."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param savingAcc The saving account used to track goal progress."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Goals(String name, double amount, Date date, Bank savingAcc) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.savingAcc \u003d savingAcc;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (Double.parseDouble(getRemainingAmount()) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            this.done \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the name of the Goal."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return name of the Goal."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String getGoalsName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the amount of the Goal."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return amount of the Goal."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public double getGoalsAmount() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the date of the Goal."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return date of the Goal."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String getGoalsDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        DateFormat temp \u003d new SimpleDateFormat(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return temp.format(this.date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the saving account name which is tied to Goal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return name of Saving Account."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String getSavingAcc() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (savingAcc \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            return \"NOT TIED\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            return savingAcc.getAccountName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the remaining amount to save to reach the Goal."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return remaining amount left to reaching goal."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String getRemainingAmount() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (savingAcc \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            return new DecimalFormat(\"0.00\").format(getGoalsAmount());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            double remainingAmount \u003d getGoalsAmount() - savingAcc.getCurrentAmount();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (remainingAmount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return \"0.00\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return new DecimalFormat(\"0.00\").format(remainingAmount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Marks if Goal is achieved."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param remainingAmount amount remaining to reach goal."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void isDone(Double remainingAmount) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (remainingAmount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            done \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Gets the status of Goal if achieved."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return tick / cross if goal is achieved."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return done ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Sets the new name of the Goal."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName new name of the Goal."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void setGoalsName(String newName) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Sets the new target amount for the Goal."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newAmount new amount of the Goal."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void setGoalsAmount(double newAmount) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.amount \u003d newAmount;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Sets the new target date for the Goal."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newDate new date of the Goal."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void setGoalsDate(Date newDate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.date \u003d newDate;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Sets the new saving account for Goal."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newSavingAcc new saving account to tie to Goal."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    void setSavingAcc(Bank newSavingAcc) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.savingAcc \u003d newSavingAcc;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "valerietyj": 164
    }
  },
  {
    "path": "src/main/java/owlmoney/model/goals/GoalsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.model.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the list of goals in the profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class GoalsList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private ArrayList\u003cGoals\u003e goalList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISMULTIPLE \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISSINGLE \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ISZERO \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates a instance of GoalsList that contains an arrayList of Goals."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param storage for importing and exporting purposes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public GoalsList(Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalList \u003d new ArrayList\u003cGoals\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Lists all goals in GoalsList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void listGoals(Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (goalList.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            ui.printError(\"There are no goals set\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printGoalHeader();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d ISZERO; i \u003c goalList.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneGoal((i + ONE_INDEX), goalList.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Adds an instance of goals into GoalsList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param goals a new goal object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If a duplicate goal name is found."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void addToGoals(Goals goals, Ui ui) throws GoalsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (goalExists(goals.getGoalsName())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new GoalsException(\"There is already a goal with the same name \" + goals.getGoalsName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalList.add(goals);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Added a new goal with the below details: \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        printOneGoal(ONE_INDEX, goals, ISSINGLE, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Deletes a goal from GoalsList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param goalName The name of the goal."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If trying to delete from empty GoalsList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void deleteFromGoalList(String goalName, Ui ui) throws GoalsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (goalList.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new GoalsException(\"There are no goals set!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d ISZERO; i \u003c goalList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                if (goalList.get(i).getGoalsName().equals(goalName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    Goals temp \u003d goalList.get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    goalList.remove(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    ui.printMessage(\"Details of the goal being removed:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    printOneGoal(ONE_INDEX, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Compares if the current goal name is the same as the new intended goal name."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param currentGoals Current Goal Name of the Goal."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newGoalName  New Goal Name that user intends to change."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If there\u0027s a goal of the same name."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void compareGoals(Goals currentGoals, String newGoalName) throws GoalsException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c goalList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (goalList.get(i).getGoalsName().equals(newGoalName) \u0026\u0026 !goalList.get(i).equals(currentGoals)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                throw new GoalsException(\"There is already a goal with the same name \" + newGoalName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if a goal exists when wanting to add a new goal."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param goalName refers to the about-to-add goal name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return True if it exists and False if it doesn\u0027t."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private boolean goalExists(String goalName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c goalList.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (goalName.equals(goalList.get(i).getGoalsName())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Edits an instance of the goal."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param goalName To identify and retrieve the goal details."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param amount   New amount of the goal."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param date     New date to reach the goal."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName  New name to identify the goal."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If date is not in correct format, or changing to a name that already exists,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *                        or no goal with the goalName."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void editGoals(String goalName, String amount, Date date, String newName, Bank savingAcc, Ui ui)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throws GoalsException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c goalList.size(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            if (goalList.get(i).getGoalsName().equals(goalName)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    compareGoals(goalList.get(i), newName);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    goalList.get(i).setGoalsName(newName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    goalList.get(i).setGoalsAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                if (date !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    goalList.get(i).setGoalsDate(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                if (savingAcc !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                    goalList.get(i).setSavingAcc(savingAcc);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                ui.printMessage(\"New details of goals changed: \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneGoal(ONE_INDEX, goalList.get(i), ISSINGLE, ui);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        throw new GoalsException(\"There are no goals with the name: \" + goalName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints goal details."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num                Represents the numbering of the goal."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param goal               The goal object to be printed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param isMultiplePrinting Represents whether the function will be called for printing once or multiple"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *                           time"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui                 The object use for printing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneGoal(int num, Goals goal, boolean isMultiplePrinting, Ui ui) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printGoalHeader();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!goal.getSavingAcc().isBlank()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            goal.isDone(Double.parseDouble(goal.getRemainingAmount()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printGoal(num, goal.getGoalsName(), \"$\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + new DecimalFormat(\"0.00\").format(goal.getGoalsAmount()),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                goal.getSavingAcc(),\"$\" + goal.getRemainingAmount(), goal.getGoalsDate(), goal.getStatus());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 42,
      "BrianTKM": 1,
      "valerietyj": 130,
      "shamussy": 5
    }
  },
  {
    "path": "src/main/java/owlmoney/model/goals/exception/GoalsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.model.goals.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class GoalsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates a new GoalsException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public GoalsException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/profile/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.Investment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.BankList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.CardList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.Goals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.GoalsList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.goals.exception.GoalsException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "import owlmoney.model.profile.exception.ProfileException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Stores details of the user which includes bank accounts, cards, names."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private BankList bankList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private CardList cardList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private GoalsList goalsList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BANK \u003d \"bank\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String BONDS \u003d \"bonds\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String CARD \u003d \"card\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ISBANK \u003d \"savings transfer\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ISINVESTMENT \u003d \"investment transfer\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String TRANSFERCATEGORY \u003d \"Fund Transfer\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String DEPOSITCATEGORY \u003d \"Deposit\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String PROFILE_BANK_LIST_FILE_NAME \u003d \"profile_banklist.csv\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT_BOND_LIST_FILE_NAME \u003d \"_investment_bondList.csv\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT_TRANSACTION_LIST_FILE_NAME \u003d \"_investment_transactionList.csv\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING_TRANSACTION_LIST_FILE_NAME \u003d \"_saving_transactionList.csv\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING_RECURRING_TRANSACTION_LIST_FILE_NAME \u003d \"_saving_recurring_transactionList.csv\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String PROFILE_FILE_NAME \u003d \"profile.csv\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String HAS_SPENT \u003d \"true\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String NOT_SPENT \u003d \"false\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new instance of the user profile."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newUserName The username that the user desires to use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Profile(String newUserName, Ui ui) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.username \u003d newUserName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.cardList \u003d new CardList(storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.goalsList \u003d new GoalsList(storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            loadBanksFromImportedData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            iterateBanksToAddTransaction();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Error importing banks, data related to some bank accounts are not available\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the username of the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The username of the profile."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String profileGetUsername() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.username;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the username of the user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name existing name of user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName new name that user wants to change to."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui required for printing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ProfileException if name don\u0027t match or change same name or name contain special character."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileSetUsername(String name, String newName, Ui ui) throws ProfileException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        checkProfileName(name, newName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.username \u003d newName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        ui.printMessage(\"\\nProfile name was: \" + name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        ui.printMessage(\"Now changed to: \" + newName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            storage.writeProfileFile(new String[]{profileGetUsername()},PROFILE_FILE_NAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Unable to save profile now, your data is at risk, but we will\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    + \" try saving again, feel free to continue using the program.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Checks if profile name exist and not changed to same name."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name existing name of user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName new name that user wants to change to."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws ProfileException if name don\u0027t match or change same name."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void checkProfileName(String name, String newName) throws ProfileException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (!name.equals(this.username)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ProfileException(\"No profile name with \" + name + \"found!\\nTry this instead: \" + this.username);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        if (newName.equals(this.username)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throw new ProfileException(\"Profile name is already \" + this.username);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new bank account into the BankList stored in this profile."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank an instance of the new bank account."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicated bank name found."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileAddNewBank(Bank newBank, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListAddBank(newBank, ui);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes a bank account from the BankList."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the Bank account."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account fails check criteria."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileDeleteBank(String bankName, String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListDeleteBank(bankName, bankType, ui);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all the bank accounts in the BankList."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If there are no bank account of specified type."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileListBanks(String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListListBankAccount(bankType, ui);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds a new expenditure tied to a specific bank account or credit card."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param accName The name of the bank account or credit card."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     An expenditure object."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type    Represents type of expenditure to be added."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileAddNewExpenditure(String accName, Transaction exp, Ui ui, String type)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throws BankException, CardException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (CARD.equals(type)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            cardList.cardListAddExpenditure(accName, exp, ui, type);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else if (BANK.equals(type) || BONDS.equals(type)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.bankListAddExpenditure(accName, exp, ui, type);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to a specific bank account."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expIndex    The index of the expenditure in the expenditureList tied to a specific bank account."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param accountName The name of the card or bank account."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui          required for printing."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If card does not exist."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileDeleteExpenditure(int expIndex, String accountName, Ui ui,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String type) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bankList.bankListDeleteExpenditure(expIndex, accountName, ui);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } else if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            cardList.cardListDeleteExpenditure(expIndex, accountName, ui);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits from a specific bank account."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param listedBank Bank account to list from."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileListDeposit(String listedBank, Ui ui, int displayNum)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListListBankDeposit(listedBank, ui, displayNum);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists expenditure from a specific a bank account or credit card."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param listedBankOrCard Bank account or credit card to list from."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui               required for printing."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum       Number of expenditure to list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type             Type of account to add expenditure into."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If no expenditure found or no expenditure is in the list.."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If the credit card name cannot be found."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileListExpenditure(String listedBankOrCard, Ui ui, int displayNum, String type)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            cardList.cardListListCardExpenditure(listedBankOrCard, ui, displayNum);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } else if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bankList.bankListListBankExpenditure(listedBankOrCard, ui, displayNum);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific expenditure from a specific bank account."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       Transaction number of the expenditure."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank Bank account of expenditure."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         New description of expenditure."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       New amount of expenditure."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         New date of expenditure."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category     New category of expenditure."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for printing."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileEditExpenditure(int expNum, String editFromBank, String desc, String amount,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date, String category, Ui ui, String type)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            cardList.cardListEditExpenditure(expNum, editFromBank, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } else if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bankList.bankListEditExpenditure(expNum, editFromBank, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific savings account."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name    Name of savings account to be edited."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of the savings account."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount  New amount of the savings account."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income  New income of the saving account."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicate bank account name is found."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileEditSavingsAccount(String name, String newName, String amount, String income, Ui ui)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListEditSavings(name, newName, amount, income, ui);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits a specific investment account."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name    Name of investment account to be edited."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName New name of the investment account."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount  New amount of the investment account."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If duplicate bank account name is found."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileEditInvestmentAccount(String name, String newName, String amount, Ui ui)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListEditInvestment(name, newName, amount, ui);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a specific deposit from a specific bank account."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param depIndex Transaction number of the deposit."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank name of the deposit."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileDeleteDeposit(int depIndex, String bankName, Ui ui)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListDeleteDeposit(bankName, depIndex, ui);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to a specific bank account."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName  Bank account name."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep      Deposit to be added."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankType Type of bank to add deposit into"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void profileAddNewDeposit(String accName, Transaction dep, Ui ui, String bankType)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.bankListAddDeposit(accName, dep, ui, bankType);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific deposit from a specific bank account."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       Transaction number of the deposit."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank Bank account of deposit."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         New description of deposit."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       New amount of deposit."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         New date of deposit."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for deposit."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileEditDeposit(int expNum, String editFromBank, String desc, String amount,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListEditDeposit(expNum, editFromBank, desc, amount, date, ui);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Adds a new credit card into the CardList stored in this profile."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param newCard an instance of the new credit card."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void profileAddNewCard(Card newCard, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        cardList.cardListAddCard(newCard, ui);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Edits a card from the CardList."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name    name of the credit card."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newName new name of the credit card if any."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param limit   new limit of the credit card if any."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate  new rebate of the credit card if any."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      The ui object required for printing."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If card cannot be found."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileEditCardDetails(String name, String newName, String limit, String rebate, Ui ui)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws CardException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        cardList.cardListEditCard(name, newName, limit, rebate, ui);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Deletes a card from the CardList."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name The name of the credit card."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui   The ui object required for printing."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If card does not exist."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileDeleteCard(String name, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        cardList.cardListDeleteCard(name, ui);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Lists all the cards in the CardList."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The ui object required for printing."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If CardList is empty."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileListCards(Ui ui) throws CardException {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        cardList.cardListListCards(ui);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes bond from the bondList in the specified investment account."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to delete."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank is not found."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileDeleteBond(String bankName, String bondName, Ui ui)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, BondException {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListDeleteBond(bankName, bondName, ui);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the investment account if it exists."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank does not exist."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the bond does not exist."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond profileGetBond(String bankName, String bondName) throws BankException, BondException {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bankList.bankListGetBond(bankName, bondName);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds bond to a specific bank account."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond  the bond object."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileAddNewBond(String bankName, Bond newBond, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListAddBond(bankName, newBond, ui);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists before adding."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the bank account name."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond     the bond object."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If duplicate bond name is found."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileIsBondUnique(String bankName, Bond bond) throws BankException, BondException {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListIsBondExist(bankName, bond);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond in the bank account."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to edit."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate     the new rate"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If there are no bonds."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileEditBond(String bankName, String bondName, String year, String rate, Ui ui)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, BondException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListEditBond(bankName, bondName, year, rate, ui);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bank specified bank account."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName   the name of the bank account."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum the number of bonds to display."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If there are no bonds."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void profileListBonds(String bankName, Ui ui, int displayNum)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, BondException {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListListBond(bankName, ui, displayNum);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Lists all goals in GoalsList."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void profileListGoals(Ui ui) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsList.listGoals(ui);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Adds a new financial goal."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param goals the goals object."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If invalid parameters / attempt to add the same goal name."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void profileAddGoals(Goals goals, Ui ui) throws GoalsException {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsList.addToGoals(goals, ui);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Deletes a goal from GoalsList."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param name name of the goal."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If goal does not exists."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void profileDeleteGoals(String name, Ui ui) throws GoalsException {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsList.deleteFromGoalList(name, ui);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Edits goals from GoalsList."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param goalName   name of goal."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param amount     new target amount to reach for the goal."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param date       new targeted date to meet goal."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param newName    new name for the goal."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param savingName new saving name for goal."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws GoalsException If goal does not exists."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void profileEditGoals(String goalName, String amount, Date date, String newName, Bank savingName, Ui ui)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            throws GoalsException {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        goalsList.editGoals(goalName, amount, date, newName, savingName, ui);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Retrieves a Saving object."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param savingBankName Account name of Saving."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return Total amount in Saving Account."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @throws BankException If no savingBankName is found."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public Bank profileGetSavingAccount(String savingBankName) throws BankException {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return bankList.bankListGetSavingAccount(savingBankName);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a recurring expenditure to the specified account."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accountName             Bank account name to add the recurring expenditure to."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newRecurringExpenditure New recurring expenditure to be added."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui                      Used for printing."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type                    Type of account to add to."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account is not found or if bank account is an investment account."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If the recurring expenditure list is full."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void profileAddRecurringExpenditure("
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String accountName, Transaction newRecurringExpenditure, Ui ui, String type)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            //card recurring transaction"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Do card recurring transaction here\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.bankListAddRecurringExpenditure(accountName, newRecurringExpenditure, ui);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a recurring expenditure from the specified account."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accountName Account name."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Index of the recurring expenditure."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui          Used for printing."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type        Type of account to delete from."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank account does not exist or is an investment account."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditure in the list or if index is out of range."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void profileDeleteRecurringExpenditure(String accountName, int index, Ui ui, String type)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            //card recurring transaction"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Do card recurring transaction here\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.bankListDeleteRecurringExpenditure(accountName, index, ui);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists all recurring expenditure from the specified account."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accountName Name of account."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui          Used for printing."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type        Account type."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If bank is not found or is an investment account."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures in the account."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void profileListRecurringExpenditure(String accountName, Ui ui, String type)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            //card recurring transaction"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Do card recurring transaction here\");"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.bankListListRecurringExpenditure(accountName, ui);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a recurring expenditure from the specified account."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accountName Name of the account."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Index of the recurring expenditure."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of the recurring expenditure."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      New amount of the recurring expenditure."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    New category of the recurring expenditure."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui          Used for printing."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param type        The account type."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If the bank is not found or is an investment account."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditure in the account or index is out of range."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void profileEditRecurringExpenditure("
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String accountName, int index, String description, String amount, String category, Ui ui, String type)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            //card recurring transaction"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Do card recurring transaction here\");"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.bankListEditRecurringExpenditure(accountName, index, description, amount, category, ui);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Updates all outdated objects in the profile."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void profileUpdate(Ui ui) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.bankListUpdateRecurringTransactions(ui);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //card update recurring"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Profile has been updated\");"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Transfers fund from one bank account to another bank account."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param from   The account name for transferring the fund."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param to     The account name to receive the fund."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount The amount to be transferred."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param date   The date that the fund was transferred."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui     The ui object Required for printing."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If any of the bank does not exist or insufficient fund to transfer."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void transferFund(String from, String to, double amount, Date date,"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Ui ui) throws BankException {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String fromType \u003d bankList.bankListIsAccountExistToTransfer(from, amount);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String toType \u003d bankList.bankListIsAccountExistToReceive(to);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String descriptionTo \u003d \"Fund Transfer to \" + to;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Transaction newExpenditure \u003d new Expenditure(descriptionTo, amount, date, TRANSFERCATEGORY);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        bankList.bankListAddExpenditure(from, newExpenditure, ui, checkBankType(fromType));"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String descriptionFrom \u003d \"Fund Received from \" + from;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Transaction newDeposit \u003d new Deposit(descriptionFrom, amount, date, DEPOSITCATEGORY);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        bankList.bankListAddDeposit(to, newDeposit, ui, checkBankType(toType));"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks whether the bank account is a savings or investment account."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type The type of bank account."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return The result whether it is to be transfer or deposit to a savings or investment account."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String checkBankType(String type) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (SAVING.equals(type)) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return ISBANK;"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return ISINVESTMENT;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds either the bank or card that matches the name provided by user."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name The name to be matched against."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type The type which specify whether the search is for saving, investment or card object."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui   The object required for printing."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If there is no matches for saving or investment object."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException If there is no matches for card object."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findBankOrCard(String name, String type, Ui ui) throws BankException, CardException {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (SAVING.equals(type)) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.findBankAccount(name, type, ui);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (INVESTMENT.equals(type)) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.findBankAccount(name, type, ui);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (CARD.equals(type)) {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardList.findCard(name, ui);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the bonds that matches the name provided by user."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param bondName The bond name to be searched for."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param from     The investment account name to search for the bonds."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui       The object required for printing."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException If investment account does not exist."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BondException If no bonds could be found."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findBond(String bondName, String from, Ui ui) throws BankException, BondException {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank investmentAccount \u003d bankList.checkInvestmentAccountExist(from);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        investmentAccount.findBondInInvestment(bondName, ui);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions in either bank or card object that matches with the keywords provided by user."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name        The bank or card name to be searched for."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate    The date to search from."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate      The date to search until."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to match against."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category    The category keyword to match against."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui          The object required for printing."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws BankException        If bank name specified does not exist."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If parsing of date fails."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws CardException        If card with the name does not exist."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findTransaction(String name, String fromDate, String toDate, String description, String category,"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String type, Ui ui) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (type.equals(BANK)) {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListFindTransaction(name, fromDate, toDate, description, category, ui);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (type.equals(CARD)) {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardList.cardListFindTransaction(name, fromDate, toDate, description, category, ui);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports data generally for further processing based on file name specified."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName the name of the file to be imported."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the imported data from the file formatted in List of String arrays."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws Exception if there are errors importing the data from the file."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private List\u003cString[]\u003e importListDataFromStorage(String fileName,Ui ui) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        List\u003cString[]\u003e importData \u003d null;"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            importData \u003d storage.readFile(fileName);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Error importing files from storage to process.\");"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return importData;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Add banks from imported data."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws Exception if there are errors importing data."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void loadBanksFromImportedData() throws Exception {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        List\u003cString[]\u003e importData \u003d importListDataFromStorage(PROFILE_BANK_LIST_FILE_NAME,ui);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (String[] importDataRow : importData) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String bankName \u003d importDataRow[0];"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String bankType \u003d importDataRow[1];"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String amount \u003d importDataRow[2];"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double doubleAmount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String income \u003d importDataRow[3];"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double doubleIncome \u003d Double.parseDouble(income);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankType.equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Bank newInvestment \u003d new Investment(bankName, doubleAmount);"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                profileImportNewBank(newInvestment);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (bankType.equals(SAVING)) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Bank newSaving \u003d new Saving(bankName, doubleAmount, doubleIncome);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                profileImportNewBank(newSaving);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new BankException(\"Error importing banks, data related to some bank accounts are not available\");"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Iterates the bank file line by line to add specific details tied to the bank account."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws Exception if there are errors importing data."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void iterateBanksToAddTransaction() throws Exception {"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        List\u003cString[]\u003e importBankData \u003d importListDataFromStorage(PROFILE_BANK_LIST_FILE_NAME,ui);"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c importBankData.size(); i++) {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String bankName \u003d importBankData.get(i)[0];"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String bankType \u003d importBankData.get(i)[1];"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankType.equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String transactionFileName \u003d i + INVESTMENT_TRANSACTION_LIST_FILE_NAME;"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String bondsFileName \u003d i + INVESTMENT_BOND_LIST_FILE_NAME;"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                loadBondsForInvestmentBanks(bondsFileName,bankName);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                loadTransactionsForBanks(transactionFileName,bankName, bankType);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (bankType.equals(SAVING)) {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String fileName \u003d i + SAVING_TRANSACTION_LIST_FILE_NAME;"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                loadTransactionsForBanks(fileName,bankName, bankType);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String recurringTransactionFileName \u003d i + SAVING_RECURRING_TRANSACTION_LIST_FILE_NAME;"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                loadRecurringTransactionsForBanks(recurringTransactionFileName,bankName,bankType);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Loads the transactions tied to the bank account."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName the name of the file to obtain transactions from."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of bank account."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws Exception if there are errors importing data."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void loadTransactionsForBanks(String fileName, String bankName, String bankType)"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        List\u003cString[]\u003e importData \u003d importListDataFromStorage(fileName,ui);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (String[] importDataRow : importData) {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String description \u003d importDataRow[0];"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String amount \u003d importDataRow[1];"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double doubleAmount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date \u003d importDataRow[2];"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date dateInFormat \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String category \u003d importDataRow[3];"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String hasSpent \u003d importDataRow[4];"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankType.equals(INVESTMENT)) {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (hasSpent.equals(HAS_SPENT)) {"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    Transaction newExpenditure \u003d new Expenditure(description, doubleAmount, dateInFormat, category);"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    profileImportNewExpenditure(bankName, newExpenditure, BONDS);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } else if (hasSpent.equals(NOT_SPENT)) {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    Transaction newDeposit \u003d new Deposit(description, doubleAmount, dateInFormat, category);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    profileImportNewDeposit(bankName, newDeposit, BONDS);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (bankType.equals(SAVING)) {"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (hasSpent.equals(HAS_SPENT)) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    Transaction newExpenditure \u003d new Expenditure(description, doubleAmount, dateInFormat, category);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    profileImportNewExpenditure(bankName, newExpenditure, BANK);"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } else if (hasSpent.equals(NOT_SPENT)) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    Transaction newDeposit \u003d new Deposit(description, doubleAmount, dateInFormat, category);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    profileImportNewDeposit(bankName, newDeposit, BANK);"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Loads the recurring transactions tied to the bank account."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName the name of the file to obtain transactions from."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of bank account."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws Exception if there are errors importing data."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void loadRecurringTransactionsForBanks(String fileName, String bankName, String bankType)"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        List\u003cString[]\u003e importData \u003d importListDataFromStorage(fileName,ui);"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (String[] importDataRow : importData) {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String description \u003d importDataRow[0];"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String amount \u003d importDataRow[1];"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double doubleAmount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date \u003d importDataRow[2];"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date dateInFormat \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String category \u003d importDataRow[3];"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String hasSpent \u003d importDataRow[4];"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankType.equals(SAVING)) {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (hasSpent.equals(HAS_SPENT)) {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    Transaction newExpenditure \u003d new Expenditure(description, doubleAmount, dateInFormat, category);"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    profileImportNewRecurringExpenditure(bankName, newExpenditure);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } else if (hasSpent.equals(NOT_SPENT)) {"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    Transaction newDeposit \u003d new Deposit(description, doubleAmount, dateInFormat, category);"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    profileImportNewRecurringExpenditure(bankName, newDeposit);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Loads the bonds tied to the investment bank account."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName the name of the file to obtain transactions from."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws Exception if there are errors importing data."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void loadBondsForInvestmentBanks(String fileName, String bankName)"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        List\u003cString[]\u003e importData \u003d importListDataFromStorage(fileName,ui);"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (String[] importDataRow : importData) {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String bondName \u003d importDataRow[0];"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String amount \u003d importDataRow[1];"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double doubleAmount \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String rate \u003d importDataRow[2];"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double doubleRate \u003d Double.parseDouble(rate);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String date \u003d importDataRow[3];"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date dateInFormat \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String year \u003d importDataRow[4];"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int integerYear \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Bond newBond \u003d new Bond(bondName, doubleAmount, doubleRate, dateInFormat, integerYear);"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            profileImportNewBonds(bankName, newBond);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports one instance of bonds."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond an instance of the bond to be imported."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void profileImportNewBonds(String bankName, Bond newBond) throws BankException {"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListImportNewBonds(bankName, newBond);"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports one instance of deposit."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit an instance of the deposit."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType the type of bank account."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void profileImportNewDeposit(String bankName, Transaction deposit, String bankType) throws BankException {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListImportNewDeposit(bankName, deposit, bankType);"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports one instance of an expenditure."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of the expenditure."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type the type of expenditure."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void profileImportNewExpenditure(String bankName, Transaction expenditure, String type)"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListImportNewExpenditure(bankName, expenditure, type);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports one instance of a bank account."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank an instance of a new bank account."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void profileImportNewBank(Bank newBank) {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListImportNewBank(newBank);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Imports one instance of recurring expenditure."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName the name of the bank account."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newRecurringExpenditure an instance of the recurring expenditure."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BankException if the bank account does not support this feature."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void profileImportNewRecurringExpenditure(String bankName, Transaction newRecurringExpenditure)"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.bankListImportNewRecurringExpenditure(bankName, newRecurringExpenditure);"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 134,
      "BrianTKM": 209,
      "TerenceTanWT": 37,
      "valerietyj": 98,
      "shamussy": 442
    }
  },
  {
    "path": "src/main/java/owlmoney/model/profile/exception/ProfileException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.model.profile.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class ProfileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Creates a new Profile Exception object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public ProfileException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Deposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details of a deposit."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Deposit extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a new deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of deposit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of deposit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of deposit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of deposit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Deposit(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(description, amount, date, category);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.setSpent(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 20,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details of an expenditure."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Expenditure extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a new Expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of expenditure."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of expenditure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of expenditure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Expenditure(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(description, amount, date, category);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.setSpent(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 20,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/RecurringExpenditureList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details of recurring expenditures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class RecurringExpenditureList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cTransaction\u003e recurringExpenditures;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final int MAX_LIST_SIZE \u003d 2000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String TRANSTYPE \u003d \"transaction\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ITEMTYPE \u003d \"item\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final boolean ISMULTIPLE \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final boolean ISSINGLE \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of Recurring Expenditure list that contains an ArrayList of recurring expenditures."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public RecurringExpenditureList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures \u003d new ArrayList\u003cTransaction\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new recurring expenditure to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newExpenditure New recurring expenditure to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If the list hits the maximum size."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addRecurringExpenditure(Transaction newExpenditure, Ui ui)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (recurringExpenditures.size() \u003e\u003d MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"The list has reach a max size of \" + MAX_LIST_SIZE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures.add(newExpenditure);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added expenditure with the following details:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printOneTransaction(1, newExpenditure, ISSINGLE, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a recurring expenditure from the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the expenditure in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException There are 0 recurring expenditures or index is out of range."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteRecurringExpenditure(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (recurringExpenditures.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no recurring expenditures in this bank account\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!((index - 1) \u003e\u003d 0 \u0026\u0026 (index - 1) \u003c recurringExpenditures.size())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction temp \u003d recurringExpenditures.get(index - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        recurringExpenditures.remove(index - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Deleted expenditure with the following details:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printOneTransaction(1, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists all recurring expenditures in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listRecurringExpenditure(Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (recurringExpenditures.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no recurring expenditures in this account\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c recurringExpenditures.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            printOneHeader(ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            printOneTransaction((i + 1), recurringExpenditures.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printDivider();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a recurring expenditure from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the recurring expenditure."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of the recurring expenditure."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the recurring expenditure."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of the recurring expenditure."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Used for printing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If there are 0 recurring expenditures or index is out of range."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editRecurringExpenditure("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int index, String description, String amount, String category, Ui ui)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (recurringExpenditures.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no recurring expenditures in this account\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!((index - 1) \u003e\u003d 0 \u0026\u0026 (index - 1) \u003c recurringExpenditures.size())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!description.isBlank()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            recurringExpenditures.get(index - 1).setDescription(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!amount.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            recurringExpenditures.get(index - 1).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!category.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            recurringExpenditures.get(index - 1).setCategory(category);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Edited details of the specified expenditure:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printOneTransaction(1, recurringExpenditures.get(index - 1), ISSINGLE, ui);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the recurring expenditure in the specified index."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Index of the recurring expenditure."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return The recurring expenditure."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Transaction getRecurringExpenditure(int index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return recurringExpenditures.get(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the total number of recurring expenditures in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return The number of recurring expenditures in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return recurringExpenditures.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Prints transaction details."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param num                Represents the numbering of the transaction."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param transaction        The transaction object to be printed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param isMultiplePrinting Represents whether the function will be called for printing once or multiple"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *                           time"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui                 The object use for printing."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private void printOneTransaction(int num, Transaction transaction, boolean isMultiplePrinting, Ui ui) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printTransactionHeader(ITEMTYPE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printTransaction(num, transaction.getDescription(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                (transaction.checkDebitCredit() + new DecimalFormat(\"0.00\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        .format(transaction.getAmount())), transaction.getDate(), transaction.getCategory());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Prints the transaction header details once only when listing of multiple transaction."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         The object use for printing."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private void printOneHeader(Ui ui) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printTransactionHeader(TRANSTYPE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the transactionList."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the size of the transactionList."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return recurringExpenditures.size();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the transaction object from the transactionList by specifying the transaction index."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the transaction object."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Transaction get(int transactionIndex) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return recurringExpenditures.get(transactionIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure to the TransactionList."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of an expenditure."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importRecurringExpenditureToList(Transaction expenditure) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (recurringExpenditures.size() \u003e\u003d MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            recurringExpenditures.remove(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        recurringExpenditures.add(expenditure);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 161,
      "shamussy": 30
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains the details of a transaction."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private boolean spent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of a transaction object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param description The description that describes this expenditure."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount      The amount of money spent in this instance of expenditure."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date        The date when this expenditure was made."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param category    The category that this expenditure can be tagged to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Transaction(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the spent flag for this transaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param spent The flag of whether the transaction is deducting from bank amount."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setSpent(boolean spent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.spent \u003d spent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the spent flag for this transaction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return True if transaction deducts from bank amount."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean getSpent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.spent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money spent in this transaction."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The amount of money spent in this transaction."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the instance of expenditure."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The description of the expenditure."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the date that this expenditure was made in String format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return The date that the expenditure was made in String format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DateFormat temp \u003d new SimpleDateFormat(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.format(this.date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Gets the date that this expenditure was made in Date format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return The date that the expenditure was made in Date format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Date getDateInDateFormat() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the date that this expenditure was made in LocalDate format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return The date that the expenditure was made in LocalDate format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        LocalDate localDate \u003d date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of that the expenditure was tagged to."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The category of the expenditure that it was tagged to."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if it is a + or - to bank amount."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Plus if adds bank amount, minus if deducts bank amount."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String checkDebitCredit() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!this.spent) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"[+] $\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"[-] $\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Displays the description, amount added/spent, date and category of transaction."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return description, amount added/spent, date and category of transaction in String format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getDetails() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Description: \" + getDescription() + \"\\nAmount: \" + checkDebitCredit()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + new DecimalFormat(\"0.00\").format(getAmount()) + \"\\nDate: \" + getDate()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + \"\\nCategory: \" + getCategory() + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new description of the transaction."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newDesc New description of transaction."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setDescription(String newDesc) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d newDesc;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new amount for the transaction."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newAmount New amount for the transaction."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setAmount(double newAmount) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d newAmount;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new date of the transaction."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newDate New date of the transaction."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void setDate(Date newDate) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d newDate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new category of the transaction."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newCategory New category of the transaction."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setCategory(String newCategory) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d newCategory;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 23,
      "BrianTKM": 92,
      "TerenceTanWT": 14,
      "shamussy": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Contains a list of all transactions in the bank account."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cTransaction\u003e transactionLists;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String TRANSTYPE \u003d \"transaction\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ITEMTYPE \u003d \"item\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISMULTIPLE \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final boolean ISSINGLE \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final int MAX_LIST_SIZE \u003d 2000;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final int ISZERO \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FINDDESCRIPTION \u003d \"description\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FINDCATEGORY \u003d \"category\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FINDDATE \u003d \"date range\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of Transaction list that contains an ArrayList of expenditures and deposits."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactionLists \u003d new ArrayList\u003cTransaction\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If no expenditure is found or no expenditure is in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            boolean expenditureExist \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d transactionLists.size() - ONE_INDEX; i \u003e\u003d ISZERO; i--) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (transactionLists.get(i).getSpent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    printOneHeader(counter, displayNum, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    printOneTransaction((i + ONE_INDEX), transactionLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    expenditureExist \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (counter \u003c\u003d ISZERO || i \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    ui.printDivider();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (counter \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!expenditureExist) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(\"No expenditures found\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listDeposit(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            boolean depositExist \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d transactionLists.size() - ONE_INDEX; i \u003e\u003d ISZERO; i--) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!transactionLists.get(i).getSpent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    printOneHeader(counter, displayNum, ui);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    printOneTransaction((i + ONE_INDEX), transactionLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    depositExist \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (counter \u003c\u003d ISZERO || i \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    ui.printDivider();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (counter \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!depositExist) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"No deposits found\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure to the TransactionList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of an expenditure."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addExpenditureToList(Transaction exp, Ui ui, String type) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003e\u003d MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.remove(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactionLists.add(exp);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!\"bonds\".equals(type)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printMessage(\"Added expenditure with the following details:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneTransaction(ONE_INDEX, exp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a deposit to the TransactionList."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep an instance of an deposit."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addDepositToList(Transaction dep, Ui ui, String bankType) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003e\u003d MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.remove(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactionLists.add(dep);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"bank\".equals(bankType) || \"savings transfer\".equals(bankType)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                || \"investment transfer\".equals(bankType)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printMessage(\"Added deposit with the following details:\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            printOneTransaction(ONE_INDEX, dep, ISSINGLE, ui);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure to the TransactionList."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param index index of the expenditure in the TransactionList."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double deleteExpenditureFromList(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d ISZERO \u0026\u0026 (index - ONE_INDEX) \u003c transactionLists.size()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!transactionLists.get(index - 1).getSpent()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Transaction temp \u003d transactionLists.get(index - ONE_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                transactionLists.remove(index - ONE_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(\"Details of deleted Expenditure:\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneTransaction(ONE_INDEX, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return temp.getAmount();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific expenditure in the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number of the expenditure."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description of the expenditure."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount of the expenditure."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date of the expenditure."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of the expenditure."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the expenditure."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double editExpenditure(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.get(expNum - ONE_INDEX).setDescription(desc);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.get(expNum - ONE_INDEX).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                transactionLists.get(expNum - ONE_INDEX).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(e.toString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(category.isBlank() || category.isEmpty())) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.get(expNum - ONE_INDEX).setCategory(category);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Edited details of the specified expenditure:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printOneTransaction(ONE_INDEX, transactionLists.get(expNum - ONE_INDEX), ISSINGLE, ui);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return transactionLists.get(expNum - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific deposit in the list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the deposit."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description of the deposit."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the deposit."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date of the deposit."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     required for printing."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the deposit."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double editDeposit(int expNum, String desc, String amount, String date, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Editing transaction...\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.get(expNum - ONE_INDEX).setDescription(desc);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactionLists.get(expNum - ONE_INDEX).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                transactionLists.get(expNum - ONE_INDEX).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(e.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Edited details of the specified deposits:\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printOneTransaction(ONE_INDEX, transactionLists.get(expNum - ONE_INDEX), ISSINGLE, ui);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return transactionLists.get(expNum - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the specific expenditure amount."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the expenditure."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the expenditure."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not an expenditure."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getExpenditureAmount(int index) throws TransactionException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d ISZERO \u0026\u0026 (index - ONE_INDEX) \u003c transactionLists.size()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!transactionLists.get(index - ONE_INDEX).getSpent()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return transactionLists.get(index - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes the specific deposit from the current bank account."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deleted deposit."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double deleteDepositFromList(int index, Ui ui) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction temp \u003d transactionLists.get(index - ONE_INDEX);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactionLists.remove(index - ONE_INDEX);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printMessage(\"Details of deleted deposit:\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        printOneTransaction(ONE_INDEX, temp, ISSINGLE, ui);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.getAmount();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the amount of the deposit specified."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deposit"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getDepositValue(int index) throws TransactionException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactionLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d ISZERO \u0026\u0026 (index - ONE_INDEX) \u003c transactionLists.size()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (transactionLists.get(index - ONE_INDEX).getSpent()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"The transaction is not a deposit\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return transactionLists.get(index - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints transaction details."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num                Represents the numbering of the transaction."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param transaction        The transaction object to be printed."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param isMultiplePrinting Represents whether the function will be called for printing once or multiple"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *                           time"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui                 The object use for printing."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneTransaction(int num, Transaction transaction, boolean isMultiplePrinting, Ui ui) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printTransactionHeader(ITEMTYPE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ui.printTransaction(num, transaction.getDescription(),"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                (transaction.checkDebitCredit() + new DecimalFormat(\"0.00\")"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        .format(transaction.getAmount())), transaction.getDate(), transaction.getCategory());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isMultiplePrinting) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the transaction header details once only when listing of multiple transaction."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param counter    Represents the counter of the transaction for printing."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param displayNum Represents number of transaction to list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         The object use for printing."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneHeader(int counter, int displayNum, Ui ui) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (counter \u003d\u003d displayNum) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printTransactionHeader(TRANSTYPE);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns total amount spent in a particular month of the year."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param month Month to check total amount spent."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param year  Year to check total amount spent."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Total amount spent in the particular month of the year."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public double getMonthAmountSpent(int month, int year) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        double totalAmount \u003d 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionLists.size(); i++) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            LocalDate date \u003d transactionLists.get(i).getLocalDate();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            int expMonth \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            int expYear \u003d date.getYear();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (expMonth \u003d\u003d month \u0026\u0026 expYear \u003d\u003d year) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                totalAmount +\u003d transactionLists.get(i).getAmount();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return totalAmount;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the particular transaction month based on transaction number."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param expNum Transaction number to get the month of."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Transaction month."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public int getTransactionMonthByIndex(int expNum) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return transactionLists.get(expNum - 1).getLocalDate().getMonthValue();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the particular transaction year based on transaction number."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param expNum Transaction number to get the year of."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Transaction year."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public int getTransactionYearByIndex(int expNum) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return transactionLists.get(expNum - 1).getLocalDate().getYear();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns true if expenditure list is empty."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return True if expenditure list is empty."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean expListIsEmpty() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return transactionLists.isEmpty();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions that matches with the keywords specified by the user."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate The date to search from."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate The date to search until."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description The description keyword to match against."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category The category keyword to match against."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The object required for printing."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If parsing of date fails."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void findMatchingTransaction(String fromDate, String toDate,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String description, String category, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!(description.isBlank() || description.isEmpty())) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            findByDescription(description, ui);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!(category.isBlank() || category.isEmpty())) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            findByCategory(category, ui);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!(fromDate.isBlank() || fromDate.isEmpty())) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            findByDate(fromDate, toDate, ui);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions that matches with the description keyword specified by the user."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param keyword The description keyword to match against."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The object required for printing."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void findByDescription(String keyword, Ui ui) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String matchingKeyword \u003d keyword.toUpperCase();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int printCounter \u003d 0;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c transactionLists.size(); i++) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (transactionLists.get(i).getDescription().toUpperCase().contains(matchingKeyword)) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneHeaderForFind(printCounter, FINDDESCRIPTION, ui);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneTransaction((i + ONE_INDEX), transactionLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printCounter++;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (printCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printMessage(\"No matches for the description keyword: \" + keyword);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions that matches with the category keyword specified by the user."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param keyword The category keyword to match against."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The object required for printing."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void findByCategory(String keyword, Ui ui) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String matchingKeyword \u003d keyword.toUpperCase();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int printCounter \u003d 0;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c transactionLists.size(); i++) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (transactionLists.get(i).getCategory().toUpperCase().contains(matchingKeyword)) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneHeaderForFind(printCounter, FINDCATEGORY, ui);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneTransaction((i + ONE_INDEX), transactionLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printCounter++;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (printCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printMessage(\"No matches for the category keyword: \" + keyword);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Finds the transactions that falls within the date range specified by the user."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param fromDate The date to search from."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param toDate The date to search until."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui The object required for printing."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws TransactionException If parsing of date fails."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void findByDate(String fromDate, String toDate, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int printCounter \u003d 0;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date from;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date to;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            from \u003d temp.parse(fromDate);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            to \u003d temp.parse(toDate);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new TransactionException(error.toString());"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c transactionLists.size(); i++) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            boolean isBeforeFromDate \u003d transactionLists.get(i).getDateInDateFormat().before(from);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            boolean isAfterToDate \u003d transactionLists.get(i).getDateInDateFormat().after(to);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (!isBeforeFromDate \u0026\u0026 !isAfterToDate) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneHeaderForFind(printCounter, FINDDATE, ui);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printOneTransaction((i + ONE_INDEX), transactionLists.get(i), ISMULTIPLE, ui);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                printCounter++;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (printCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printMessage(\"No matches for the date range specified: \" + fromDate + \" to \" + toDate);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printDivider();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the header to list the found transactions."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param counter    Represents the counter of the transaction for printing."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         The object use for printing."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private void printOneHeaderForFind(int counter, String findType, Ui ui) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printMessage(\"Find by: \" + findType);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printTransactionHeader(TRANSTYPE);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the transactionList."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the size of the transactionList."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return transactionLists.size();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the transaction object from the transactionList by specifying the transaction index."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the transaction object."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Transaction get(int transactionIndex) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return transactionLists.get(transactionIndex);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure to the TransactionList."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expenditure an instance of an expenditure."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type the type of expenditure"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importExpenditureToList(Transaction expenditure, String type) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (transactionLists.size() \u003e\u003d MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            transactionLists.remove(0);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactionLists.add(expenditure);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a deposit to the TransactionList."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deposit an instance of an deposit."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void importDepositToList(Transaction deposit) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (transactionLists.size() \u003e\u003d MAX_LIST_SIZE) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            transactionLists.remove(0);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        transactionLists.add(deposit);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 238,
      "BrianTKM": 224,
      "shamussy": 78
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/exception/TransactionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.transaction.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class TransactionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new TransactionException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public TransactionException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.Writer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import com.opencsv.CSVReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import com.opencsv.CSVReaderBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Handles reading and writing data to and from disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Writes files dynamically based on parameters specified."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param inputData input data in ArrayList of String Arrays."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName name of file when exported"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException when unable to write data to file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void writeFile(ArrayList\u003cString[]\u003e inputData, String fileName) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try ("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Writer writer \u003d Files.newBufferedWriter(Paths.get(path + fileName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            for (String[] line : inputData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                csvWriter.writeNext(line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Writes file for profile user name only."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param inputData input data in String Arrays."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName name of file when exported"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException when unable to write data to file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void writeProfileFile(String[] inputData, String fileName) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try ("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Writer writer \u003d Files.newBufferedWriter(Paths.get(path + fileName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                CSVWriter csvWriter \u003d new CSVWriter(writer,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.DEFAULT_SEPARATOR,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.NO_QUOTE_CHARACTER,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.DEFAULT_ESCAPE_CHARACTER,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        CSVWriter.DEFAULT_LINE_END);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String[] headerRecord \u003d {\"Name\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            csvWriter.writeNext(headerRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            csvWriter.writeNext(inputData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Reads input file for profile user name."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param fileName the name of the input file to read from."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return List of String Array containing the user name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws IOException when unable to read the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public List\u003cString[]\u003e readFile(String fileName) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try ("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Reader reader \u003d Files.newBufferedReader(Paths.get(path + fileName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                CSVReader csvReader \u003d new CSVReaderBuilder(reader).withSkipLines(1).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            List\u003cString[]\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            list \u003d csvReader.readAll();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            csvReader.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 94
    }
  },
  {
    "path": "src/main/java/owlmoney/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Ui handles messages shown to the user of this application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * It does not need to be instantiated with any tasks; these are passed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * as arguments to its methods."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ITEMNO \u003d \"Item No.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String DESCRIPTION \u003d \"Description\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String AMOUNT \u003d \"Amount\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String DATE \u003d \"Date\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String CATEGORY \u003d \"Category\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String TRANSACTIONNO \u003d \"Transaction No.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String TRANSTYPE \u003d \"transaction\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ITEMTYPE \u003d \"item\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String CARDNAME \u003d \"Card Name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String MONLIMIT \u003d \"Monthly Limit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String REMLIMIT \u003d \"Remaining Limit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String REBATE \u003d \"Rebate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ACCNAME \u003d \"Account Name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String ACCTYPE \u003d \"Account Type\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String CURRAMOUNT \u003d \"Current Amount\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String INCOME \u003d \"Income\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String GOALNAME \u003d \"To Accomplish\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String GOALAMOUNT \u003d \"Amount to save\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String GOALDATE \u003d \"To be achieved by\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BONDNAME \u003d \"Bond Name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BONDRATE \u003d \"Rate\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BONDDATE \u003d \"Date of Purchased\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BONDYEAR \u003d \"Number of Years\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String GOALPROGRESS \u003d \"Save another\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String GOALBANKNAME \u003d \"Saving Account\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    private static final String GOALACHIEVED \u003d \"Goal Achieved\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prints a message line to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param msg The message to print."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the transaction header."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printTransactionHeader(String type) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (ITEMTYPE.equals(type)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.printf(\"%-20s %-55s %-15s %-20s %-20s %n\", ITEMNO, DESCRIPTION, AMOUNT, DATE, CATEGORY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (TRANSTYPE.equals(type)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.printf(\"%-20s %-55s %-15s %-20s %-20s %n\", TRANSACTIONNO, DESCRIPTION, AMOUNT, DATE, CATEGORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the transaction being specified."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num         Represents the numbering of the transaction."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param description Describes the listed transaction."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount      Represents the amount spent for the listed transaction."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param date        Represents the date entered for the listed transaction."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param category    Represents the category which the listed transaction falls under."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printTransaction(int num, String description, String amount, String date,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String category) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-55s %-15s %-20s %-20s %n\", num, description, amount, date, category);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the card header."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printCardHeader() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-30s %-15s %-20s %-15s %n\", ITEMNO, CARDNAME, MONLIMIT, REMLIMIT, REBATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the card details being specified."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num      Represents the numbering of the card."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name     Represents the name of the card."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param monLimit Represents the monthly limit of the card."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param remLimit Represents the remaining card limit left for the card."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate   Represents the card rebate in percentage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printCard(int num, String name, String monLimit, String remLimit, String rebate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-30s %-15s %-20s %-15s %n\", num, name, monLimit, remLimit, rebate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the bank header."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printBankHeader() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-35s %-15s %-15s %-15s %n\", ITEMNO, ACCNAME, ACCTYPE, CURRAMOUNT, INCOME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the investment account details being specified."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num    Represents the numbering of the investment account."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name   Represents the name of the investment account."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type   Represents the account type."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount Represents the current amount in the listed investment account."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printInvestment(int num, String name, String type, String amount) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-35s %-15s %-15s %-15s %n\", num, name, type, amount, \"Not Applicable\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the saving account details being specified."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num    Represents the numbering of the saving account."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name   Represents the name of the saving account."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type   Represents the account type."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount Represents the current amount in the listed saving account."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param income Represents the income in the listed saving account."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printSaving(int num, String name, String type, String amount, String income) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-35s %-15s %-15s %-15s %n\", num, name, type, amount, income);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the goal header."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printGoalHeader() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        System.out.printf(\"%-10s %-15s %-20s %-20s %-20s %-20s %-10s %n\", ITEMNO, GOALNAME, GOALAMOUNT, GOALBANKNAME,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                GOALPROGRESS, GOALDATE, GOALACHIEVED);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the goal details being specified."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num    Represents the numbering of the goal."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name   Represents the goal name"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount Represents the amount to save up in the goal."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param date   Represents the date to accomplish the goal."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "    public void printGoal(int num, String name, String amount, String bankName, String progress, String date,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "            String achieved) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        System.out.printf(\"%-10s %-15s %-20s %-20s %-20s %-20s %-20s %n\", num, name, amount, bankName, progress,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "                date, achieved);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the bond header."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printBondHeader() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "        System.out.printf(\"%-20s %-30s %-15s %-10s %-20s %-10s %n\", ITEMNO, BONDNAME, AMOUNT, BONDRATE, BONDDATE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                BONDYEAR);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the bond details being specified."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param num    Represents the numbering of the bond."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name   Represents the bond name."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param amount Represents the amount of the bond."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rate   Represents the rate for the bond."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param date   Represents the date of purchase for the bond."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param year   Represents the year for the bond."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printBond(int num, String name, String amount, String rate, String date, int year) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.printf(\"%-20s %-30s %-15s %-10s %-20s %-10s %n\", num, name, amount, rate, date, year);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Prints the divider to separate the section of the output."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void printDivider() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prints a greeting message to the user, which happens at startup."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void greet(String username) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Welcome \" + username + \"!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"Hello! I\u0027m OwlMoney\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"What can I do for you?\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prompts the user for a username on first instance of running this program."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void firstTimeRun() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Please enter a username:\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prints an error message with the given content."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exceptionMessage The specifics of the error."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void printError(String exceptionMessage) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"☹ OOPS!!! \" + exceptionMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 160,
      "BrianTKM": 6,
      "valerietyj": 11,
      "shamussy": 38
    }
  },
  {
    "path": "src/test/java/owlmoney/model/bank/InvestmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class InvestmentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentListBond_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.investmentListBond(10,uiTest),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"There are no bonds\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentListBond_bondPresent_success() throws BankException, BondException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedOutput \u003d \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.investmentListBond(30,uiTest);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedListOutput \u003d \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedListOutput,outContent.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentAddInExpenditure_noMoneyInInvestmentAccount_throwsBankException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 100);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Expenditure testExpenditure \u003d new Expenditure(\"test bond expenditure 1\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                150, new Date(\"1/3/2019\"),\"bonds\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.addInExpenditure(testExpenditure,uiTest,\"bonds\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected AddInExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"Bank account cannot have a negative amount\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentAddInExpenditure_gotMoneyInInvestmentAccount_success() throws BankException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 150);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Expenditure testExpenditure \u003d new Expenditure(\"test bond expenditure 1\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                150, new Date(\"1/3/2019\"),\"bonds\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addInExpenditure(testExpenditure,uiTest,\"bonds\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedAmountInInvestmentAccount \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualAmountInInvestmentAccount \u003d testInvestment.getCurrentAmount();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedAmountInInvestmentAccount,actualAmountInInvestmentAccount);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentAddInExpenditure_gotMoneyInInvestmentAccountButNotBondsCategory_throwsBankException()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 150);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Expenditure testExpenditure \u003d new Expenditure(\"test dining expenditure 1\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                150, new Date(\"1/3/2019\"),\"dining\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                testInvestment.addInExpenditure(testExpenditure,uiTest,\"dining\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected AddInExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"This account does not support savings expenditures\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addDepositTransaction_ButNotBondsCategory_throwsBankException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 150);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Deposit testDeposit \u003d new Deposit(\"test deposit 1\",150,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"),\"dining\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.addDepositTransaction(testDeposit,uiTest,\"dining\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected addDepositTransaction to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"This account does not support this feature\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addDepositTransaction_bondsDeposit_success() throws BankException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 150);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Deposit testDeposit \u003d new Deposit(\"test deposit 1\",150,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"),\"bonds\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addDepositTransaction(testDeposit,uiTest,\"bonds\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedAmountInInvestmentAccount \u003d 300;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualAmountInInvestmentAccount \u003d testInvestment.getCurrentAmount();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedAmountInInvestmentAccount,actualAmountInInvestmentAccount);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentCheckBondExist_bondExist_throwsBondException() throws BankException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 100);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBondTwo \u003d new Bond(\"TEST BOND 0\", 500, 2.0,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/1/2019\"), 3);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.investmentCheckBondExist(testBondTwo),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected CheckBondExist to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"Bond with the name: TEST BOND 0 already exists\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentDeleteBond_noBond_throwsBondException() throws BankException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 100);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.investmentDeleteBond(\"TEST BOND 1\",uiTest),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected investmentDeleteBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 1\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentDeleteBond_bondExist_success() throws BankException, BondException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 100);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessageWhenAdding \u003d \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessageWhenAdding,outContent.toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessageWhenDeleting \u003d \"Bond with the following details has been deleted: \" + NEWLINE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.investmentDeleteBond(\"TEST BOND 0\",uiTest);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessageWhenDeleting,outContent.toString());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentGetBond_bondExists_success() throws BankException, BondException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond actualBond \u003d testInvestment.investmentGetBond(\"TEST BOND 0\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualBondName \u003d actualBond.getName();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedBondName \u003d \"TEST BOND 0\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedBondName,actualBondName);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentGetBond_bondDoesNotExist_throwsBondException() throws BankException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.investmentGetBond(\"TEST BOND 1\"),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected investmentGetBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 1\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentEditBond_bondExist_success() throws BankException, BondException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.investmentEditBond(\"TEST BOND 0\",\"4\",\"2.0\",uiTest);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond actualBond \u003d testInvestment.investmentGetBond(\"TEST BOND 0\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualYear \u003d actualBond.getYear();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedYear \u003d 4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualRate \u003d actualBond.getYearlyCouponRate();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedRate \u003d 2.0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYear,actualYear);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedRate,actualRate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void investmentEditBond_bondExistLowerYearThanOriginal_throwsBondException()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, BondException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.investmentEditBond(\"TEST BOND 0\",\"2\",\"2.0\",uiTest),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected investmentEditBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"The year can only be larger than: 3\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage,actualMessage);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void updateRecurringTransaction_bondExistNoMature_successMoneyCredited() throws BankException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarTestDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendarTestDate.add(Calendar.YEAR,-1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date testDate \u003d calendarTestDate.getTime();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.0,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                testDate, 3);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.updateRecurringTransactions(uiTest);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualAmount \u003d testInvestment.getCurrentAmount();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedAmount \u003d 10010;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(actualAmount,expectedAmount);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void updateRecurringTransaction_bondExistMature_throwsBondException() throws BankException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarTestDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendarTestDate.add(Calendar.YEAR,-3);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date testDate \u003d calendarTestDate.getTime();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank testInvestment \u003d new Investment(\"DBB VICKERS\", 10000);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.0,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                testDate, 3);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.addBondToInvestmentAccount(testBond,uiTest);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testInvestment.updateRecurringTransactions(uiTest);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualAmount \u003d testInvestment.getCurrentAmount();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedAmount \u003d 11030;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(actualAmount,expectedAmount);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        testInvestment.investmentGetBond(\"TEST BOND 0\"),"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected investmentGetBond to throw after bond matures and deleted, but it didn\u0027t\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 0\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(actualMessage,expectedMessage);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 305
    }
  },
  {
    "path": "src/test/java/owlmoney/model/bank/SavingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "class SavingTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addInExpenditure_notAddingToSavingAccount_throwsException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                testSaving.addInExpenditure(testExpenditure, uiTest, \"bond\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Bonds cannot be added to this account\", thrown.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addInExpenditure_expenditureAmountExceedBankAmount_throwsException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 2000, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Bank account cannot have a negative amount\", thrown.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addInExpenditure_succeedAdding_bankAmountDecrease() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 200, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no error, but error was thrown\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(1000.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteExpenditure_succeedDeleting_bankAmountIncrease() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 200, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no error, but error was thrown\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(1000.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.deleteExpenditure(1, uiTest);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException | BankException errorMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no error, but error was thrown\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(1200.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editExpenditureDetails_newAmountExceedBankAmount_throwsException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 200, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no error, but error was thrown\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.editExpenditureDetails(1, \"\", \"4000\", \"\", \"\", uiTest));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Bank account cannot have a negative amount\", thrown.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editExpenditureDetails_succeedChangeNewAmount_bankAmountChanged() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 200, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no error, but error was thrown\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(1000.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.editExpenditureDetails(1, \"\", \"1200\", \"\", \"\", uiTest);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException | BankException errorMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no error, but error was thrown\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(0.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addDepositTransaction_notBankAccountType_throwsException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testDeposit \u003d new Deposit(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                testSaving.addDepositTransaction(testDeposit, uiTest, \"bond\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"This account does not support investment account deposits\", thrown.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addDepositTransaction_succeedAdding_bankAmountIncrease() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testDeposit \u003d new Deposit(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addDepositTransaction(testDeposit, uiTest, \"bank\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expects success but error was thrown\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(1220.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteDepositTransaction_newBankAmountNegative_throwsException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testDeposit \u003d new Deposit(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 1201, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addDepositTransaction(testDeposit, uiTest, \"bank\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(1220.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(19.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expects success but error was thrown\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                testSaving.deleteDepositTransaction(1, uiTest));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Bank account cannot have a negative amount\", thrown.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteDepositTransaction_succeedDeleting_bankAmountDecrease() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testDeposit \u003d new Deposit(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addDepositTransaction(testDeposit, uiTest, \"bank\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(1220.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.deleteDepositTransaction(1, uiTest);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException | TransactionException errorMessage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expects success but error was thrown\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(1200.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editDepositDetails_newBankAmountNegative_throwsException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testDeposit \u003d new Deposit(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 1215, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addDepositTransaction(testDeposit, uiTest, \"bank\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(1220.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(5.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException errorMessage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expects success but error was thrown\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                testSaving.editDepositDetails(1, \"\", \"10\", \"\", uiTest));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Bank account cannot have a negative amount\", thrown.toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editDepositTransaction_succeedChanging_bankAmountChanged() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank testSaving \u003d new Saving(\"testBank\", 1200, 1000);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testDeposit \u003d new Deposit(\"test\", 20, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction testExpenditure \u003d new Expenditure(\"test\", 1201, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addDepositTransaction(testDeposit, uiTest, \"bank\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(1220.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.addInExpenditure(testExpenditure, uiTest, \"bank\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(19.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            testSaving.editDepositDetails(1, \"\", \"10\", \"\", uiTest);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (BankException | TransactionException errorMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expects success but error was thrown\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(9.00, testSaving.getCurrentAmount());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void updateRecurringTransactions_expenditureUpdated_bankAmountChanged() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui testUi \u003d new Ui();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Saving savingTest \u003d new Saving(\"test\", 100, 100);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.clear();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.setTime(new Date());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        calendar.add(Calendar.MONTH, -1);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            savingTest.savingAddRecurringExpenditure("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    new Expenditure(\"testExpenditure\", 10, calendar.getTime(), \"testExpenditure\"), testUi);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expects success but error was thrown\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        savingTest.updateRecurringTransactions(testUi);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(80, savingTest.getCurrentAmount());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 216
    }
  },
  {
    "path": "src/test/java/owlmoney/model/bond/BondListStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BondListStub extends BondList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ArrayList\u003cBond\u003e bondLists;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int ISZERO \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an arrayList of bonds."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    BondListStub() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists \u003d new ArrayList\u003cBond\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bondList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum bond number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if there are no bonds."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBond(int displayNum, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (bondLists.size() \u003c\u003d ISZERO) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BondException(\"There are no bonds\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            for (int i \u003d bondLists.size() - ONE_INDEX; i \u003e\u003d ISZERO; i--) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                System.out.println(\"bond: \" + i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Add bond to list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond bond object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addBondToList(Bond bond, Ui ui) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists.add(bond);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the bondList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the size of the bondList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bondLists.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object that the user is expecting to add."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If duplicate bond name is found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bondExist(Bond bond) throws BondException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bond.getName().equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new BondException(\"Bond with the name: \" + bond.getName() + \" already exists\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the bond from the bondList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void removeBondFromList(String bondName, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (getSize() \u003d\u003d ISZERO) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BondException(\"There are no bonds\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bondName.equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondLists.remove(i);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the bond object from the bondList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the bond object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the bond does not exist."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond getBond(String bondName) throws BondException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bondName.equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return bondLists.get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BondException(\"There are no bonds with the name: \" + bondName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond details specifically."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName the name of the bond to retrieve."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year     the new year of the bond."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate     the new rate of the bond."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException If the bond does not exist or the year is smaller than the original."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void editBond(String bondName, String year, String rate, Ui ui) throws BondException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d ISZERO; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bondName.equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                editBondYear(year, i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                editBondRate(rate, i);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BondException(\"There are no bonds with the name: \" + bondName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the bond rate specifically to a new rate."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate the new interest rate of the bond."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param i    position of the bond in the bondList."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void editBondRate(String rate, int i) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!(rate.isEmpty() || rate.isBlank())) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bondLists.get(i).setRate(Double.parseDouble(rate));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the year of the bond."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year the new year of the bond."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param i    position of the bond in the bondList."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws BondException if the year is smaller than the original year."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void editBondYear(String year, int i) throws BondException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!(year.isEmpty() || year.isBlank())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int originalYear \u003d bondLists.get(i).getYear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (Integer.parseInt(year) \u003c originalYear) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new BondException(\"The year can only be larger than: \" + originalYear);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            bondLists.get(i).setYear(Integer.parseInt(year));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 156
    }
  },
  {
    "path": "src/test/java/owlmoney/model/bond/BondListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class BondListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubListBond_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondListTest.listBond(30, uiTest),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected listBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubAddBondToList_newBond_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBondTwo \u003d new Bond(\"TEST BOND 1\", 1000, 1.8,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBondTwo, uiTest);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(2, bondListTest.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubBondExist_newBondConflictExistingBond_throwsBondException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBondTwo \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondListTest.bondExist(testBondTwo), \"Expected bondExist to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"Bond with the name: TEST BOND 0 already exists\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubRemoveBondFromList_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.removeBondFromList(\"TEST BOND 0\", uiTest),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected removeBondFromList to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubRemoveBondFromList_BondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.removeBondFromList(\"TEST BOND 0\", uiTest);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubGetBond_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondListTest.getBond(\"TEST BOND 0\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected getBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 0\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubGetBond_bondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"TEST BOND 0\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d bondListTest.getBond(\"TEST BOND 0\").getName();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubEditBond_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.getBond(\"TEST BOND 0\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected editBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 0\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondListStubEditBond_bondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondListStub bondListTest \u003d new BondListStub();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.editBond(\"TEST BOND 0\", \"5\",\"2.00\",uiTest);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualRate \u003d bondListTest.getBond(\"TEST BOND 0\").getYearlyCouponRate();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedRate \u003d 2.0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedRate,actualRate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualYear \u003d bondListTest.getBond(\"TEST BOND 0\").getYear();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedYear \u003d bondListTest.getBond(\"TEST BOND 0\").getYear();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYear,actualYear);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listBond_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondListTest.listBond(30, uiTest),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected listBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listBond_BondListFilled_success() throws BondException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedOutput \u003d \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.listBond(30,uiTest);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedListOutput \u003d \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedListOutput,outContent.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addBondToList_newBond_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBondTwo \u003d new Bond(\"TEST BOND 1\", 1000, 1.8,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBondTwo, uiTest);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(2, bondListTest.getSize());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedOutput \u003d \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 1                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondExist_newBondConflictExistingBond_throwsBondException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedOutput \u003d \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBondTwo \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondListTest.bondExist(testBondTwo), \"Expected bondExist to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"Bond with the name: TEST BOND 0 already exists\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondExist_bondDoesNotExist_success() throws BondException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedOutput \u003d \"Bond with the following details has been added: \" + NEWLINE"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Item No.             Bond Name                      Amount          Rate       \""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date of Purchased    \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of Years \" + NEWLINE"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"1                    TEST BOND 0                    $1000.00        1.80       \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"03 January 2019      \""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"3          \" + NEWLINE"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"--------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBondTwo \u003d new Bond(\"TEST BOND 1\", 1000, 1.8,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.bondExist(testBondTwo);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void removeBondFromList_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.removeBondFromList(\"TEST BOND 0\", uiTest),"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected removeBondFromList to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void removeBondFromList_noBondAndBondListFilled_throwsBondException() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 1\", 1000, 1.8,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.removeBondFromList(\"TEST BOND 0\", uiTest),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected removeBondFromList to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 0\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void removeBondFromList_BondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond, uiTest);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(1, bondListTest.getSize());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.removeBondFromList(\"TEST BOND 0\", uiTest);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void getBond_noBond_throwsBondException() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.getBond(\"TEST BOND 0\"),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected getBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 0\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void getBond_bondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"TEST BOND 0\";"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d bondListTest.getBond(\"TEST BOND 0\").getName();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void get_bondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond actualBond \u003d bondListTest.get(0);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(actualBond, testBond);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editBond_noBondAndBondListEmpty_throwsBondException() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.getBond(\"TEST BOND 0\"),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected editBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 0\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editBond_noBondAndBondListFilled_throwsBondException() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.editBond(\"TEST BOND 1\",\"9\",\"3.14\",uiTest),"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected editBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"There are no bonds with the name: TEST BOND 1\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editBond_bondPresent_success() throws BondException {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.editBond(\"TEST BOND 0\", \"5\",\"2.00\",uiTest);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualRate \u003d bondListTest.getBond(\"TEST BOND 0\").getYearlyCouponRate();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedRate \u003d 2.0;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedRate,actualRate);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualYear \u003d bondListTest.getBond(\"TEST BOND 0\").getYear();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedYear \u003d bondListTest.getBond(\"TEST BOND 0\").getYear();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYear,actualYear);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editBond_smallerYearThanOriginal_throwsBondException() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondList bondListTest \u003d new BondList();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(0, bondListTest.getSize());"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND 0\", 1000, 1.8,"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new Date(\"1/3/2019\"), 3);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondListTest.addBondToList(testBond,uiTest);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondException thrown \u003d assertThrows(BondException.class, () -\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        bondListTest.editBond(\"TEST BOND 0\",\"1\",\"3.14\",uiTest),"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                \"Expected editBond to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedMessage \u003d \"The year can only be larger than: 3\";"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualMessage \u003d thrown.getMessage();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 438
    }
  },
  {
    "path": "src/test/java/owlmoney/model/bond/BondStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BondStub extends Bond {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double rate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    BondStub() throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(\"TEST BOND\",500,2.0,new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"1/1/2019\"),1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the number of years the bond will last."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the number of years the bond will last."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date the bond was purchased."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the date the bond was purchased."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"01 January 2019\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the annual coupon rate of the bond."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return rate of the coupon annual rate."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getYearlyCouponRate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return 2.0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the half annual coupon rate that is used for biannual coupon rate issuance calculation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the half annual coupon rate."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getHalfYearlyCouponRate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return 2.0 / 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money the bond was bought for."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the amount of money the bond costs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return 500;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the name of the bond purchased."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the name of the bond."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"TEST BOND\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of the bond purchased."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the category of this bond purchased."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"bonds\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the bond to a new interest rate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newRate new amount of the bond"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setRate(double newRate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d 5.0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getNewRate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.rate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the year of the bond to a new year."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newYear new name of the bond"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setYear(int newYear) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d 5;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getNewYear() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the bond."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the description of the bond."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getBondDescription() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"Name: \" + getName()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" Amount: $\" + new DecimalFormat(\"0.00\").format(getAmount())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" Rate: \" + new DecimalFormat(\"0.00\").format(getYearlyCouponRate())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" Date Purchased: \" + getDate()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" Number of years: \" + getYear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 128
    }
  },
  {
    "path": "src/test/java/owlmoney/model/bond/BondTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class BondTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondStub_normalBondStub_success() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondStub testBond \u003d new BondStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualYear \u003d testBond.getYear();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedYear \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYear,actualYear);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualDate \u003d testBond.getDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedDate \u003d \"01 January 2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedDate,actualDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualYearlyCouponRate \u003d testBond.getYearlyCouponRate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedYearlyCouponRate \u003d 2.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYearlyCouponRate,actualYearlyCouponRate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualHalfYearlyCouponRate \u003d testBond.getHalfYearlyCouponRate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedHalfYearlyCouponRate \u003d 1.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedHalfYearlyCouponRate,actualHalfYearlyCouponRate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualAmount \u003d testBond.getAmount();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedAmount \u003d 500.00;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedAmount,actualAmount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualName \u003d testBond.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedName \u003d \"TEST BOND\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedName,actualName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualCategory \u003d testBond.getCategory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedCategory \u003d \"bonds\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedCategory,actualCategory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualResultOfBondDescription \u003d testBond.getBondDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedResultOfBondDescription \u003d \"Name: TEST BOND Amount: $500.00 Rate: 2.00 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date Purchased: 01 January 2019 Number of years: 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedResultOfBondDescription,actualResultOfBondDescription);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondStubSetRate_bondStubNewRate_success() throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondStub testBond \u003d new BondStub();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testBond.setRate(5.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualNewRate \u003d testBond.getNewRate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedNewRate \u003d 5.0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedNewRate, actualNewRate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondStubSetYear_bondStubNewYear_success() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        BondStub testBond \u003d new BondStub();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testBond.setYear(5);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualNewYear \u003d testBond.getNewYear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedNewYear \u003d 5;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedNewYear, actualNewYear);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bond_normalBond_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,new Date(\"1/3/2019\"),3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualYear \u003d testBond.getYear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedYear \u003d 3;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYear,actualYear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualDate \u003d testBond.getDate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedDate \u003d \"03 January 2019\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedDate,actualDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualYearlyCouponRate \u003d testBond.getYearlyCouponRate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedYearlyCouponRate \u003d 1.8;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedYearlyCouponRate,actualYearlyCouponRate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualHalfYearlyCouponRate \u003d testBond.getHalfYearlyCouponRate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedHalfYearlyCouponRate \u003d 0.9;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedHalfYearlyCouponRate,actualHalfYearlyCouponRate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualAmount \u003d testBond.getAmount();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedAmount \u003d 1000.00;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedAmount,actualAmount);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualName \u003d testBond.getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedName \u003d \"TEST BOND\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedName,actualName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualCategory \u003d testBond.getCategory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedCategory \u003d \"bonds\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedCategory,actualCategory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String actualResultOfBondDescription \u003d testBond.getBondDescription();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String expectedResultOfBondDescription \u003d \"Name: TEST BOND\" + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Amount: $1000.00\" + \"\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Rate: 1.80\" + \"\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Date Purchased: 03 January 2019\" + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \"Number of years: 3\" + \"\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedResultOfBondDescription,actualResultOfBondDescription);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondSetRate_newRate_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,new Date(\"1/3/2019\"),3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testBond.setRate(2.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double actualNewRate \u003d testBond.getYearlyCouponRate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double expectedNewRate \u003d 2.0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedNewRate, actualNewRate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void bondSetYear_newYear_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,new Date(\"1/3/2019\"),3);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testBond.setYear(8);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int actualNewYear \u003d testBond.getYear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int expectedNewYear \u003d 8;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedNewYear, actualNewYear);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void getNextDateToCreditInterest_oldDate_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarTestDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendarTestDate.add(Calendar.MONTH,-6);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date testDate \u003d calendarTestDate.getTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,testDate,3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date actualDate \u003d testBond.getNextDateToCreditInterest();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarExpectedDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date expectedDate \u003d calendarExpectedDate.getTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedDate.toString(), actualDate.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void setNextDateToCreditInterest_oldDateToNewDate_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarTestDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendarTestDate.add(Calendar.MONTH,-6);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date testDate \u003d calendarTestDate.getTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,testDate,3);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarExpectedDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date expectedDate \u003d calendarExpectedDate.getTime();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testBond.setNextDateToCreditInterest(expectedDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedDate.toString(), testBond.getNextDateToCreditInterest().toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void getBondEndDate_oldDateToEndDate_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarTestDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendarTestDate.add(Calendar.YEAR,-3);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date testDate \u003d calendarTestDate.getTime();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,testDate,3);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarExpectedDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date expectedDate \u003d calendarExpectedDate.getTime();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        testBond.setNextDateToCreditInterest(expectedDate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(expectedDate.toString(), testBond.getBondEndDate().toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void getDateInDateFormat_oldDateToEndDate_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Calendar calendarTestDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        calendarTestDate.add(Calendar.YEAR,-3);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Date testDate \u003d calendarTestDate.getTime();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond testBond \u003d new Bond(\"TEST BOND\",1000,1.8,testDate,3);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        assertEquals(testDate.toString(), testBond.getDateInDateFormat().toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 171
    }
  },
  {
    "path": "src/test/java/owlmoney/model/card/CardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "class CardTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListAddCard_addOneCard_printCardDetails() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"Added a new card with the below details: \" + NEWLINE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Item No.             Card Name                      Monthly Limit   Remaining Limit \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"     Rebate          \" + NEWLINE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    Test Card                      $1000.00        \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1000.00             1.50%           \" + NEWLINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"--------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListAddCard_addCardWithDuplicateName_throwsException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card firstCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card cardWithDuplicateName \u003d new Card(\"Test Card\", 2000, 0.5);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(firstCard, uiTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        cardListTemp.cardListAddCard(cardWithDuplicateName, uiTest),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListListCards to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"There is already a credit card with the name \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + cardWithDuplicateName.getName(), thrown.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_editCardThatExist_printCardDetails() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListEditCard(\"Test Card\", \"New Card Name\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"1200\", \"1.0\", uiTest);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"New details of the cards: \" + NEWLINE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Item No.             Card Name                      Monthly Limit   Remaining Limit \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"     Rebate          \" + NEWLINE"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    New Card Name                  $1200.00        \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1200.00             1.00%           \" + NEWLINE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"--------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_editCardThatDoNotExist_throwsException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardListTemp.cardListEditCard(\"No Such Name\", \"New Card Name\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        \"1200\", \"1.0\", uiTest),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListEditCard to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Card could not be found for editing card details.\", thrown.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_newCardNameClashWithOtherCardName_throwsException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card cardToEdit \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String newCardName \u003d \"New Card Name\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card cardToClash \u003d new Card(newCardName, 1050, 2.5);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(cardToEdit, uiTest);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(cardToClash, uiTest);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(2, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        cardListTemp.cardListEditCard(\"Test Card\", newCardName,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                                \"1200\", \"1.0\", uiTest),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListEditCard to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"There is already a credit card with the name: \" + newCardName,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                thrown.getMessage());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_editCardLimitWithUnpaidExpenditure_throwsException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            newDate \u003d temp.parse(\"10/2/2019\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Transaction expenditureTest \u003d new Expenditure(\"test\", 10,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                newDate, \"Miscellaneous\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            newCard.addInExpenditure(expenditureTest, uiTest, \"card\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        cardListTemp.cardListEditCard(\"Test Card\", \"New Card Name\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                                \"1200\", \"1.0\", uiTest),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListEditCard to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Card limit cannot be edited if there are unpaid expenditures\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                thrown.getMessage());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_editCardLimitOnlyWithoutUnpaidExpenditure_printDetails() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListEditCard(\"Test Card\", \"\", \"1200\", \"\", uiTest);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"New details of the cards: \" + NEWLINE"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Item No.             Card Name                      Monthly Limit   \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Remaining Limit      Rebate          \"  + NEWLINE"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    Test Card                      $1200.00        \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1200.00             1.50%           \" + NEWLINE"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_editCardNameOnlyWithoutClash_printDetails() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListEditCard(\"Test Card\", \"New Name\", \"\", \"\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    uiTest);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"New details of the cards: \" + NEWLINE"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Item No.             Card Name                      Monthly Limit   \""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Remaining Limit      Rebate          \"  + NEWLINE"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    New Name                       $1000.00        \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1000.00             1.50%           \" + NEWLINE"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListEditCard_editCardRebateOnly_printDetails() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListEditCard(\"Test Card\", \"\", \"\", \"0.1\", uiTest);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"New details of the cards: \" + NEWLINE"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Item No.             Card Name                      Monthly Limit   \""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Remaining Limit      Rebate          \"  + NEWLINE"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    Test Card                      $1000.00        \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1000.00             0.10%           \" + NEWLINE"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListDeleteCard_deleteCardThatExist_printDeleteCardDetails() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card cardToBeDeleted \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(cardToBeDeleted, uiTest);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListDeleteCard(\"Test Card\", uiTest);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"Card with the following details has been removed:\" + NEWLINE"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Item No.             Card Name                      Monthly Limit   \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Remaining Limit      Rebate          \"  + NEWLINE"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    Test Card                      $1000.00        \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1000.00             1.50%           \" + NEWLINE"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(0, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListDeleteCard_deleteCardWithEmptyCardList_throwsException() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(0, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        cardListTemp.cardListDeleteCard(\"Test Card\", uiTest),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListListCards to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"There are 0 cards in your profile.\", thrown.getMessage());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListDeleteCard_deleteCardWithNonExistentName_throwsException() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        cardListTemp.cardListDeleteCard(\"No Such Name\", uiTest),"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListListCards to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"No such card exist for deletion.\", thrown.getMessage());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListListCards_cardListNotEmpty_listCardDetails() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Card newCard \u003d new Card(\"Test Card\", 1000, 1.5);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListAddCard(newCard, uiTest);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardListTemp.cardListListCards(uiTest);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (CardException error) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(1, cardListTemp.getCardListSize());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedOutput \u003d \"Item No.             Card Name                      \""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"Monthly Limit   Remaining Limit \" + \"     Rebate          \" + NEWLINE"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-----------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"1                    Test Card                      $1000.00        \""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"$1000.00             1.50%           \" + NEWLINE"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"--------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"-------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void cardListListCards_cardListEmpty_throwsException() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardList cardListTemp \u003d new CardList(storage);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        CardException thrown \u003d assertThrows(CardException.class, () -\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        cardListTemp.cardListListCards(uiTest),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected cardListListCards to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"There are 0 cards in your profile.\", thrown.getMessage());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 386
    }
  },
  {
    "path": "src/test/java/owlmoney/model/find/FindTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.BankList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.Investment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "class FindTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findBankAccount_AccountNameMatch_printDetails() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccountOne \u003d new Saving(\"Test Saving Account 1\", 1000, 2000);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccountTwo \u003d new Saving(\"Test Saving Account 2\", 1000, 2000);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccountOne, uiTest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccountTwo, uiTest);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.findBankAccount(\"Test\", \"saving\", uiTest);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"Item No.             Account Name                        \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"Account Type    Current Amount  Income          \" + NEWLINE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"--------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"-------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"1                    Test Saving Account 1               saving          \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"$1000.00        $2000.00        \" + NEWLINE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"2                    Test Saving Account 2               saving          $1000.00\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"        $2000.00        \" + NEWLINE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"---------------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findBankAccount_savingsAccountNameDoNotMatch_printDetails() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccountOne \u003d new Saving(\"Test Saving Account 1\", 1000, 2000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccountTwo \u003d new Saving(\"Test Saving Account 2\", 1000, 2000);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccountOne, uiTest);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccountTwo, uiTest);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                bankList.findBankAccount(\"testing\", \"saving\", uiTest),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected findBankAccount to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Savings account with the following keyword could not be found: testing\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                thrown.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findBankAccount_investmentAccountNameDoNotMatch_printDetails() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccountOne \u003d new Investment(\"Test Investment Account 1\", 1000);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccountTwo \u003d new Investment(\"Test Investment Account 2\", 2000);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccountOne, uiTest);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccountTwo, uiTest);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        bankList.findBankAccount(\"testing\", \"investment\", uiTest),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected findBankAccount to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Investment account with the following keyword could not be found: testing\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                thrown.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findMatchingTransaction_MatchingDateRange_printDetails() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransactionList transactionListTemp \u003d new TransactionList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestOne \u003d new Expenditure(\"Chicken Rice\", 15,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/6/2019\")), \"Food\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestTwo \u003d new Expenditure(\"Bubble Tea\", 10,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/7/2019\")), \"Food\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction depositTest \u003d new Deposit(\"Fund Received\", 100,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"11/9/2019\")), \"Deposit\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestOne, uiTest, \"saving\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestTwo, uiTest, \"saving\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(depositTest, uiTest, \"saving\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.findMatchingTransaction(\"10/7/2019\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"19/9/2019\", \"\", \"\", uiTest);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"Find by: date range\" + NEWLINE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"Transaction No.      Description                                             \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"Amount          Date                 Category             \" + NEWLINE"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"----------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"2                    Bubble Tea                                              \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"[-] $10.00      10 July 2019         Food                 \" + NEWLINE"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"3                    Fund Received                                           \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"[+] $100.00     11 September 2019    Deposit              \" + NEWLINE"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                   + \"-----------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (TransactionException error) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findMatchingTransaction_DateRangeMissMatch_printDetails() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransactionList transactionListTemp \u003d new TransactionList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestOne \u003d new Expenditure(\"Chicken Rice\", 15,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/6/2019\")), \"Food\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestTwo \u003d new Expenditure(\"Bubble Tea\", 10,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/7/2019\")), \"Food\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction depositTest \u003d new Deposit(\"Fund Received\", 100,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"11/9/2019\")), \"Deposit\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestOne, uiTest, \"saving\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestTwo, uiTest, \"saving\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(depositTest, uiTest, \"saving\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.findMatchingTransaction(\"1/2/2019\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"3/4/2019\", \"\", \"\", uiTest);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"No matches for the date range specified: 1/2/2019 to 3/4/2019\" + NEWLINE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (TransactionException error) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findMatchingTransaction_MatchingCategory_printDetails() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransactionList transactionListTemp \u003d new TransactionList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestOne \u003d new Expenditure(\"Chicken Rice\", 15,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/6/2019\")), \"Food\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestTwo \u003d new Expenditure(\"Bubble Tea\", 10,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/7/2019\")), \"Food\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction depositTest \u003d new Deposit(\"Fund Received\", 100,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"11/9/2019\")), \"Deposit\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestOne, uiTest, \"saving\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestTwo, uiTest, \"saving\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(depositTest, uiTest, \"saving\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.findMatchingTransaction(\"\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"\", \"\", \"deposit\", uiTest);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"Find by: category\" + NEWLINE"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"Transaction No.      Description                                             \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"Amount          Date                 Category             \" + NEWLINE"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"3                    Fund Received                                           \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"[+] $100.00     11 September 2019    Deposit              \" + NEWLINE"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"--------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"-------------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (TransactionException error) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findMatchingTransaction_CategoryMissMatch_printDetails() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransactionList transactionListTemp \u003d new TransactionList();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestOne \u003d new Expenditure(\"Chicken Rice\", 15,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/6/2019\")), \"Food\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestTwo \u003d new Expenditure(\"Bubble Tea\", 10,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/7/2019\")), \"Food\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction depositTest \u003d new Deposit(\"Fund Received\", 100,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"11/9/2019\")), \"Deposit\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestOne, uiTest, \"saving\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestTwo, uiTest, \"saving\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(depositTest, uiTest, \"saving\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.findMatchingTransaction(\"\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"\", \"\", \"transport\", uiTest);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"No matches for the category keyword: transport\" + NEWLINE;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (TransactionException error) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findMatchingTransaction_MatchingDescription_printDetails() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransactionList transactionListTemp \u003d new TransactionList();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestOne \u003d new Expenditure(\"Chicken Rice\", 15,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/6/2019\")), \"Food\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestTwo \u003d new Expenditure(\"Bubble Tea\", 10,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/7/2019\")), \"Food\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction depositTest \u003d new Deposit(\"Fund Received\", 100,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"11/9/2019\")), \"Deposit\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestOne, uiTest, \"saving\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestTwo, uiTest, \"saving\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(depositTest, uiTest, \"saving\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.findMatchingTransaction(\"\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"\", \"rice\", \"\", uiTest);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"Find by: description\" + NEWLINE"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"Transaction No.      Description                                             \""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"Amount          Date                 Category             \" + NEWLINE"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"--------------------------------------------------\" + NEWLINE"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"1                    Chicken Rice                                            \""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"[-] $15.00      10 June 2019         Food                 \" + NEWLINE"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"--------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"-------------------------------------------------------\" + NEWLINE;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (TransactionException error) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void findMatchingTransaction_DescriptionMissMatch_printDetails() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        TransactionList transactionListTemp \u003d new TransactionList();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestOne \u003d new Expenditure(\"Chicken Rice\", 15,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/6/2019\")), \"Food\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction expenditureTestTwo \u003d new Expenditure(\"Bubble Tea\", 10,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"10/7/2019\")), \"Food\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Transaction depositTest \u003d new Deposit(\"Fund Received\", 100,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    (temp.parse(\"11/9/2019\")), \"Deposit\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestOne, uiTest, \"saving\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(expenditureTestTwo, uiTest, \"saving\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.addExpenditureToList(depositTest, uiTest, \"saving\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            transactionListTemp.findMatchingTransaction(\"\","
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    \"\", \"soup\", \"\", uiTest);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String expectedOutput \u003d \"No matches for the description keyword: soup\" + NEWLINE;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (TransactionException error) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 347
    }
  },
  {
    "path": "src/test/java/owlmoney/model/goals/GoalsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "package owlmoney.model.goals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valerietyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "public class GoalsTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valerietyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valerietyj": 4
    }
  },
  {
    "path": "src/test/java/owlmoney/model/transaction/TransactionListStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class TransactionListStub extends TransactionList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cTransaction\u003e expLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found or no expenditure is in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (this.expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            boolean expenditureExist \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d this.expLists.size() - ONE_INDEX; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (this.expLists.get(i).getSpent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    System.out.print(\"Expenditure exists\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    expenditureExist \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (counter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!expenditureExist) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(\"No expenditures found\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds an expenditure to the TransactionList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exp an instance of an expenditure."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addExpenditureToList(Transaction exp, Ui ui, String type) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expLists.add(exp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a deposit to the TransactionList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep an instance of an deposit."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addDepositToList(Transaction dep, Ui ui, String type) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expLists.add(dep);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listDeposit(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            boolean depositExist \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d expLists.size() - ONE_INDEX; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!this.expLists.get(i).getSpent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    System.out.print(\"Deposit exists\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    depositExist \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (counter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!depositExist) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(\"No deposits found\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes an expenditure to the TransactionList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index index of the expenditure in the TransactionList."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double deleteExpenditureFromList(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d 0 \u0026\u0026 (index - ONE_INDEX) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!expLists.get(index - 1).getSpent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Transaction temp \u003d expLists.get(index - ONE_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expLists.remove(index - ONE_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                System.out.print(\"Expenditure removed\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return temp.getAmount();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific expenditure in the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number of the expenditure."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description of the expenditure."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount of the expenditure."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date of the expenditure."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of the expenditure."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the expenditure."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double editExpenditure(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setDescription(desc);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.print(\"New description: \" + expLists.get(expNum - ONE_INDEX).getDescription());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.print(\"New amount: \" + expLists.get(expNum - ONE_INDEX).getAmount());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expLists.get(expNum - ONE_INDEX).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                System.out.print(\"New date: \" + expLists.get(expNum - ONE_INDEX).getDate());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(e.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return expLists.get(expNum - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific deposit in the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the deposit."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description of the deposit."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the deposit."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date of the deposit."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     required for printing."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the deposit."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double editDeposit(int expNum, String desc, String amount, String date, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setDescription(desc);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.print(\"New description: \" + expLists.get(expNum - ONE_INDEX).getDescription());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.print(\"New amount: \" + expLists.get(expNum - ONE_INDEX).getAmount());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expLists.get(expNum - ONE_INDEX).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                System.out.print(\"New date: \" + expLists.get(expNum - ONE_INDEX).getDate());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(e.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return expLists.get(expNum - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the specific expenditure amount."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the expenditure."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the expenditure."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not an expenditure."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getExpenditureAmount(int index) throws TransactionException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d 0 \u0026\u0026 (index - ONE_INDEX) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!expLists.get(index - ONE_INDEX).getSpent()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return expLists.get(index - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes the specific deposit from the current bank account."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deleted deposit."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double deleteDepositFromList(int index, Ui ui) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction temp \u003d expLists.get(index - ONE_INDEX);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expLists.remove(index - ONE_INDEX);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.out.println(\"Deleted deposit\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.getAmount();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the amount of the deposit specified."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deposit"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getDepositValue(int index) throws TransactionException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d 0 \u0026\u0026 (index - ONE_INDEX) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (expLists.get(index - ONE_INDEX).getSpent()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new TransactionException(\"The transaction is not a deposit\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return expLists.get(index - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 254
    }
  },
  {
    "path": "src/test/java/owlmoney/model/transaction/TransactionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "class TransactionListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listExpenditure_noTransactions_throwsException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                transListTest.listExpenditure(uiTest, 30),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"There are no transactions in this bank account\", thrown.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listExpenditure_noExpenditure_throwsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.listExpenditure(uiTest, 30),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"No expenditures found\", thrown.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listExpenditure_expenditureExists_printExpenditureDetails() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.listExpenditure(uiTest, 30);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Expenditure exists\", outContent.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listExpenditureDisplayNum_multipleExpenditureExists_printOneExpenditureDetails() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.listExpenditure(uiTest, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Expenditure exists\", outContent.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listDeposit_noTransactions_throwsException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.listDeposit(uiTest, 30),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listDeposit to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"There are no transactions in this bank account\", thrown.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listDeposit_noDeposit_throwsException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.listDeposit(uiTest, 30),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listDeposit to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"No deposits found\", thrown.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listDeposit_depositExists_printDepositDetails() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.listDeposit(uiTest, 30);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Deposit exists\", outContent.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listDepositDisplayNum_multipleDepositExists_printOneDepositDetails() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.listDeposit(uiTest, 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Deposit exists\", outContent.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteExpenditure_noTransactions_throwsException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.deleteExpenditureFromList(1, uiTest),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected deleteExpenditureFromList to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"There are no transactions in this bank account\", thrown.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteExpenditure_notExpenditure_throwsException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.deleteExpenditureFromList(1, uiTest),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"The transaction is a deposit\", thrown.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteExpenditure_indexOutOfRange_throwsException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.deleteExpenditureFromList(3, uiTest),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Index is out of transaction list range\", thrown.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteExpenditure_isExpenditure_deleteExpenditure() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.deleteExpenditureFromList(1, uiTest);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Expenditure removed\", outContent.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editEx_changedAmount_amountChanged() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.editExpenditure(1, \"\", \"5\", \"\", \"\", uiTest);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(\"New amount: 5.0\", outContent.toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editDep_changedDescription_descriptionChanged() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transListTest.editDeposit(1, \"gg\", \"\", \"\", uiTest);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(\"New description: gg\", outContent.toString());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getExpenditureAmount_noTransactions_throwsException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.getExpenditureAmount(1),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"There are no transactions in this bank account\", thrown.getMessage());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getExpenditureAmount_indexOutOfRange_throwsException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.getExpenditureAmount(4),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Index is out of transaction list range\", thrown.getMessage());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getExpenditureAmount_depositTransaction_throwsException() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.getExpenditureAmount(1),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"The transaction is a deposit\", thrown.getMessage());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getExpenditureAmount_expenditureTransaction_returnExpenditureAmount() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(1.0, transListTest.getExpenditureAmount(1));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getDepositAmount_noTransactions_throwsException() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.getDepositValue(1),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"There are no transactions in this bank account\", thrown.getMessage());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getDepositAmount_expenditureTransaction_throwsException() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addExpenditureToList(new Expenditure("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.getDepositValue(1),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"The transaction is not a deposit\", thrown.getMessage());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getDepositAmount_indexOutOfRange_throwsException() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionException thrown \u003d assertThrows(TransactionException.class, () -\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        transListTest.getDepositValue(4),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"Expected listExpenditure to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"Index is out of transaction list range\", thrown.getMessage());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void getDepositAmount_depositTransaction_returnDepositAmount() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        TransactionList transListTest \u003d new TransactionListStub();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transListTest.addDepositToList(new Deposit("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\", 1, new Date(\"1/1/2019\"),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                \"test\"), uiTest, \"bank\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            assertEquals(1.0, transListTest.getDepositValue(1));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } catch (TransactionException errorMessage) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 322
    }
  },
  {
    "path": "src/test/java/owlmoney/model/transaction/TransactionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "class TransactionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDebitCredit_expenditure_showMinus() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction expenditure \u003d new Expenditure(\"test\", 1.0, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"[-] $\", expenditure.checkDebitCredit());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDebitCredit_deposit_showPlus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction deposit \u003d new Deposit(\"test\", 1.0, new Date(\"1/1/2019\"), \"test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        assertEquals(\"[+] $\", deposit.checkDebitCredit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 21
    }
  },
  {
    "path": "src/test/java/owlmoney/model/transfer/TransferFundTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.transfer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.BankList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.Investment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "class TransferFundTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //all transfer function can be found in Banklist.java and Profile.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void bankListIsAccountExistToTransfer_accountDoesNotExist_throwsException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        bankList.bankListIsAccountExistToTransfer(\"No Such Name\", 10),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected bankListIsAccountExistToTransfer to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Unable to transfer fund as bank the sender bank account does not exist: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + \"No Such Name\", thrown.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void bankListIsAccountExistToTransfer_accountExistButInsufficientMoneyToTransfer_throwsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        bankList.bankListIsAccountExistToTransfer(\"Test Investment Account\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                                2000),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected bankListIsAccountExistToTransfer to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Insufficient amount for transfer in this bank: Test Investment Account\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                thrown.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void bankListIsAccountExistToTransfer_accountExistWithSufficientMoneyToTransfer_returnBankType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedReturnType \u003d \"investment\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String returnType \u003d bankList.bankListIsAccountExistToTransfer(\"Test Investment Account\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    500);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedReturnType, returnType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void bankListIsAccountExistToReceive_accountDoesNotExist_throwsException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String nameDoNotExist \u003d \"No Such Name\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        bankList.bankListIsAccountExistToReceive(nameDoNotExist),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected bankListIsAccountExistToReceive to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Unable to transfer fund as the receiving bank account does not exist: \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + nameDoNotExist, thrown.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void bankListIsAccountExistToReceive_accountExist_returnBankType() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankList bankList \u003d new BankList(storage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String expectedReturnType \u003d \"investment\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.bankListAddBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            outContent.reset();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String returnType \u003d bankList.bankListIsAccountExistToReceive(\"Test Investment Account\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(expectedReturnType, returnType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(2, bankList.getBankListSize());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void transferFund_successfulFundTransferBetweenTwoBankAccount_deductAndAddTheCorrectAmount() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Profile profileTest \u003d new Profile(\"Test User\", uiTest);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            newDate \u003d temp.parse(\"10/2/2019\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.transferFund(\"Test Saving Account\", \"Test Investment Account\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    100, newDate, uiTest);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(900, newSavingAccount.getCurrentAmount());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            assertEquals(1100, newInvestmentAccount.getCurrentAmount());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void transferFund_senderAccountDoesNotExist_throwsException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Profile profileTest \u003d new Profile(\"Test User\", uiTest);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            newDate \u003d temp.parse(\"10/2/2019\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date finalNewDate \u003d newDate;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e profileTest.transferFund("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"No Such Name\", \"Test Investment Account\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                100, finalNewDate, uiTest),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected transferFund to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Unable to transfer fund as bank the sender bank account does not exist: \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + \"No Such Name\", thrown.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void transferFund_senderAccountExistButInsufficientMoney_throwsException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Profile profileTest \u003d new Profile(\"Test User\", uiTest);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            newDate \u003d temp.parse(\"10/2/2019\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date finalNewDate \u003d newDate;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        profileTest.transferFund("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                                \"Test Investment Account\", \"Test Saving Account\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                                2000, finalNewDate, uiTest),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected bankListIsAccountExistToTransfer to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Insufficient amount for transfer in this bank: Test Investment Account\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                thrown.getMessage());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void transferFund_receiverAccountDoesNotExist_throwsException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Ui uiTest \u003d new Ui();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Profile profileTest \u003d new Profile(\"Test User\", uiTest);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newSavingAccount \u003d new Saving(\"Test Saving Account\", 1000, 2000);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Bank newInvestmentAccount \u003d new Investment(\"Test Investment Account\", 1000);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            newDate \u003d temp.parse(\"10/2/2019\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newSavingAccount, uiTest);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            profileTest.profileAddNewBank(newInvestmentAccount, uiTest);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (BankException error) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Expected no throw, but error thrown\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Date finalNewDate \u003d newDate;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        BankException thrown \u003d assertThrows(BankException.class, () -\u003e profileTest.transferFund("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Test Saving Account\", \"No Such Name\","
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                100, finalNewDate, uiTest),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                \"Expected transferFund to throw, but it didn\u0027t\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        assertEquals(\"Unable to transfer fund as the receiving bank account does not exist: \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"No Such Name\", thrown.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 282
    }
  }
]
