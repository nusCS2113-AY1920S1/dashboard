[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "group \u0027seedu.OwlMoney\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "version \u00271.2.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.5.1\u0027)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveBaseName \u003d \"OwlMoney\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    mainClassName \u003d \"owlmoney.Main\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/owlmoney/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class Main {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseCommand parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    //private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Initializes a new OwlMoney session."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Main() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parser \u003d new ParseCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        /*storage \u003d new Storage(\"data/data.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Could not read tasks from disk, will start with empty file\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Starts up the initialized OwlMoney session."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        boolean hasExited \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //Temporary do this chunk"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.firstTimeRun();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String username \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile \u003d new Profile(username);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.greet(profile.getUsername());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        // until above this line"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (parser.hasNextLine()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Command command \u003d parser.parseLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                hasExited \u003d command.execute(profile, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (hasExited) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } catch (ParserException | BankException | TransactionException | BondException | CardException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    | owlmoney.model.card.exception.CardException exceptionMessage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(exceptionMessage.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 12,
      "TerenceTanWT": 1,
      "shamussy": 57
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Command class which is abstract where various command types inherit from given that it is abstract."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each command type implements execution code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return True if OwlMoney should terminate after execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract boolean execute(Profile profile, Ui ui) throws BankException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            TransactionException, BondException, CardException, owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "BrianTKM": 12,
      "TerenceTanWT": 1,
      "shamussy": 11
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ExitCommand class which contains the execution function to terminate OwlMoney."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of ExitCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to exit OwlMoney."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return true so OwlMoney will terminate after execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 29
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/PlaceHolderEmptyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class PlaceHolderEmptyCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public PlaceHolderEmptyCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.message \u003d \"Execute command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 15,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/AddInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.Investment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of AddInvestmentCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name   Name of new investment object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount Initial amount of money in the new investment object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public AddInvestmentCommand(String name, double amount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to create a new investment account in the profile."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bank newInvestment \u003d new Investment(this.name, this.amount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.addNewBank(newInvestment, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 38
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/AddSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * AddSavingsCommand class which contains the execution function to add a new saving object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddSavingsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of AddSavingCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name   Name of new saving object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income Income of new saving object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Initial amount of new saving object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddSavingsCommand(String name, double income, double amount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to create a new savings account in the profile."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank newSaving \u003d new Saving(this.name, this.amount, this.income);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewBank(newSaving, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 37,
      "shamussy": 7
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/DeleteInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of DeleteInvestmentCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName Bank name to be deleted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public DeleteInvestmentCommand(String bankName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to delete an investment account from the profile."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.deleteBank(this.bankName, INVESTMENT, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 33
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/DeleteSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * DeleteSavingsCommand class which contains the execution function to delete a saving object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteSavingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of DeleteSavingCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank name to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteSavingsCommand(String bankName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to delete a savings account from the profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.deleteBank(this.bankName, SAVING, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 27,
      "shamussy": 9
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/EditInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class EditInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of EditInvestmentCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name    Name of bank account."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount  New amount of bank account if any."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName New name of bank account if any."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public EditInvestmentCommand(String name, String amount, String newName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to edit the details of an investment account in the profile."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.editInvestmentAccount(name, newName, amount, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 2,
      "shamussy": 36
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/EditSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * EditSavingsCommand class which contains the execution function to edit a saving object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditSavingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String income;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of EditSavingCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name    Name of bank account."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income  New income of bank account if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount  New amount of bank account if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of bank account if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditSavingsCommand(String name, String income, String amount, String newName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to edit the details of a savings account in the profile."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.editSavingsAccount(name, newName, amount, income, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 42,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/ListInvestmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListInvestmentCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to list savings in the profile."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.listBanks(INVESTMENT,ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 23
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/ListSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ListSavingsCommand class which contains the execution function to list saving objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListSavingsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to list savings in the profile."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.listBanks(SAVING,ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 19,
      "shamussy": 7
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bond/AddBondCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddBondCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bondName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String bankAccountName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final double rate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String BONDS \u003d \"bonds\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of AddBondCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bondName   name of the bond."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount cost of the bond."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate   interest rate of the bond."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date   date the bond was purchased."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year   number of years the bond holds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public AddBondCommand(String bondName, String bankAccountName, double amount, double rate, Date date, int year,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bondName \u003d bondName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bankAccountName \u003d bankAccountName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Executes the function to create a new investment account in the profile."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, BondException, CardException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Bond newBond \u003d new Bond(this.bondName, this.amount, this.rate, this.date, this.year);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Expenditure newExpenditure \u003d new Expenditure(this.bondName, this.amount, this.date, BONDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.isBondUnique(this.bankAccountName, newBond);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.addNewExpenditure(this.bankAccountName, newExpenditure, ui, type);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        profile.addNewBond(this.bankAccountName, newBond, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 8,
      "shamussy": 55
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/AddCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * AddCardCommand class which contains the functions to add a new card object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final double limit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final double rebate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor that creates an instance of AddCardCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name Credit card name of the new card object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param limit Credit card monthly limit of the new card object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param rebate Credit card monthly rebate of the new card object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public AddCardCommand(String name, double limit, double rebate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Executes the function to create a new card in the profile."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Card newCard \u003d new Card(this.name, this.limit, this.rebate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        profile.addNewCard(newCard, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 42
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/DeleteCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * DeleteCardCommand class which contains the execution function to delete a card object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor that creates an instance the DeleteCardCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name Card name to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public DeleteCardCommand(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Executes the function to delete a card from the profile."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        profile.deleteCard(this.name, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 35
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/EditCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String limit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String rebate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of EditCardCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name    Name of credit card."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param limit   New limit of credit card if any."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate  New rebate of credit card if any."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newName New name of credit card if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public EditCardCommand(String name, String limit, String rebate, String newName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Executes the function to edit the details of a credit card in the profile."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.editCardDetails(name, newName, limit, rebate, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 42
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/card/ListCardCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.command.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * ListCardCommand class which contains the execution function to list card objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ListCardCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Executes the function to list cards in the profile."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        profile.listCards(ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 25
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/exception/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class CommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * AddDepositCommand class which contains the execution function to add a new deposit transaction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class AddDepositCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category \u003d \"deposit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor that creates an instance of AddDepositCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount deposited."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of deposit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of deposit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddDepositCommand(String name, double amount, Date date, String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new deposit to the bank."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newDeposit \u003d new Deposit(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewDeposit(accName, newDeposit, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 48,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * AddExpenditureCommand class which contains the execution function to add an expenditure transaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of AddExpenditureCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of the expenditure."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of the expenditure."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of the expenditure."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of the expenditure."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type        Represents type of expenditure to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public AddExpenditureCommand(String name, double amount, Date date, String description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String category, String type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new expenditure to the bank account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, CardException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newExpenditure \u003d new Expenditure(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.addNewExpenditure(accName, newExpenditure, ui, this.type);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 27,
      "BrianTKM": 28,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * DeleteDepositCommand class which contains the execution function to delete a deposit transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteDepositCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of DeleteDepositCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index    Transaction number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteDepositCommand(String bankName, int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d bankName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.deleteDeposit(this.expNumber, this.from, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 35,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * DeleteExpenditureCommand class which contains the execution function to delete an expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of a DeleteExpenditureCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index    Transaction number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public DeleteExpenditureCommand(int index, String bankName, String type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d bankName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.deleteExpenditure(this.expNumber, this.from, ui, this.type);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 4,
      "BrianTKM": 31,
      "shamussy": 5
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * EditDepositCommand class which contains the execution function to edit a deposit transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditDepositCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of EditDepositCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      New deposit amount if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        New date of deposit if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of deposit if any."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Transaction number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditDepositCommand(String name, String amount, String date, String description, int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.editDeposit(index, accName, description, amount, date, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 44,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * EditExpenditureCommand class which contains the execution function to edit an expenditure transaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Construction to create an instance of EditExpenditureCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name        Bank account name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      New amount of expenditure if any."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        New date of expenditure if any."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of expenditure if any."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    New category of expenditure if any."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index       Transaction number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditExpenditureCommand(String name, String amount, String date, String description, String category,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            int index, String type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.editExpenditure(index, accName, description, amount, date, category, ui, this.type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 4,
      "BrianTKM": 47,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ListDepositCommand class which contains the execution function to list deposits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ListDepositCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of ListDepositCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name       Bank account name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListDepositCommand(String name, int displayNum) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.listDeposit(accName, ui, displayNum);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 35,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ListExpenditureCommand class which contains the execution function to list expenditures."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of ListExpenditureCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name       Bank account name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to display."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents type of expenditure to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ListExpenditureCommand(String name, int displayNum, String type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Ui of OwlMoney."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) throws BankException, TransactionException, CardException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        profile.listExpenditure(accName, ui, displayNum, this.type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 7,
      "BrianTKM": 30,
      "shamussy": 5
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the first instance of parsing user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user has entered."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseCommand extends Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseType parseType \u003d new ParseType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] COMMAND_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        \"/help\", \"/undo\", \"/add\", \"/edit\", \"/delete\", \"/list\", \"/find\", \"/transfer\", \"/exit\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_KEYWORD_LISTS \u003d Arrays.asList(COMMAND_KEYWORDS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if there are any more user input if using I/O redirection."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a boolean true when there are more inputs and false when no more input is detected."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Takes in the user input and checks if it is blank first before extracting the command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command extracted is then check against a whitelist before removing it from the input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command then determines which command to execute."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a Command object that is required to be executed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if command is not in the whitelist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command parseLine() throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parseIsBlank(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String command \u003d parseFirstField(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!COMMAND_KEYWORD_LISTS.contains(command)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \" is an invalid command\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String data \u003d removeFirstField(input, command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseCommandMenu(command, data);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user input is full of spaces or is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if it is blank or full of spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void parseIsBlank(String input) throws ParserException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Input cannot be blank or space-bar only\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command menu determines what type of command to execute and pass to parseType."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted with parseFirstField."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data    The data that has command removed from the first field."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The Command object that is required to be executed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException When an invalid command is detected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseCommandMenu(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/add\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/delete\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/edit\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/list\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid command\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 10,
      "shamussy": 78
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseRawData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the third layer of parsing for raw data after removing command and type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This forms the baseline raw data parsing that specific data level parsers can extend from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseRawData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final int NEXT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts specific keyword values."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data        The raw data that requires parsing to extract keyword values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keyword     The keyword that we want to extract."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keywordList The list of keywords that are available in the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The extracted keyword value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if duplicated keywords are detected."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String extractParameter(String data, String keyword, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] splitTypeSpecificArguments \u003d data.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String parameter \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkDuplicateKeywords(splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int startIndex \u003d findStartIndex(splitTypeSpecificArguments, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (startIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int endIndex \u003d findEndIndex(startIndex, splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            parameter \u003d concatenateParameter(startIndex, endIndex, splitTypeSpecificArguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkDuplicateKeywords(String[] splitArray, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordList.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            checkEachKeyword(keywordList[i], splitArray);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkEachKeyword(String keyword, String[] splitArray) throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int keywordCounter \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c splitArray.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitArray[i].equals(keyword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                keywordCounter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (keywordCounter \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"Duplicate \" + keyword + \" found!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findStartIndex(String[] splitTypeSpecificArguments, String keyword) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitTypeSpecificArguments[i].equals(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findEndIndex(int startIndex, String[] splitTypeSpecificArguments, String[] keywordList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            for (int k \u003d 0; k \u003c keywordList.length; k++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (splitTypeSpecificArguments[i].equals(keywordList[k])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return splitTypeSpecificArguments.length;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String concatenateParameter(int startIndex, int endIndex, String[] splitTypeSpecificArguments) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        StringBuilder individualParameter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (individualParameter.toString().isEmpty() || individualParameter.toString().isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(\" \").append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return individualParameter.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "TerenceTanWT": 61,
      "shamussy": 23
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.PlaceHolderEmptyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.ListInvestmentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.ListSavingsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.card.ListCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseAddBond;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.bond.ParseBond;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.card.ParseAddCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.card.ParseCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.card.ParseDeleteCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.card.ParseEditCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseAddInvestment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseDeleteInvestment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseEditInvestment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.investment.ParseInvestment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.saving.ParseAddSaving;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.saving.ParseDeleteSaving;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.saving.ParseEditSaving;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.saving.ParseSaving;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseAddDeposit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseDeleteDeposit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseDeposit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseEditDeposit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseListDeposit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseAddExpenditure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseDeleteExpenditure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseEditExpenditure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseExpenditure;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseListExpenditure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the second layer of parsing for secondary category of command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user desires after specifying the command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class ParseType extends Parser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * List of whitelisted keywords that the user can use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] TYPE_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/savings\", \"/investment\", \"/cardexpenditure\", \"/bankexpenditure\", \"/goals\", \"/card\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/recurexpenditure\", \"/bonds\", \"/profile\", \"/deposit\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e TYPE_KEYWORD_LISTS \u003d Arrays.asList(TYPE_KEYWORDS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BANK \u003d \"bank\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String CARD \u003d \"card\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private static final String BOND \u003d \"bond\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Determines the type of command and checks if it is of valid type."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * After determining that it is of a legal type."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The type is extracted just like how the first field was extracted when extracting command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command previously extracted from the first field of user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data    The remaining user input string with command removed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The raw data left with command and type removed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user specified an invalid type."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Command parseData(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String type \u003d parseFirstField(data);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!TYPE_KEYWORD_LISTS.contains(type)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(type + \" is an invalid type\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String rawData;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeListFirstField(data, type);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeFirstField(data, type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseTypeMenu(command, type, rawData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user wants to delete profile."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The extracted first field from the initial user input that determines the command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user wants to delete his profile."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void isDeleteProfile(String command) throws ParserException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Profile cannot be deleted\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The parseTypeMenu determines what type of command object to generate based on the command and type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted from the initial first field."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type    The type of command extracted from the subsequent first field after first layer of parsing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rawData The remaining data after removing command and type."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The command object that is required to be executed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException when an invalid type if specified."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseTypeMenu(String command, String type, String rawData) throws ParserException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/profile\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            isDeleteProfile(command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/savings\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseAddSaving \u003d new ParseAddSaving(rawData);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.fillHashTable();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.checkParameter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseAddSaving.getCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseEditSaving \u003d new ParseEditSaving(rawData);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.fillHashTable();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.checkParameter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseEditSaving.getCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseDeleteSaving \u003d new ParseDeleteSaving(rawData);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.fillHashTable();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.checkParameter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseDeleteSaving.getCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return new ListSavingsCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for savings\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/investment\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseInvestment parseAddInvestment \u003d new ParseAddInvestment(rawData);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddInvestment.fillHashTable();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddInvestment.checkParameter();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseAddInvestment.getCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseInvestment parseEditInvestment \u003d new ParseEditInvestment(rawData);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseEditInvestment.fillHashTable();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseEditInvestment.checkParameter();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseEditInvestment.getCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ParseInvestment parseDeleteInvestment \u003d new ParseDeleteInvestment(rawData);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseDeleteInvestment.fillHashTable();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseDeleteInvestment.checkParameter();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseDeleteInvestment.getCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return new ListInvestmentCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for investment\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/bonds\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseBond parseAddBond \u003d new ParseAddBond(rawData, BOND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddBond.fillHashTable();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseAddBond.checkParameter();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return parseAddBond.getCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for bond\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/bankexpenditure\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure addExp \u003d new ParseAddExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.fillHashTable();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.checkParameter();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addExp.getCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure listExp \u003d new ParseListExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.fillHashTable();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.checkParameter();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listExp.getCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure deleteExp \u003d new ParseDeleteExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.fillHashTable();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.checkParameter();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteExp.getCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure editExp \u003d new ParseEditExpenditure(rawData, BANK);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editExp.fillHashTable();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editExp.checkParameter();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editExp.getCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for bank expenditure\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        case \"/cardexpenditure\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure addExp \u003d new ParseAddExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.fillHashTable();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.checkParameter();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return addExp.getCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure listExp \u003d new ParseListExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                listExp.fillHashTable();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                listExp.checkParameter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return listExp.getCommand();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure deleteExp \u003d new ParseDeleteExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                deleteExp.fillHashTable();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                deleteExp.checkParameter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return deleteExp.getCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseExpenditure editExp \u003d new ParseEditExpenditure(rawData, CARD);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editExp.fillHashTable();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editExp.checkParameter();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return editExp.getCommand();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for card expenditure\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/deposit\":"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit addDep \u003d new ParseAddDeposit(rawData);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addDep.fillHashTable();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addDep.checkParameter();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addDep.getCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit listDep \u003d new ParseListDeposit(rawData);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listDep.fillHashTable();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listDep.checkParameter();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listDep.getCommand();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit deleteDep \u003d new ParseDeleteDeposit(rawData);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteDep.fillHashTable();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteDep.checkParameter();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteDep.getCommand();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit editDep \u003d new ParseEditDeposit(rawData);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editDep.fillHashTable();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editDep.checkParameter();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editDep.getCommand();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for deposit\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/card\":"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ParseCard addCard \u003d new ParseAddCard(rawData);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                addCard.fillHashTable();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                addCard.checkParameter();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return addCard.getCommand();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ParseCard deleteCard \u003d new ParseDeleteCard(rawData);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                deleteCard.fillHashTable();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                deleteCard.checkParameter();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return deleteCard.getCommand();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return new ListCardCommand();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseCard editCard \u003d new ParseEditCard(rawData);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editCard.fillHashTable();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                editCard.checkParameter();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return editCard.getCommand();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"You entered an invalid type for card\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 43,
      "BrianTKM": 72,
      "TerenceTanWT": 25,
      "shamussy": 108
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parser class which provides methods that more specific parser classes will require."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "abstract class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int SPACE_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts the first field of the string based on the first space detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The input entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The first element of the input string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String parseFirstField(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return inputSplit[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the first field from the input string after extracting it with parseFirstField."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String removeFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/exit\".equals(firstField)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Modified method which removes the first field from the input string after extracting it"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * with parseFirstField if the command is List."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String removeListFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (\"/savings\".equals(firstField) || \"/card\".equals(firstField) || \"/investment\".equals(firstField)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 19,
      "TerenceTanWT": 2,
      "shamussy": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseAddBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bond.AddBondCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseAddBond extends ParseBond {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseAddBond."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseAddBond(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d bondParameters.keySet().iterator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d bondParameters.get(key);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding bond\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(FROM, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (RATE.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkInterestRate(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (YEAR.equals(key)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkYear(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the adding of a new bond."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return AddBondCommand to be executed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        AddBondCommand newAddBondCommand \u003d new AddBondCommand(bondParameters.get(NAME),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bondParameters.get(FROM),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Double.parseDouble(bondParameters.get(AMOUNT)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Double.parseDouble(bondParameters.get(RATE)),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                this.date,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Integer.parseInt(bondParameters.get(YEAR)), this.type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newAddBondCommand;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "shamussy": 73
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/bond/ParseBond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class ParseBond {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    HashMap\u003cString, String\u003e bondParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] BOND_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        \"/amount\", \"/name\", \"/newname\", \"/rate\", \"/date\", \"/year\", \"/from\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String RATE \u003d \"/rate\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String YEAR \u003d \"/year\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e BOND_KEYWORD_LISTS \u003d Arrays.asList(BOND_KEYWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of any ParseBond type object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseBond(String data, String type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \"/bond should not contain \" + parameter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!BOND_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, BOND_KEYWORD));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(NAME,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, BOND_KEYWORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, BOND_KEYWORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(DATE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, BOND_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(RATE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, RATE, BOND_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(YEAR,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, YEAR, BOND_KEYWORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondParameters.put(FROM,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, BOND_KEYWORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    + \" and a value of more than 0\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the interest rate of the bond is more than 0 and less than 100%."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rateString String to be converted to double as the interest rate."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not a double value or amount is more than 100%."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkInterestRate(String rateString) throws ParserException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckInterestRate(rateString)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Interest rate should be less than 100%\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param key        /name or /newname"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param nameString Name of bond"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(key + \" can only contain letters and at most 50 characters\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond is within 1 and 10 years."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param yearString year in string format."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the year does not follow the specified format of max of 10 years."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkYear(String yearString) throws ParserException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckBondYear(yearString)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Bond years must be between 1 and 10 years\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Abstract method where each bond parser performs different checks on the parameters."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Abstract method where each bond parser creates different commands."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "shamussy": 175
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseAddCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.card.AddCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * Represents the parsing of inputs for adding a new card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseAddCard extends ParseCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor which creates an instance of ParseAddCard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public ParseAddCard(String data) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d cardParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d cardParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new card\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (LIMIT.equals(key)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                checkDouble(value, LIMIT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (REBATE.equals(key)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                checkDouble(value, REBATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Returns the command to execute the adding of a new card."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return AddCardCommand to be executed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        AddCardCommand newAddCardCommand \u003d new AddCardCommand(cardParameters.get(NAME),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                Double.parseDouble(cardParameters.get(LIMIT)), Double.parseDouble(cardParameters.get(REBATE)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return newAddCardCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 61
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * ParseCard abstract class where card objects inherit from."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public abstract class ParseCard {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    HashMap\u003cString, String\u003e cardParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final String[] CARD_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        \"/name\", \"/limit\", \"/rebate\", \"/new_name\" };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(CARD_KEYWORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String LIMIT \u003d \"/limit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String REBATE \u003d \"/rebate\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NEW_NAME \u003d \"/new_name\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor which creates an instance of Card object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    ParseCard(String data) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Fills the hash table to map each user input to each parameter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, CARD_KEYWORD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(LIMIT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, LIMIT, CARD_KEYWORD));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(REBATE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, REBATE, CARD_KEYWORD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, CARD_KEYWORD));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if the parameter entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param valueString String to be checked and converted to double."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param keyword Keyword of the parameter to be checked and converted to double."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkDouble(String valueString, String keyword) throws ParserException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(keyword + \" can only be positive numbers\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks if the card name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param nameString Name of the card"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Card name can only contain letters and at most 30 characters\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param command Command the user performed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(command + \"/savings should not contain \" + parameter);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Abstract method where each card parser performs different checks on the user entered parameters."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Abstract method where each card parser creates different commands."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 1,
      "TerenceTanWT": 115
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseDeleteCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.command.card.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * Represents the parsing of inputs for deleting a card."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseDeleteCard extends ParseCard {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor which creates an instance of ParseDeleteCard."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public ParseDeleteCard(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkRedundantParameter(LIMIT, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkRedundantParameter(REBATE, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d cardParameters.keySet().iterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d cardParameters.get(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if ((NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty()))) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Returns the command to execute the deleting of card."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return DeleteCardCommand to be executed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        DeleteCardCommand newDeleteCardCommand \u003d new DeleteCardCommand(cardParameters.get(NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return newDeleteCardCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 60
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/card/ParseEditCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.card.EditCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseEditCard extends ParseCard {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates an instance of ParseEditSaving."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseEditCard(String data) throws ParserException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e cardIterator \u003d cardParameters.keySet().iterator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (cardIterator.hasNext()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d cardIterator.next();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d cardParameters.get(key);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (LIMIT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkDouble(value, LIMIT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (REBATE.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkDouble(value, REBATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Returns the command to execute the editing of a saving."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return Returns EditSavingsCommand to be executed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        EditCardCommand newEditCardCommand \u003d new EditCardCommand(cardParameters.get(NAME),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardParameters.get(LIMIT), cardParameters.get(REBATE), cardParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return newEditCardCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 66
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/exception/CardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * CardException that extends Exception and handles all exception that card would throw."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class CardException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Creates a new cardException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public CardException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 27
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/exception/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * ParserException that extends Exception and handles all exception that parser would throw."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new parserException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 28
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseAddInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.AddInvestmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseAddInvestment extends ParseInvestment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseAddInvestment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseAddInvestment(String data) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d investmentParameters.keySet().iterator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d investmentParameters.get(key);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding investment account\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the adding of a new investment account."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return AddInvestmentCommand to be executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        AddInvestmentCommand newAddInvestmentCommand \u003d new AddInvestmentCommand(investmentParameters.get(NAME),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Double.parseDouble(investmentParameters.get(AMOUNT)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newAddInvestmentCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 57
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseDeleteInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.DeleteInvestmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseDeleteInvestment extends ParseInvestment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseDeleteInvestment."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteInvestment(String data) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME, DELETE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d investmentParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d investmentParameters.get(key);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting an investment account\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the deletion of investment account."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return DeleteInvestmentCommand to be executed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        DeleteInvestmentCommand newDeleteInvestmentCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                new DeleteInvestmentCommand(investmentParameters.get(NAME));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newDeleteInvestmentCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 53
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseEditInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.bank.EditInvestmentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseEditInvestment extends ParseInvestment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseEditInvestment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseEditInvestment(String data) throws ParserException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Iterator\u003cString\u003e investmentIterator \u003d investmentParameters.keySet().iterator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (investmentIterator.hasNext()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String key \u003d investmentIterator.next();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String value \u003d investmentParameters.get(key);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the command to execute the editing of details for investment account."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Returns EditInvestmentCommand to be executed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        EditInvestmentCommand newEditInvestmentCommand \u003d new EditInvestmentCommand(investmentParameters.get(NAME),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                investmentParameters.get(AMOUNT), investmentParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return newEditInvestmentCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 61
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/investment/ParseInvestment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.investment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class ParseInvestment {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    HashMap\u003cString, String\u003e investmentParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] INVESTMENT_KEYWORD \u003d new String[] {\"/amount\", \"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e INVESTMENT_KEYWORD_LISTS \u003d Arrays.asList(INVESTMENT_KEYWORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of any ParseInvestment type object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    ParseInvestment(String data) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \"/investment should not contain \" + parameter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!INVESTMENT_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        investmentParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, INVESTMENT_KEYWORD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        investmentParameters.put(NAME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, INVESTMENT_KEYWORD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        investmentParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, INVESTMENT_KEYWORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param key        /name or /newname"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(key + \" can only contain letters and at most 50 characters\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Abstract method where each investment parser performs different checks on the parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Abstract method where each investment parser creates different commands."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 109
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseAddSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.AddSavingsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for adding a new saving."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseAddSaving extends ParseSaving {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseAddSaving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseAddSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding savings account\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (INCOME.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkIncome(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the adding of a new saving."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return AddSavingsCommand to be executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddSavingsCommand newAddSavingsCommand \u003d new AddSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(INCOME)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(AMOUNT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddSavingsCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 39,
      "TerenceTanWT": 24,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseDeleteSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.DeleteSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for deleting a saving."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteSaving extends ParseSaving {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseDeleteSaving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(INCOME, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NEW_NAME, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting savings account\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deleting of a saving."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return DeleteSavingsCommand to be executed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteSavingsCommand newDeleteSavingsCommand \u003d new DeleteSavingsCommand(savingsParameters.get(NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteSavingsCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 55,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseEditSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.EditSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a saving."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseEditSaving extends ParseSaving {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of ParseEditSaving."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (INCOME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkIncome(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a saving."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns EditSavingsCommand to be executed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditSavingsCommand newEditSavingsCommand \u003d new EditSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                savingsParameters.get(INCOME), savingsParameters.get(AMOUNT), savingsParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditSavingsCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 42,
      "TerenceTanWT": 27,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ParseSaving class which is abstract where various savings parser objects inherit from given that it is abstract."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public abstract class ParseSaving {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    HashMap\u003cString, String\u003e savingsParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] SAVINGS_KEYWORD \u003d new String[] {\"/amount\", \"/income\", \"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String INCOME \u003d \"/income\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e SAVINGS_KEYWORD_LISTS \u003d Arrays.asList(SAVINGS_KEYWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    ParseSaving(String data) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command   Command the user performed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \"/savings should not contain \" + parameter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!SAVINGS_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(INCOME,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, INCOME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NAME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the income entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s income."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkIncome(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/income can only be numbers with at most 9 digits and 2 decimal places\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param key        /name or /newname"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(key + \" can only contain letters and at most 50 characters\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser performs different checks on the parameters."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser creates different commands."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 86,
      "TerenceTanWT": 32,
      "shamussy": 10
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseAddDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddDepositCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for adding a deposit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseAddDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseAddDeposit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseAddDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(FROM, ADD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!(TRANSNO.equals(key) || NUM.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new deposit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TO.equals(key)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, TO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new deposit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddDepositCommand to be executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddDepositCommand newAddDepositCommand \u003d new AddDepositCommand(depositParameters.get(TO),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(depositParameters.get(AMOUNT)), date,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                (depositParameters.get(DESCRIPTION)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddDepositCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 71
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseDeleteDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for deleting a deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseDeleteDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseDeleteDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new deposit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of a deposit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionDepositCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteDepositCommand newDeleteDepositCommand \u003d new DeleteDepositCommand((depositParameters.get(FROM)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(depositParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteDepositCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ParseDeposit class which is abstract where various deposit parser objects inherit from given that it is abstract."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class ParseDeposit {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    HashMap\u003cString, String\u003e depositParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/date\", \"/desc\", \"/category\", \"/to\", \"/transno\",\"/from\", \"/num\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TO \u003d \"/to\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    ParseDeposit(String data) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command Command the user performed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /deposit should not contain \" + parameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(DATE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(TO,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(FROM,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(NUM,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString) throws ParserException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/desc can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param variable /to or /from"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString, String variable) throws ParserException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only contain letters and at most 30 characters\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser performs different checks on the parameters."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser creates different commands."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 180
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseEditDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseEditDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, EDIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a deposit\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a deposit\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDate(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a deposit."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditDepositCommand to be executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditDepositCommand newEditDepositCommand \u003d new EditDepositCommand(depositParameters.get(FROM),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.get(AMOUNT), depositParameters.get(DATE),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.get(DESCRIPTION), Integer.parseInt(depositParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditDepositCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 78
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseListDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for listing deposits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseListDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseListDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when listing deposits from a bank\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.put(key, \"30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of deposits."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListDepositCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListDepositCommand newListDepositCommand \u003d new ListDepositCommand(depositParameters.get(FROM),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(depositParameters.get(NUM)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListDepositCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseAddExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddExpenditureCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for adding a expenditure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseAddExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseAddExpenditure."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents type of expenditure to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseAddExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!TRANSNO.equals(key) \u0026\u0026 !NUM.equals(key) \u0026\u0026 !CATEGORY.equals(key)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 \"deposit\".equals(value)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new expenditure\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(CATEGORY, \"miscellaneous\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new expenditure."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddExpenditureCommand to be executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddExpenditureCommand newAddExpenditureCommand \u003d new AddExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(expendituresParameters.get(AMOUNT)), date,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                (expendituresParameters.get(DESCRIPTION)), (expendituresParameters.get(CATEGORY)), this.type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddExpenditureCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 26,
      "BrianTKM": 50,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseDeleteExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for deleting an expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseDeleteExpenditure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseDeleteExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of an expenditure."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionExpenditureCommand to be executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteExpenditureCommand newDeleteExpenditureCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new DeleteExpenditureCommand(Integer.parseInt(expendituresParameters.get(TRANSNO)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        expendituresParameters.get(FROM), this.type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteExpenditureCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 61,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseEditExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseEditExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseEditExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDate(value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a expenditure."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditExpenditureCommand to be executed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditExpenditureCommand newEditExpenditureCommand \u003d new EditExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(AMOUNT), expendituresParameters.get(DATE),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(DESCRIPTION), expendituresParameters.get(CATEGORY),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(TRANSNO)), this.type);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditExpenditureCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 78
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ParseExpenditure class which is abstract where various expenditure parser objects inherit from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * given that it is abstract."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public abstract class ParseExpenditure {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    HashMap\u003cString, String\u003e expendituresParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/date\", \"/desc\", \"/category\", \"/from\", \"/transno\", \"/num\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String CATEGORY \u003d \"/category\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Constructor which creates an instance of any ParseExpenditure type object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type Represents type of expenditure to be added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseExpenditure(String data, String type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command Command the user performed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /expenditure should not contain \" + parameter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DATE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(CATEGORY,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, CATEGORY, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(FROM,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(NUM,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString) throws ParserException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/desc can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/from can only contain letters and at most 30 characters\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser performs different checks on the parameters."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser creates different commands."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 31,
      "BrianTKM": 151,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseListExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for listing expenditures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseListExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseListExpenditure(String data, String type) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO,LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT,LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE,LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION,LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY,LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(NUM, \"30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of expenditures."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListExpendituresCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListExpenditureCommand newListExpenditureCommand \u003d new ListExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(NUM)), this.type);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListExpenditureCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 3,
      "BrianTKM": 59,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/regex/RegexUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.regex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Regex is used to validate user input to make sure it satisfies constraints set for user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public final class RegexUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether amount input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckMoney(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,9}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks whether bank values input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public static boolean regexCheckBankAmount(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[0-9])\\\\d{1,9}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the interest rate entered is within the 100% limit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 2 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 100%."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckInterestRate(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,2}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c 100.00);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the credit card cashback rate entered is within the 20% limit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 2 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 20%."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckCashbackRate(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,2}(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 20.00);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is numeric and is within the 9 digit constraints with no decimals."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckListNumber(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String listRegex \u003d \"^[1-9]\\\\d{0,8}$\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(listRegex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is numeric and is within the 9 digit constraints with no decimals."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckBondYear(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String yearRegex \u003d \"^[1-9]\\\\d{0,1}$\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(yearRegex)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int parsedInput \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 10);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 30 characters only."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckName(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String nameRegex \u003d \"^[a-zA-Z0-9 ]{1,30}$\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(nameRegex);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 50 characters only."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDescription(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String descriptionRegex \u003d \"^[a-zA-Z0-9 ]{1,50}$\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(descriptionRegex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether user input days is less than or equal to 365 days limit set for short term goals."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDay(String input) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String dayRegex \u003d \"^[1-9]\\\\d{0,2}$\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(dayRegex)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int parsedDay \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedDay \u003c\u003d 365);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if date is in DD/MM/YYYY format from year 1900 to 2099."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * It does not check for whether the month has 30 or 31 days or whether february is a leap year."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDateFormat(String input) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateRegex \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(dateRegex);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 12,
      "shamussy": 136
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Bank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The Bank class which is abstract where various bank types will inherit from given that it is abstract."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Bank {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String accountName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double currentAmount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    TransactionList transactions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Allows the child class to create an instance with name and current amount."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          A name of the bank account."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The amount of money in the bank on initial creation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Bank(String name, double currentAmount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d currentAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setAccountName(String newName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d newName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setCurrentAmount(double newAmount) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d newAmount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the account name of the instance of the bank account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The accountName of the bank account."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getAccountName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.accountName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money in the instance of the bank account."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The currentAmount of money in the bank account."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    double getCurrentAmount() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.currentAmount;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the details of the bank account which consist of name and amount."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return accountName and currentAmount."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Account name: \" + accountName + \"\\nType: \" + getType() + \"\\nCurrent Amount: $\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + new DecimalFormat(\"0.00\").format(currentAmount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deducts from amount in bank."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount to be deducted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deductFromAmount(double amount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount -\u003d amount;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds to amount in bank."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount to be added."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addToAmount(double amount) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount +\u003d amount;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method which adds a new expenditure to the current bank account."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exp Expenditure to be added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  Ui of OwlMoney"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void addInExpenditure(Transaction exp, Ui ui) throws BankException;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method which deletes an expenditure from the current bank account."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exNum Transaction number."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    Ui of OwlMoney."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void deleteExpenditure(int exNum, Ui ui) throws TransactionException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits expenditure in the current bank account."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative after editing expenditure."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits deposit in the current bank account."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     Ui of OwlMoney."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative after editing deposit."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editDepositDetails(int expNum, String desc, String amount, String date, Ui ui)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the income of the current bank."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newIncome Income to set."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on investment account."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setIncome(double newIncome) throws BankException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditures from the current bank."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new TransactionException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits from the current bank."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If used on investment account."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep Deposit to add."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  Ui of OwlMoney."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on investment account."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addDepositTransaction(Transaction dep, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the current bank account."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    Ui of OwlMoney."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException        If amount becomes negative after deleting deposit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void deleteDepositTransaction(int index, Ui ui) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a bond to the current bank account."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond the bond object."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addBondToInvestmentAccount(Bond newBond, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists before adding."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If used on savings account."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name exists."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkBondExist(Bond bond) throws BankException, BondException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 152,
      "shamussy": 66
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/BankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The BankList class that provides a layer of abstraction for the ArrayList that stores bank accounts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class BankList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cBank\u003e bankLists;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a instance of BankList that contains an arrayList of Banks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public BankList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists \u003d new ArrayList\u003cBank\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the name of the bank account."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankListIndex The index of the bank account in the arrayList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The name of the bank account."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getBankName(int bankListIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return bankLists.get(bankListIndex).getAccountName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an instance of a bank account into the BankList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank a new bank object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicate bank account name found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addBank(Bank newBank, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankAccountExists(newBank.getAccountName())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There is already a bank account with the name \" + newBank.getAccountName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists.add(newBank);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added new bank: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(newBank.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns true if bankList is empty and false if there are banks stored in bankList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return status of whether there are banks stored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bankLists.isEmpty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the bankList which counts all types of accounts."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return size of bankList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int getBankListSize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bankLists.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Counts the number of bank accounts of the type specified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accountType The type of bank account"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the number of accounts of the specified type."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int getNumberOfAccountType(String accountType) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (accountType.equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bank name and type that the user specified is correct."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of bank account."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType type of bank account."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result bankName is of bankType."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean hasCorrectBankNameAndType(String bankName, String bankType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if ((bankName.equals(bankLists.get(i).getAccountName()))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \u0026\u0026 (bankType.equals(bankLists.get(i).getType()))) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name that the user specified exists."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName name of bank account."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return the result bankName exists."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private boolean bankAccountExists(String bankName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user passes all requirements to delete a bank account."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of bank account."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType type of bank account."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result bankName is of bankType."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account fails any criteria."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean canPassDeleteBankRequirements(String bankName, String bankType) throws BankException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There are 0 bank accounts in your profile\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankType.equals(SAVING) \u0026\u0026 getNumberOfAccountType(SAVING) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There must be at least 1 savings account\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!bankAccountExists(bankName)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There are no bank accounts with name \" + bankName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (hasCorrectBankNameAndType(bankName, bankType)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(bankName + \" is not not of type: \" + bankType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an instance of a bank account from the BankList."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the bank account."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankType type of bank account."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account fails any criteria."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteBank(String bankName, String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (canPassDeleteBankRequirements(bankName, bankType)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (bankName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    ui.printMessage(\"Removing \" + bankLists.get(i).getAccountName());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.remove(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the saving details."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account to be edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName  New name of bank account."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount of bank account."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income   New income of bank account."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editSavings(String bankName, String newName, String amount, String income, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    \u0026\u0026 \"saving\".equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    compareBank(bankLists.get(i), newName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setAccountName(newName);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setCurrentAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(income.isEmpty() || income.isBlank())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setIncome(Double.parseDouble(income));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"New details of the account:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(bankLists.get(i).getDescription());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new BankException(\"There are no bank with the name: \" + bankName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if new bank name is unique."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param currentBank The bank to be changed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newBankName The new name of the bank."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If new name is not unique."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private void compareBank(Bank currentBank, String newBankName) throws BankException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(newBankName) \u0026\u0026 !bankLists.get(i).equals(currentBank)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new BankException(\"There is already a bank account with the name \" + newBankName);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits the investment account details."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName Bank account to be edited."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName  New name of bank account."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount   New amount of bank account."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicate bank name found."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editInvestment(String bankName, String newName, String amount, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \u0026\u0026 \"investment\".equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    compareBank(bankLists.get(i), newName);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).setAccountName(newName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    bankLists.get(i).setCurrentAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"New details of the account:\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(bankLists.get(i).getDescription());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to a bank account."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * This will store the expenditure in the ExpenditureList in the bank account."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName The Bank account name."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     The instance of the expenditure."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addExpenditure(String accName, Transaction exp, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addInExpenditure(exp, ui);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"There is no account with the name: \" + accName);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all bank accounts in the BankList."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If there are no specified bank accounts."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBankAccount(String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (getBankListSize() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"There are 0 bank accounts\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int numberOfBanks \u003d 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getBankListSize(); i++) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bankType.equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage((i + 1) + \".\\n\" + bankLists.get(i).getDescription());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                numberOfBanks++;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (numberOfBanks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new BankException(\"There are 0 \" + bankType + \" accounts\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditures in the bank account."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankToList The name of the bank account."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank name does not exist."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBankExpenditure(String bankToList, Ui ui, int displayNum) throws TransactionException,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            BankException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits in the bank account."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankToList The name of the bank account."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBankDeposit(String bankToList, Ui ui, int displayNum) throws TransactionException,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            BankException {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes an expenditure from the transactionList in the bank account."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum         The transaction number."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deleteFromBank The name of the bank account."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui             required for printing."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteExp(int expNum, String deleteFromBank, Ui ui) throws TransactionException,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            BankException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (deleteFromBank.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).deleteExpenditure(expNum, ui);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + deleteFromBank);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits an expenditure from the transactionList in the bank account."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       The transaction number."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank The name of the bank account."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         The description of the expenditure."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       The amount of the expenditure."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         The date of the expenditure."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category     The category of the expenditure."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for printing."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editExp(int expNum, String editFromBank, String desc, String amount, String date, String category,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(editFromBank)) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).editExpenditureDetails(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + editFromBank);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a deposit from the transactionList in the bank account."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       The transaction number."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank The name of the bank account."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         The description of the deposit."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       The amount of the deposit."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         The date of the deposit."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for printing."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank name does not exist."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void editDep(int expNum, String editFromBank, String desc, String amount, String date, Ui ui)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(editFromBank)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).editDepositDetails(expNum, desc, amount, date, ui);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + editFromBank);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a deposit tied to a bank account."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * This will store the expenditure in the transactionList in the bank account."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName The Bank account name."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep     The instance of the deposit."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank name does not exist."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addDeposit(String accName, Transaction dep, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addDepositTransaction(dep, ui);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the transactionList in the bank account."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName The name of the bank account."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index   The transaction number."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteDeposit(String accName, int index, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).deleteDepositTransaction(index, ui);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a bond to a bank account in the bankList."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName name of bank account."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond    bond object."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addBond(String accName, Bond bond, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (accName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).addBondToInvestmentAccount(bond, ui);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists before adding."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName the bank account name."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank does not exist."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name found."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void isBondExist(String accName, Bond bond) throws BankException, BondException {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (accName.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).checkBondExist(bond);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        throw new BankException(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 8,
      "BrianTKM": 244,
      "shamussy": 210
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Investment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.BondList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Investment extends Bank {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String INVESTMENT \u003d \"investment\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    BondList bonds;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of an investment account."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          The name of the bank account."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The current amount of money in  the bank account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Investment(String name, double currentAmount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(name, currentAmount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.type \u003d INVESTMENT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.bonds \u003d new BondList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to this instance of the bank account."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of expenditure."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addInExpenditure(Transaction exp, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (exp.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            transactions.addExpenditureToList(exp, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            deductFromAmount(exp.getAmount());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to this bank account."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exId The id of the expenditure in ExpenditureList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteExpenditure(int exId, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        addToAmount(transactions.deleteExpenditureFromList(exId, ui));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a bond to this investment account."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void addBondToInvestmentAccount(Bond bond, Ui ui) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.addBondToList(bond, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if bond exists in the bondList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name exists."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void checkBondExist(Bond bond) throws BondException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bonds.bondExist(bond);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 3,
      "shamussy": 77
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Saving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * A savings account class that extends a normal bank account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Saving extends Bank {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private double income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a savings account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          The name of the bank account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The current amount of money in  the bank account."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param income        The amount of money that is credited monthly into the account."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Saving(String name, double currentAmount, double income) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(name, currentAmount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.type \u003d SAVING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private double getIncome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return income;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the bank accounts."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the description of the bank account which includes income and type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return super.getDescription() + \"\\nIncome: $\" + new DecimalFormat(\"0.00\").format(getIncome());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to this instance of the bank account."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of expenditure."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account becomes negative after adding expenditure."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addInExpenditure(Transaction exp, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (exp.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactions.addExpenditureToList(exp, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            deductFromAmount(exp.getAmount());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to this bank account."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exId The id of the expenditure in ExpenditureList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteExpenditure(int exId, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        addToAmount(transactions.deleteExpenditureFromList(exId, ui));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets a new income of the current bank account."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newIncome Income to set."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setIncome(double newIncome) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d newIncome;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the expenditure details from the current bank account."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       Ui of OwlMoney."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If amount is negative after editing expenditure."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 this.getCurrentAmount()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + transactions.getExpenditureAmount(expNum, ui) \u003c Double.parseDouble(amount)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double oldAmount \u003d transactions.getExpenditureAmount(expNum, ui);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double newAmount \u003d transactions.editEx(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.addToAmount(oldAmount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.deductFromAmount(newAmount);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the deposit details from the current bank account."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     Ui of OwlMoney."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If amount becomes negative after editing deposit."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void editDepositDetails(int expNum, String desc, String amount, String date, Ui ui)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException, BankException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 this.getCurrentAmount()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + Double.parseDouble(amount) \u003c transactions.getDepositValue(expNum, ui)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double oldAmount \u003d transactions.getDepositValue(expNum, ui);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double newAmount \u003d transactions.editDep(expNum, desc, amount, date, ui);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.addToAmount(newAmount);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.deductFromAmount(oldAmount);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep Deposit to add."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  Ui of OwlMoney."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addDepositTransaction(Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.addDepositToList(dep, ui);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        addToAmount(dep.getAmount());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the current bank account."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    Ui of OwlMoney."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If amount becomes negative after editing deposit."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void deleteDepositTransaction(int index, Ui ui) throws TransactionException, BankException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        double depositValue \u003d transactions.getDepositValue(index, ui);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (this.getCurrentAmount() \u003c depositValue) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new BankException(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            this.deductFromAmount(transactions.deleteDepositFromList(index, ui));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 5,
      "BrianTKM": 136,
      "shamussy": 48
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/exception/BankException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bank.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BankException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new BankException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BankException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 9,
      "-": 15
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bond/Bond.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Bond {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double rate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a Bond with details of name, amount, rate."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name   The name of the bond issue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount The amount of money the bond costs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rate   The coupon rate of the bond."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date   The date the bond was purchased."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param year   The year the bond will last."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Bond(String name, double amount, double rate, Date date, int year) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.rate \u003d rate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.category \u003d \"bonds\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the number of years the bond will last."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the number of years the bond will last."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date the bond was purchased."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the date the bond was purchased."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the annual coupon rate of the bond."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return rate of the coupon annual rate."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getYearlyCouponRate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.rate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the half annual coupon rate that is used for biannual coupon rate issuance calculation."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the half annual coupon rate."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getHalfYearlyCouponRate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.rate / 2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money the bond was bought for."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the amount of money the bond costs."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the name of the bond purchased."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the name of the bond."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of the bond purchased."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the category of this bond purchased."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the bond to a new amount."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newAmount new amount of the bond"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setAmount(double newAmount) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.amount \u003d newAmount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Sets the name of the bond to a new name."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName new name of the bond"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 112
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bond/BondList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BondList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ArrayList\u003cBond\u003e bondLists;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an arrayList of bonds."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BondList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists \u003d new ArrayList\u003cBond\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the bonds in the bondList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for display."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param displayNum bond number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBond(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (bondLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"There are no bonds\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            for (int i \u003d bondLists.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage((i + 1) + bondLists.get(i).getName() + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Add bond to list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond bond object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addBondToList(Bond bond, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bondLists.add(bond);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.printMessage(\"Added bond:\\n\" + bond.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the size of the bondList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the size of the bondList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private int getSize() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return bondLists.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bond the bond object that the user is expecting to add."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name is found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void bondExist(Bond bond) throws BondException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (bond.getName().equals(bondLists.get(i).getName())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new BondException(\"Bond with the name: \" + bond.getName() + \" already exists\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /*public void editBond() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteBondFromList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 4,
      "shamussy": 71
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bond/exception/BondException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.bond.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class BondException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new BondException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public BondException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/card/Card.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.card.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " * Card class for initialisation of credit card object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private double limit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private double rebate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    TransactionList paid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    TransactionList unpaid;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor that allows the child class to create an instance with credit card name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name A name for the credit card."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param limit Credit card monthly spending limit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param rebate Credit card monthly cash back rebate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Card(String name, double limit, double rebate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.paid \u003d new TransactionList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.unpaid \u003d new TransactionList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the card name of the credit card."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return name of the credit card."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Set the card name for the credit card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name A name for the credit card."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void setName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the card limit of the credit card."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return card limit of the credit card."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    double getLimit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.limit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Set the card limit for the credit card."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param limit A name for the credit card."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void setLimit(double limit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the rebate of the credit card."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @return rebate of the credit card."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    double getRebate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return this.rebate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Set the rebate for the credit card."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param rebate Rebate for the credit card."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    void setRebate(double rebate) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rebate \u003d rebate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Gets the credit card details."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return String of credit card details."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return \"Card Name: \" + getName()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"\\nLimit: \" + new DecimalFormat(\"0.00\").format(getLimit())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"\\nRebate: \" + new DecimalFormat(\"0.00\").format(getRebate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds expenditure to the credit card."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void addInExpenditure(Transaction exp, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (exp.getAmount() \u003e this.getLimit()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"Expenditure to be added cannot exceed limit\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            unpaid.addExpenditureToList(exp, ui);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists the expenditures in the current credit card."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         Ui of OwlMoney."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        unpaid.listExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 32,
      "TerenceTanWT": 91
    }
  },
  {
    "path": "src/main/java/owlmoney/model/card/CardList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private ArrayList\u003cCard\u003e cardLists;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Constructor that creates an arrayList of Cards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardLists \u003d new ArrayList\u003cCard\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Adds an instance of card into the CardList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param newCard a new card object to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void addCard(Card newCard, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardLists.add(newCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        ui.printMessage(\"Added new card: \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        ui.printMessage(newCard.getDetails());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Deletes an instance of a card from the CardList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name name of the card to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void deleteCard(String name, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkCardListEmpty(ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        boolean isDeleted \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (cardLists.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ui.printMessage(\"Removing \" + cardLists.get(i).getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                cardLists.remove(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                isDeleted \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (!isDeleted) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new CardException(\"No such card exist.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Throws CardException if CardList is empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException If CardList is empty."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkCardListEmpty(Ui ui) throws CardException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (cardLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new CardException(\"There are 0 cards in your profile\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Throws CardException if card name already exist in CardList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @throws CardException If card name already exist in CardList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkCardNameDuplicate(String name, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if(cardLists.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new CardException(\"Card name already exist.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Edits the credit card details."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param name     Credit Card to be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newName  New name of credit card if any."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param limit    New limit of credit card if any."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate   New rebate of credit card if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui       Required for printing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void editCard(String name, String newName, String limit, String rebate, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    cardLists.get(i).setName(newName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!(limit.isEmpty() || limit.isBlank())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(\"1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    cardLists.get(i).setLimit(Double.parseDouble(limit));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!(rebate.isEmpty() || rebate.isBlank())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    cardLists.get(i).setRebate(Double.parseDouble(rebate));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(\"New details of the cards:\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ui.printMessage(cardLists.get(i).getDetails() + \"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!isEdit) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new CardException(\"Card could not be found \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists all credit cards details."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void listCards(Ui ui) throws CardException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkCardListEmpty(ui);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            ui.printMessage((i + 1) + \".\\n\" + cardLists.get(i).getDetails());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds an expenditure tied to a credit card."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * This will store the expenditure in the ExpenditureList in the credit card."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardName The credit card name."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param exp      The instance of the expenditure."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui       Required for printing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //need change exception class in the future for this"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void addExpenditure(String cardName, Transaction exp, Ui ui)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throws owlmoney.model.card.exception.CardException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardLists.get(i).getName().equals(cardName)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardLists.get(i).addInExpenditure(exp, ui);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new owlmoney.model.card.exception.CardException(\"There are no credit card named :\" + cardName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists expenditures in the credit card."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param cardToList The name of the credit card."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void listCardExpenditure(String cardToList, Ui ui, int displayNum)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throws TransactionException, owlmoney.model.card.exception.CardException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c cardLists.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (cardToList.equals(cardLists.get(i).getName())) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                cardLists.get(i).listAllExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        throw new owlmoney.model.card.exception.CardException(\"Cannot find bank with name: \" + cardToList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 63,
      "TerenceTanWT": 103
    }
  },
  {
    "path": "src/main/java/owlmoney/model/card/exception/CardException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.card.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class CardException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Creates a new CardException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public CardException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/profile/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.CardException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.BankList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bank.exception.BankException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.Bond;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.bond.exception.BondException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.model.card.CardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The profile class that stores details of the user which includes bank accounts, cards, names."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private BankList bankList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private CardList cardList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates a new instance of the user profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newUserName The username that the user desires to use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Profile(String newUserName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.username \u003d newUserName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankList \u003d new BankList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.cardList \u003d new CardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the username of the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The username of the profile."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new bank account into the BankList stored in this profile."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank an instance of the new bank account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicated bank name found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addNewBank(Bank newBank, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addBank(newBank, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes a bank account from the BankList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the Bank account."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account fails check criteria."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteBank(String bankName, String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.deleteBank(bankName, bankType, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all the bank accounts in the BankList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If there are no bank account of specified type."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listBanks(String bankType, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.listBankAccount(bankType, ui);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Adds a new expenditure tied to a specific bank account or credit card."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param accName The name of the bank account or credit card."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     An expenditure object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param type    Represents type of expenditure to be added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank amount becomes negative after adding expenditure."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void addNewExpenditure(String accName, Transaction exp, Ui ui, String type)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throws BankException, owlmoney.model.card.exception.CardException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardList.addExpenditure(accName, exp, ui);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.addExpenditure(accName, exp, ui);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to a specific bank account."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expIndex The index of the expenditure in the expenditureList tied to a specific bank account."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName The name of the bank account."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void deleteExpenditure(int expIndex, String bankName, Ui ui,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String type) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.deleteExp(expIndex, bankName, ui);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits from a specific bank account."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param listedBank Bank account to list from."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listDeposit(String listedBank, Ui ui, int displayNum) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankDeposit(listedBank, ui, displayNum);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Lists expenditure from a specific a bank account or credit card."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param listedBankOrCard Bank account or credit card to list from."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure found."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void listExpenditure(String listedBankOrCard, Ui ui, int displayNum, String type)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throws BankException, TransactionException, owlmoney.model.card.exception.CardException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"card\".equals(type)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            cardList.listCardExpenditure(listedBankOrCard, ui, displayNum);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            bankList.listBankExpenditure(listedBankOrCard, ui, displayNum);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific expenditure from a specific bank account."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       Transaction number of the expenditure."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank Bank account of expenditure."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         New description of expenditure."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       New amount of expenditure."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         New date of expenditure."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category     New category of expenditure."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for printing."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editExpenditure(int expNum, String editFromBank, String desc, String amount, String date,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String category, Ui ui, String type) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (\"bank\".equals(type)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            bankList.editExp(expNum, editFromBank, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific savings account."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name    Name of savings account to be edited."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of the savings account."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount  New amount of the savings account."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income  New income of the saving account."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If duplicate bank account name is found."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editSavingsAccount(String name, String newName, String amount, String income, Ui ui)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throws BankException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.editSavings(name, newName, amount, income, ui);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Edits a specific investment account."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name    Name of investment account to be edited."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newName New name of the investment account."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount  New amount of the investment account."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editInvestmentAccount(String name, String newName, String amount, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.editInvestment(name, newName, amount, ui);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a specific deposit from a specific bank account."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param depIndex Transaction number of the deposit."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank name of the deposit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteDeposit(int depIndex, String bankName, Ui ui) throws BankException, TransactionException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.deleteDeposit(bankName, depIndex, ui);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to a specific bank account."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName Bank account name."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep     Deposit to be added."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addNewDeposit(String accName, Transaction dep, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addDeposit(accName, dep, ui);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific deposit from a specific bank account."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum       Transaction number of the deposit."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank Bank account of deposit."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc         New description of deposit."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount       New amount of deposit."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date         New date of deposit."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui           required for deposit."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void editDeposit(int expNum, String editFromBank, String desc, String amount, String date, Ui ui)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws BankException, TransactionException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.editDep(expNum, editFromBank, desc, amount, date, ui);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds bond to a specific bank account."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName the name of the bank account."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBond the bond object."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void addNewBond(String accName, Bond newBond, Ui ui) throws BankException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.addBond(accName, newBond, ui);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the bond exists before adding."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName the bank account name."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bond the bond object."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BankException If bank account does not exist."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws BondException If duplicate bond name is found."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void isBondUnique(String accName, Bond bond) throws BankException, BondException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        bankList.isBondExist(accName, bond);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Adds a new credit card into the CardList stored in this profile."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param newCard an instance of the new credit card."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void addNewCard(Card newCard, Ui ui) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardList.addCard(newCard, ui);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * Edits a card from the CardList."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name name of the credit card."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param newName new name of the credit card if any."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param limit new limit of the credit card if any."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     * @param rebate new rebate of the credit card if any."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void editCardDetails(String name, String newName, String limit, String rebate, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        cardList.editCard(name, newName, limit, rebate, ui);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Deletes a card from the CardList."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param name name of the credit card."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void deleteCard(String name, Ui ui) throws CardException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        cardList.deleteCard(name, ui);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * Lists all the cards in the CardList."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void listCards(Ui ui) throws CardException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        cardList.listCards(ui);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 37,
      "BrianTKM": 129,
      "TerenceTanWT": 37,
      "shamussy": 91
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Deposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Deposit class which represents one expenditure."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Deposit extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a new deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of deposit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of deposit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of deposit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of deposit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Deposit(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(description, amount, date, category);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 19,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Expenditure class which represents one expenditure."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Expenditure extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a new Expenditure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount      Amount of expenditure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date        Date of expenditure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category    Category of expenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Expenditure(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(description, amount, date, category);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 20,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * The Transaction class which is abstract where various transaction types will inherit from given that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * it is abstract."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of a transaction object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param description The description that describes this expenditure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount      The amount of money spent in this instance of expenditure."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date        The date when this expenditure was made."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param category    The category that this expenditure can be tagged to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Transaction(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money spent in this transaction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The amount of money spent in this transaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the instance of expenditure."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The description of the expenditure."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date that this expenditure was made."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The date that the expenditure was made."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DateFormat temp \u003d new SimpleDateFormat(\"dd EEEE yyyy\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.format(this.date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of that the expenditure was tagged to."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The category of the expenditure that it was tagged to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String checkDebitCredit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (this.category.equals(\"deposit\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"[+] $\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"[-] $\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Displays the description, amount added/spent, date and category of transaction."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return description, amount added/spent, date and category of transaction in String format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getDetails() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Description: \" + getDescription() + \"\\nAmount: \" + checkDebitCredit()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + new DecimalFormat(\"0.00\").format(getAmount()) + \"\\nDate: \" + getDate()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + \"\\nCategory: \" + getCategory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new description of the transaction."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newDesc New description of transaction."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setDescription(String newDesc) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d newDesc;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new amount for the transaction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newAmount New amount for the transaction."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setAmount(double newAmount) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d newAmount;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new date of the transaction."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newDate New date of the transaction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setDate(Date newDate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d newDate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new category of the transaction."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newCategory New category of the transaction."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setCategory(String newCategory) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d newCategory;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 14,
      "BrianTKM": 71,
      "shamussy": 41
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.transaction.exception.TransactionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The ExpenditureList class that provides a layer of abstraction for the ArrayList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The ArrayList will store both expenditures and deposits"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cTransaction\u003e expLists;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int ONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of Transaction list that contains an ArrayList of expenditures."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expLists \u003d new ArrayList\u003cTransaction\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no expenditure is found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listExpenditure(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this list\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            boolean expenditureExist \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            for (int i \u003d expLists.size() - ONE_INDEX; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!\"deposit\".equals(expLists.get(i).getCategory())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    ui.printMessage(i + 1 + \":\\n\" + expLists.get(i).getDetails() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    expenditureExist \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (counter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!expenditureExist) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"No expenditure found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If no deposit is found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void listDeposit(Ui ui, int displayNum) throws TransactionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank account\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            boolean depositExist \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            for (int i \u003d expLists.size() - ONE_INDEX; i \u003e\u003d 0; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (\"deposit\".equals(expLists.get(i).getCategory())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printMessage(i + \":\\n\" + expLists.get(i).getDetails() + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    depositExist \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (counter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!depositExist) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"No deposits found\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds an expenditure to the transactionList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of an expenditure."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addExpenditureToList(Transaction exp, Ui ui) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expLists.add(exp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added expenditure:\\n\" + exp.getDetails());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds an deposit to the transactionList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep an instance of an deposit."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addDepositToList(Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expLists.add(dep);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added deposit:\\n\" + dep.getDetails());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure to the expenditureList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param index index of the expenditure in the expenditureList."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If invalid transaction."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //magic int used. change next time"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double deleteExpenditureFromList(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d 0 \u0026\u0026 (index - ONE_INDEX) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (expLists.get(index - 1).getCategory().equals(\"deposit\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Transaction temp \u003d expLists.get(index - ONE_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                expLists.remove(index - ONE_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"Expenditure deleted:\\n\" + temp.getDetails());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return temp.getAmount();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific expenditure in the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum   Transaction number of the expenditure."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc     New description of the expenditure."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount   New amount of the expenditure."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date     New date of the expenditure."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of the expenditure."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the expenditure."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double editEx(int expNum, String desc, String amount, String date, String category, Ui ui)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throws TransactionException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setDescription(desc);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                expLists.get(expNum - ONE_INDEX).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(e.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(category.isBlank() || category.isEmpty())) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setCategory(category);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.printMessage(\"Edited details:\\n\" + expLists.get(expNum - ONE_INDEX).getDetails());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return expLists.get(expNum - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific deposit in the list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the deposit."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc   New description of the deposit."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the deposit."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date   New date of the deposit."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui     required for printing."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the deposit."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If incorrect date format."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double editDep(int expNum, String desc, String amount, String date, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Editing transaction...\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setDescription(desc);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            expLists.get(expNum - ONE_INDEX).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                expLists.get(expNum - ONE_INDEX).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(e.toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Edited details:\\n\" + expLists.get(expNum - 1).getDetails());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return expLists.get(expNum - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the specific expenditure amount."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the expenditure."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the expenditure."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not an expenditure."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getExpenditureAmount(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d 0 \u0026\u0026 (index - ONE_INDEX) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (\"deposit\".equals(expLists.get(index - ONE_INDEX).getCategory())) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return expLists.get(index - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes the specific deposit from the current bank account."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deleted deposit."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double deleteDepositFromList(int index, Ui ui) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Transaction temp \u003d expLists.get(index - ONE_INDEX);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        expLists.remove(index - ONE_INDEX);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Deposit deleted:\\n\" + temp.getDetails());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.getAmount();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the amount of the deposit specified."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deposit"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws TransactionException If transaction is not a deposit."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public double getDepositValue(int index, Ui ui) throws TransactionException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"There are no transactions in this bank\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if ((index - ONE_INDEX) \u003e\u003d 0 \u0026\u0026 (index - ONE_INDEX) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (!\"deposit\".equals(expLists.get(index - ONE_INDEX).getCategory())) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new TransactionException(\"The transaction is not a deposit\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                return expLists.get(index - ONE_INDEX).getAmount();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new TransactionException(\"Index is out of transaction list range\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 11,
      "BrianTKM": 180,
      "shamussy": 67
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/exception/TransactionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.transaction.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class TransactionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new TransactionException object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public TransactionException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Class that handles reading and writing tasks from and to disk."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads tasks from this instance\u0027s path, one task per line during startup of Duke to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * reload last saved state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return An ArrayList of strings, each string representing a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException If the file does not exist or is otherwise inaccessible."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e out \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            out.add(sc.nextLine());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes the given string representations of tasks to this instance\u0027s path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Happens when a modification to any task occurs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param lines The lines to be written, produced by TaskList\u0027s export() method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException If an error occurs while writing the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeFile(ArrayList\u003cString\u003e lines) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new File(\"data/\").mkdirs(); //creates directory if it does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.write(line + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/owlmoney/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Ui handles messages shown to the user of this application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * It does not need to be instantiated with any tasks; these are passed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * as arguments to its methods."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message line to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param msg The message to print."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a greeting message to the user, which happens at startup."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void greet(String username) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Welcome \" + username + \"!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"Hello! I\u0027m OwlMoney\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        printMessage(\"What can I do for you?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prompts the user for a username on first instance of running this program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void firstTimeRun() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Please enter a username:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message with the given content."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param exceptionMessage The specifics of the error."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printError(String exceptionMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        printMessage(\"☹ OOPS!!! \" + exceptionMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 6,
      "shamussy": 5,
      "-": 34
    }
  }
]
