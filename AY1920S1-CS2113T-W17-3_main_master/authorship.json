[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "group \u0027seedu.OwlMoney\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00271.0.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.5.1\u0027)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveBaseName \u003d \"OwlMoney\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    mainClassName \u003d \"owlmoney.Main\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/owlmoney/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The main class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class Main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseCommand parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    //private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Initializes a new OwlMoney session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Main() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parser \u003d new ParseCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        /*storage \u003d new Storage(\"data/data.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Could not read tasks from disk, will start with empty file\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Starts up the initialized OwlMoney session."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        boolean hasExited \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //Temporary do this chunk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.firstTimeRun();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String username \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile \u003d new Profile(username);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.greet(profile.getUsername());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        // until above this line"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (parser.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Command command \u003d parser.parseLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                command.execute(profile, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (ParserException exceptionMessage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(exceptionMessage.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 8,
      "shamussy": 55
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void execute(Profile profile, Ui ui);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 8
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/PlaceHolderEmptyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class PlaceHolderEmptyCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public PlaceHolderEmptyCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.message \u003d \"Execute command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 14,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/AddSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddSavingsCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double income;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //this is a rough coding to provide the function temporarily"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //need to properly structure in future"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //might need to recode"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddSavingsCommand(String name, double income, double amount) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank newSaving \u003d new Saving(this.name, this.amount, this.income);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //newSaving.getDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewBank(newSaving, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 26,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/DeleteSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteSavingsCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteSavingsCommand(String bankName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.deleteBank(this.bankName, ui);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 15,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/ListSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListSavingsCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListSavingsCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.listBanks(ui);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 13,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/exception/commandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class commandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/expenditure/AddExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.command.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //this is a rough coding to provide the function temporarily"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //need to properly structure in future"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //might need to recode"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public AddExpenditureCommand(String name, double amount, String date, String description, String category) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Expenditure newExp \u003d new Expenditure(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewExpenditure(accName, newExp, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 26,
      "BrianTKM": 3,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/expenditure/DeleteExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteExpenditureCommand(int number, String bankName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d number;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d bankName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.deleteExpenditure(this.expNumber, this.from, ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 16,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/expenditure/ListExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListExpenditureCommand(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.listExpenditure(accName, ui);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 14,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the first instance of parsing user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user has entered."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseCommand extends Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseType parseType \u003d new ParseType();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] COMMAND_KEYWORDS \u003d new String[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            {\"/help\", \"/undo\", \"/add\", \"/edit\", \"/delete\", \"/list\", \"/find\", \"/transfer\", \"/exit\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_KEYWORD_LISTS \u003d Arrays.asList(COMMAND_KEYWORDS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if there are any more user input if using I/O redirection."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a boolean true when there are more inputs and false when no more input is detected."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Takes in the user input and checks if it is blank first before extracting the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command extracted is then check against a whitelist before removing it from the input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command then determines which command to execute."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a Command object that is required to be executed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if command is not in the whitelist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command parseLine() throws ParserException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parseIsBlank(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String command \u003d parseFirstField(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!COMMAND_KEYWORD_LISTS.contains(command)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \" is an invalid command\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String data \u003d removeFirstField(input, command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseCommandMenu(command, data);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user input is full of spaces or is empty."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if it is blank or full of spaces."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void parseIsBlank(String input) throws ParserException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Input cannot be blank or space-bar only\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command menu determines what type of command to execute and pass to parseType."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted with parseFirstField."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data The data that has command removed from the first field."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The Command object that is required to be executed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException When an invalid command is detected."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //for now is pass profile all the way in. Double check if is correct structure"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseCommandMenu(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/add\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You added\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/delete\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You deleted\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/edit\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You edited\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/list\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"You listed\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid command\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 8,
      "shamussy": 82
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseRawData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the third layer of parsing for raw data after removing command and type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This forms the baseline raw data parsing that specific data level parsers can extend from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseRawData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final int NEXT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts specific keyword values."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data        The raw data that requires parsing to extract keyword values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keyword     The keyword that we want to extract."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keywordList The list of keywords that are available in the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The extracted keyword value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if duplicated keywords are detected."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String extractParameter(String data, String keyword, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] splitTypeSpecificArguments \u003d data.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String parameter \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkDuplicateKeywords(splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int startIndex \u003d findStartIndex(splitTypeSpecificArguments, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (startIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int endIndex \u003d findEndIndex(startIndex, splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            parameter \u003d concatenateParameter(startIndex, endIndex, splitTypeSpecificArguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkDuplicateKeywords(String[] splitArray, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordList.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            checkEachKeyword(keywordList[i], splitArray);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkEachKeyword(String keyword, String[] splitArray) throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int keywordCounter \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c splitArray.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitArray[i].equals(keyword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                keywordCounter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (keywordCounter \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"Duplicate \" + keyword + \" found!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findStartIndex(String[] splitTypeSpecificArguments, String keyword) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitTypeSpecificArguments[i].equals(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findEndIndex(int startIndex, String[] splitTypeSpecificArguments, String[] keywordList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            for (int k \u003d 0; k \u003c keywordList.length; k++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (splitTypeSpecificArguments[i].equals(keywordList[k])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return splitTypeSpecificArguments.length;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String concatenateParameter(int startIndex, int endIndex, String[] splitTypeSpecificArguments) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        StringBuilder individualParameter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (individualParameter.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(\" \").append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return individualParameter.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 62,
      "shamussy": 23
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.PlaceHolderEmptyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.ListSavingsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.expenditure.ParseAddExpenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.expenditure.ParseDeleteExpenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.expenditure.ParseListExpenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.saving.ParseAddSaving;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.saving.ParseDeleteSaving;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.saving.ParseEditSaving;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the second layer of parsing for secondary category of command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user desires after specifying the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class ParseType extends Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * List of whitelisted keywords that the user can use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] TYPE_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/savings\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/investment\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/expenditure\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/goals\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/card\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/recurexpenditure\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/bonds\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/profile\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e TYPE_KEYWORD_LISTS \u003d Arrays.asList(TYPE_KEYWORDS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Determines the type of command and checks if it is of valid type."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * After determining that it is of a legal type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The type is extracted just like how the first field was extracted when extracting command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command previously extracted from the first field of user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data    The remaining user input string with command removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The raw data left with command and type removed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user specified an invalid type."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Command parseData(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String type \u003d parseFirstField(data);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!TYPE_KEYWORD_LISTS.contains(type)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(type + \" is an invalid type\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String rawData;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (command.equals(\"/list\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeListFirstField(data, type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeFirstField(data, type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseTypeMenu(command, type, rawData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user wants to delete profile."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The extracted first field from the initial user input that determines the command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user wants to delete his profile."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void isDeleteProfile(String command) throws ParserException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (command.equals(\"/delete\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Profile cannot be deleted\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The parseTypeMenu determines what type of command object to generate based on the command and type."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted from the initial first field."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type    The type of command extracted from the subsequent first field after first layer of parsing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rawData The remaining data after removing command and type."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The command object that is required to be executed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException when an invalid type if specified."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseTypeMenu(String command, String type, String rawData) throws ParserException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/profile\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            isDeleteProfile(command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You are at profile\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(rawData);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/savings\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You are at savings\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(rawData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ParseAddSaving parseAddSaving \u003d new ParseAddSaving(rawData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.fillHashTable();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.checkParameter();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseAddSaving.getCommand(); //placeholder name to run the command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ParseEditSaving parseEditSaving \u003d new ParseEditSaving(rawData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.fillHashTable();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.checkParameter();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeleteSaving parseDeleteSaving \u003d new ParseDeleteSaving(rawData);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.fillHashTable();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.checkParameter();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseDeleteSaving.getCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return new ListSavingsCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/investment\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You are at investment\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(rawData);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/expenditure\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You are at expenditure\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(rawData);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                ParseAddExpenditure addExp \u003d new ParseAddExpenditure(rawData);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.fillHashTable();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.checkParameter();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addExp.getCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseListExpenditure listExp \u003d new ParseListExpenditure(rawData);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.fillHashTable();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.checkParameter();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listExp.getCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeleteExpenditure deleteExp \u003d new ParseDeleteExpenditure(rawData);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.fillHashTable();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.checkParameter();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteExp.getCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String[] expenditureArguments \u003d new String[] {\"/amount\", \"/from\", \"/date\", \"/category\", \"/description\"};"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            ParseRawData anythingFirst \u003d new ParseRawData();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(anythingFirst.extractParameter(rawData,\"/amount\", expenditureArguments));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/card\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(\"You are at card\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            System.out.println(rawData);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 6,
      "BrianTKM": 40,
      "TerenceTanWT": 14,
      "shamussy": 91
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parser class which provides methods that more specific parser classes will require."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "abstract class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int SPACE_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts the first field of the string based on the first space detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The input entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The first element of the input string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String parseFirstField(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return inputSplit[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the first field from the input string after extracting it with parseFirstField."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //added /test to list all banks for testing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String removeFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (firstField.equals(\"/exit\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String removeListFirstField(String input, String firstField) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (firstField.equals(\"/savings\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 9,
      "shamussy": 41
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/exception/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * ParserException that extends Exception and handles all exception that parser would throw."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new parserException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 28
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/expenditure/ParseAddExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.command.expenditure.AddExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseAddExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ParseAddExpenditure(String data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        // Getting an iterator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (EXPNO.equals(key) \u0026\u0026 !value.isBlank() \u0026\u0026 !value.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \"cannot be used when adding a new expenditure\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (!EXPNO.equals(key) \u0026\u0026 !CATEGORY.equals(key) \u0026\u0026"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(CATEGORY, \"miscellaneous\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkIfDouble(value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //current name is just a place holder. This is to create the command and execute it"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    //might need to restructure in future"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddExpenditureCommand newAddExpenditureCommand \u003d new AddExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                Double.parseDouble(expendituresParameters.get(AMOUNT)), (expendituresParameters.get(DATE)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                (expendituresParameters.get(DESCRIPTION)), (expendituresParameters.get(CATEGORY)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddExpenditureCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 34,
      "BrianTKM": 8,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/expenditure/ParseDeleteExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.expenditure.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseDeleteExpenditure(String data) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        // Getting an iterator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (EXPNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //current name is just a place holder. This is to create the command and execute it"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //might need to restructure in future"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteExpenditureCommand newDeleteExpenditureCommand \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new DeleteExpenditureCommand(Integer.parseInt(expendituresParameters.get(EXPNO)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        expendituresParameters.get(FROM));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteExpenditureCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 36,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/expenditure/ParseExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public abstract class ParseExpenditure {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    HashMap\u003cString, String\u003e expendituresParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    String rawData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    static final String[] SAVINGS_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/name\", \"/amount\", \"/date\", \"/description\", \"/category\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            \"/from\", \"/expno\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String DESCRIPTION \u003d \"/description\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String CATEGORY \u003d \"/category\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String EXPNO \u003d \"/expno\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseExpenditure(String data) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(CATEGORY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                parseRawData.extractParameter(rawData, CATEGORY, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(FROM,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(EXPNO,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, EXPNO, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    void checkIfDouble(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Double value \u003d Double.parseDouble(valueString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new ParserException(\"Amount can only be numbers with at most 2 decimal places\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 40,
      "BrianTKM": 7,
      "shamussy": 4
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/expenditure/ParseListExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.expenditure.ListExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseListExpenditure(String data) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        // Getting an iterator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //current name is just a place holder. This is to create the command and execute it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //might need to restructure in future"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListExpenditureCommand newListExpenditureCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new ListExpenditureCommand(expendituresParameters.get(FROM));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListExpenditureCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 32,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseAddSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.AddSavingsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseAddSaving extends ParseSaving {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseAddSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        // Getting an iterator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding savings account\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (INCOME.equals(key) || AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                checkIfDouble(key, value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //current name is just a place holder. This is to create the command and execute it"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //might need to restructure in future"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddSavingsCommand newAddSavingsCommand \u003d new AddSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(INCOME)),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(AMOUNT)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddSavingsCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 10,
      "TerenceTanWT": 27,
      "shamussy": 5
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseDeleteSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.DeleteSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteSaving extends ParseSaving {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(AMOUNT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(INCOME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        checkRedundantParameter(NEW_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        // Getting an iterator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //this is temporary. need to amend"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //for now just checking the name field"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting savings account\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteSavingsCommand newDeleteSavingsCommand \u003d new DeleteSavingsCommand(savingsParameters.get(NAME));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteSavingsCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 32,
      "shamussy": 6
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseEditSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseEditSaving extends ParseSaving {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public ParseEditSaving(String data) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        // Getting an iterator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/name\".equals(key)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (value.isEmpty() || value.isBlank()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (!value.isEmpty() \u0026\u0026 !value.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    changeCounter++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    if (INCOME.equals(key) || AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        checkIfDouble(key, value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 37,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public abstract class ParseSaving {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    HashMap\u003cString, String\u003e savingsParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] SAVINGS_KEYWORD \u003d new String[] {\"/amount\", \"/income\", \"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String INCOME \u003d \"/income\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    ParseSaving(String data) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkRedundantParameter(String parameter) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Add savings should not contain \" + parameter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(INCOME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, INCOME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NAME,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void checkIfDouble(String key, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            Double value \u003d Double.parseDouble(valueString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(key + \" can only be numbers with at most 2 decimal places\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 36,
      "shamussy": 12
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/regex/RegexUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.regex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Regex is used to validate user input to make sure it satisfies constraints set for user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public final class RegexUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether amount input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckMoney(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,9}(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the interest rate entered is within the 100% limit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 3 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 100%."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckInterestRate(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,3}(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 100.00);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the credit card cashback rate entered is within the 20% limit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 2 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 20%."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckCashbackRate(String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,2}(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 20.00);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is numeric and is within the 9 digit constraints with no decimals."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckListNumber(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String listRegex \u003d \"^[1-9]\\\\d{0,8}$\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(listRegex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 30 characters only."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckName(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String nameRegex \u003d \"^[a-zA-Z0-9 ]{1,30}$\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(nameRegex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 50 characters only."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDescription(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String descriptionRegex \u003d \"^[a-zA-Z0-9 ]{1,50}$\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(descriptionRegex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether user input days is less than or equal to 365 days limit set for short term goals."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDay(String input) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String dayRegex \u003d \"^[1-9]\\\\d{0,2}$\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(dayRegex)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int parsedDay \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedDay \u003c\u003d 365);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if date is in DD/MM/YYYY format from year 1900 to 2099."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * It does not check for whether the month has 30 or 31 days or whether february is a leap year."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDateFormat(String input) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateRegex \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(dateRegex);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 121
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Bank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The Bank class which is abstract where various bank types will inherit from given that it is abstract."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Bank {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String accountName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double currentAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that allows the child class to create an instance with name and current amount."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          A name of the bank account."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The amount of money in the bank on initial creation."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Bank(String name, double currentAmount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d currentAmount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the account name of the instance of the bank account."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The accountName of the bank account."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getAccountName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.accountName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money in the instance of the bank account."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The currentAmount of money in the bank account."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getCurrentAmount() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.currentAmount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the details of the bank account which consist of name and amount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return accountName and currentAmount."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Account name: \" + accountName + \"\\nCurrent Amount: \" + currentAmount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void addInExpenditure(Expenditure exp, Ui ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void listAllExpenditure(Ui ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void deleteExpenditure(int exNum, Ui ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 4,
      "BrianTKM": 22,
      "shamussy": 31
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/BankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The BankList class that provides a layer of abstraction for the ArrayList that stores bank accounts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class BankList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cBank\u003e bankLists;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates an arrayList of Banks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public BankList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists \u003d new ArrayList\u003cBank\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the name of the bank account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankListIndex The index of the bank account in the arrayList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The name of the bank account."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //for testing in case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getBankName(int bankListIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return bankLists.get(bankListIndex).getAccountName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the list of all bank accounts in the BankList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBanks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"No bank account\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an instance of a bank account into the BankList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank a new bank object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addBank(Bank newBank, Ui ui) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists.add(newBank);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added new bank: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(newBank.getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an instance of a bank account from the BankList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the bank account."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //need to SLAP"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteBank(String bankName, Ui ui) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are 0 bank accounts in your profile\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    ui.printMessage(\"Removing \" + bankLists.get(i).getAccountName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.remove(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to a bank account."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * This will store the expenditure in the ExpenditureList in the bank account."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName The Bank account name."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     The instance of the expenditure."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //need change exception class in the future for this"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addExpenditure(String accName, Expenditure exp, Ui ui) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addInExpenditure(exp, ui);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"There are no account named :\" + accName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all bank accounts in the BankList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBankAccount(Ui ui) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are 0 saving accounts.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printMessage((i + 1) + \".\\n\" + bankLists.get(i).getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all expenditure tied to a bank account."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankToList The bank account name."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBankExpenditure(String bankToList, Ui ui) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllExpenditure(ui);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure from the expenditureList in the bank account."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expNum         The expenditure number."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deleteFromBank The name of the bank account."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui             required for printing."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteExp(int expNum, String deleteFromBank, Ui ui) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (deleteFromBank.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).deleteExpenditure(expNum, ui);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + deleteFromBank);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 10,
      "BrianTKM": 78,
      "shamussy": 56
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Saving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.expenditure.ExpenditureList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * A savings account class that extends a normal bank account."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Saving extends Bank {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private double income;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private ExpenditureList myExpenditure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates an instance of a savings account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          The name of the bank account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The current amount of money in  the bank account."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param income        The amount of money that is credited monthly into the account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Saving(String name, double currentAmount, double income) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(name, currentAmount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        type \u003d SAVING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        myExpenditure \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the bank accounts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the description of the bank account which includes income and type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return super.getDescription() + \"\\nIncome: \" + income + \"\\nType: \" + type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to this instance of the bank account."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of expenditure."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addInExpenditure(Expenditure exp, Ui ui) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        myExpenditure.addToList(exp, ui);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all expenditure tied to this bank account."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listAllExpenditure(Ui ui) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        myExpenditure.listExpenditure(ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to this bank account."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exId The id of the expenditure in ExpenditureList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteExpenditure(int exId, Ui ui) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        myExpenditure.deleteFromList(exId, ui);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 11,
      "BrianTKM": 28,
      "shamussy": 34
    }
  },
  {
    "path": "src/main/java/owlmoney/model/expenditure/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The Expenditure class that stores details of each expenditure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates an instance of a expenditure object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param description The description that describes this expenditure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount      The amount of money spent in this instance of expenditure."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date        The date when this expenditure was made."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param category    The category that this expenditure can be tagged to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Expenditure(String description, double amount, String date, String category) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money spent in this transaction."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The amount of money spent in this transaction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the instance of expenditure."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The description of the expenditure."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date that this expenditure was made."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The date that the expenditure was made."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of that the expenditure was tagged to."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The category of the expenditure that it was tagged to."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getDetails() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return \"Description: \" + this.description + \"\\nAmount: \" + this.amount + \"\\nDate: \" + this.date.toString()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + \"\\nCategory: \" + category;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 20,
      "BrianTKM": 4,
      "shamussy": 45
    }
  },
  {
    "path": "src/main/java/owlmoney/model/expenditure/ExpenditureList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "package owlmoney.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The ExpenditureList class that provides a layer of abstraction for the ArrayList that stores expenditures."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ExpenditureList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private ArrayList\u003cExpenditure\u003e expLists;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates an arrayList of expenditures."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ExpenditureList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expLists \u003d new ArrayList\u003cExpenditure\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the expenditure in the expenditureList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listExpenditure(Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"no expenditure found!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d 0; i \u003c expLists.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage((i + 1) + \":\\n\" + expLists.get(i).getDetails());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure to the expenditureList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of an expenditure."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addToList(Expenditure exp, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expLists.add(exp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added expenditure:\\n\" + exp.getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure to the expenditureList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param index index of the expenditure in the expenditureList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //magic int used. change next time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteFromList(int index, Ui ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are no expenditures in this bank\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - 1) \u003e\u003d 0 \u0026\u0026 (index - 1) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Expenditure temp \u003d expLists.get(index - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.remove(index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printMessage(\"Expenditure deleted:\" + temp.getDetails());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Out of expenditure list range\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 22,
      "BrianTKM": 22,
      "shamussy": 24
    }
  },
  {
    "path": "src/main/java/owlmoney/model/profile/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.BankList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The profile class that stores details of the user which includes bank accounts, cards, names."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private BankList bankList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates a new instance of the user profile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newUserName The username that the user desires to use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Profile(String newUserName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.username \u003d newUserName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankList \u003d new BankList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the username of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The username of the profile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new bank account into the BankList stored in this profile."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank an instance of the new bank account."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addNewBank(Bank newBank, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addBank(newBank, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes a bank account from the BankList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the Bank account."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteBank(String bankName, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.deleteBank(bankName, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all the bank accounts in the BankList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBanks(Ui ui) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankAccount(ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new expenditure tied to a specific bank account."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName The name of the bank account."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     An expenditure object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addNewExpenditure(String accName, Expenditure exp, Ui ui) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addExpenditure(accName, exp, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to a specific bank account."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expIndex The index of the expenditure in the expenditureList tied to a specific bank account."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName The name of the bank account."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteExpenditure(int expIndex, String bankName, Ui ui) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.deleteExp(expIndex, bankName, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all expenditure tied to a bank account."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param listedBank The bank account name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listExpenditure(String listedBank, Ui ui) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankExpenditure(listedBank, ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 6,
      "BrianTKM": 37,
      "shamussy": 52
    }
  },
  {
    "path": "src/main/java/owlmoney/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Class that handles reading and writing tasks from and to disk."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads tasks from this instance\u0027s path, one task per line during startup of Duke to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * reload last saved state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return An ArrayList of strings, each string representing a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException If the file does not exist or is otherwise inaccessible."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e out \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            out.add(sc.nextLine());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes the given string representations of tasks to this instance\u0027s path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Happens when a modification to any task occurs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param lines The lines to be written, produced by TaskList\u0027s export() method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException If an error occurs while writing the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeFile(ArrayList\u003cString\u003e lines) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new File(\"data/\").mkdirs(); //creates directory if it does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.write(line + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/owlmoney/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Ui handles messages shown to the user of this application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * It does not need to be instantiated with any tasks; these are passed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * as arguments to its methods."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message line to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param msg The message to print."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a greeting message to the user, which happens at startup."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void greet(String username) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Welcome \" + username + \"!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"Hello! I\u0027m OwlMoney\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        printMessage(\"What can I do for you?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prompts the user for a username on first instance of running this program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void firstTimeRun() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Please enter a username:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message with the given content."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param exceptionMessage The specifics of the error."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printError(String exceptionMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        printMessage(\"☹ OOPS!!! \" + exceptionMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 6,
      "shamussy": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/owlmoney/logic/command/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Class to test the functionality of ReminderCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e stringTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private int num;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when invalid data is provided during intitialization."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_InvalidDataForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"a\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric and cannot be blank\", err.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when empty String is provided during intitialization."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_EmptyStringForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric and cannot be blank\", err.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when white space is provided during intitialization."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_WhiteSpaceForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric and cannot be blank\", err.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when a large integer value is provided during intitialization."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_largeIntegerValueForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"999999999999999999999999\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The number cannot exceed 9 digits\", err.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of tasks is return when checking for due task in next 10 day."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderfor10Days_expectOneTask() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusDays(8).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 10;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, compare.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of tasks is return when checking for due task in next 1 day."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderforOneDays_expectZeroTask() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusDays(8).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compare.size(), 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of tasks is return when checking for due task in next 0 (current) day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderforZeroDays_expectOneTask() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusHours(1).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compare.size(), 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of task is being return correctly when searching among multiple tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderForMultipleTask_expectThreeTask() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusDays(1).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 2 | 14 | \" + now.plusDays(3).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"D | 0 | 9 | meeting 3 | 14 | \" + now.plusDays(5).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 4 | 14 | \" + now.plusDays(7).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 5 | 14 | \" + now.plusDays(10).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 5;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compare.size(), 3);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 7,
      "-": 111
    }
  },
  {
    "path": "src/test/java/owlmoney/logic/command/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when input is empty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_NoDateAndIndex_throwsDukeException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Reschedule inputs cannot be blank or space.\",err.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when input does not have the correct number of fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_WrongNumberOfFields_throwsDukeException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"1 12/12/2019\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"A task, date and time must be specified.\", err.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String input2 \u003d \"1 12/12/2019 1200 1200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Invalid input.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" Reschedule format is \\\"reschedule \u003ctask number\u003e \u003cdate\u003e \u003ctime\u003e\\\"\", err.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when the task index is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_NonIntTaskIndex_throwsDukeException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"g 12/12/2019 1200\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric only\", err.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when the task index is too large."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_TooBigNumberIndex_throwsDukeException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"99999999999 12/12/2019 1200\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The number must be an integer and cannot exceed 9 digits\", err.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test if the correct exception is thrown when the date is of invalid format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_WrongDateFormat_throwsDukeException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"2 r/r/rrrr 1200\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The date format is wrong, please try in DD/MM/YYYY format\",err.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test if the date is successfully changed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleTask_SuccessfulChangeOfDate_expectChangedDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tempList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            tempList.add(Deadline.create(\"testing /by 12/12/2019 1200\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(tempList.size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String date \u003d \"11/11/2020 2345\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime formattedDate \u003d LocalDateTime.parse(date, inputFormatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            tempList.rescheduleTask(0, formattedDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error...\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][✘] testing (by: Wednesday 11 November 2020 11:45 PM)\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                tempList.get(1).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 3,
      "-": 89
    }
  },
  {
    "path": "src/test/java/owlmoney/logic/command/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e viewTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for the correct exception thrown when empty date is provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_EmptyDate_throwsDukeException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException error \u003d assertThrows(DukeException.class, () -\u003e new ViewCommand(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The time cannot be empty or space bar\", error.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for the correct exception thrown when invalid format date is provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_InvalidFormatDate_throwsDukeException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"05/25/2019\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException error \u003d assertThrows(DukeException.class, () -\u003e new ViewCommand(input));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The date format is wrong/invalid, please try in DD/MM/YYYY format\", error.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct exception thrown when a non-existent date is provided."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_InvalidDate_throwsDukeException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"31/04/2019\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException error \u003d assertThrows(DukeException.class, () -\u003e new ViewCommand(input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"This date doesn\u0027t exist in the calendar!\", error.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for the correct number of tasks return when there is no task on 1/10/2019."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectZeroTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"T | 0 | 4 | read\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 10, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct number of tasks return when there is one task on 22/09/2019."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectOneTask() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 0 | 4 | 2113 | 14 | 22/9/2019 2359\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 9, 22);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct number of tasks (2) return on specific date despite having multiple tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * with different dates and task description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectTwoTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 0 | 4 | 2113 | 14 | 22/9/2019 2359\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 3 | run | 14 | 20/9/2019 0600\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"T | 0 | 4 | read\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 4 | comp | 14 | 22/9/2019 0600\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 9, 22);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct number of tasks return on specific date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectMultipleTasks() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 0 | 4 | 2113 | 14 | 21/9/2019 2359\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 3 | run | 14 | 21/9/2019 0600\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 1 | 4 | work | 14 | 21/9/2019 2300\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 4 | comp | 14 | 21/9/2019 0800\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 1 | 8 | carnival | 14 | 21/9/2019 1800\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 9, 21);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 5);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 7,
      "-": 103
    }
  },
  {
    "path": "src/test/java/owlmoney/model/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkDeadlineIsAfterCurrentTest_testDateBeforeCurrent_throwDukeException() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"06/06/2019 1200\", inputFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e Deadline.checkDeadlineIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Time must not be before current time\", err.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkDeadlineIsAfterCurrentTest_testDateBeforeCurrent_returnTrue() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"12/12/2999 1200\", inputFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Deadline.checkDeadlineIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/owlmoney/model/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkEventIsAfterCurrentTest_testDateBeforeCurrent_throwDukeException() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"06/06/2019 1200\", inputFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e Event.checkEventIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Time must not be before current time\", err.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkEventIsAfterCurrentTest_testDateBeforeCurrent_returnTrue() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"12/12/2999 1200\", inputFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Event.checkEventIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/owlmoney/model/task/RecurringTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests for the normal creation of a recurring task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when unable to create recurring task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createRecurringTask_normalCreation_noError() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        RecurringTask testRecurringTask \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                RecurringTask.create(\"new test recurring task /at 20/9/2019 1205\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(testRecurringTask.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \"[R][✘] new test recurring task (at: Friday 20 September 2019 12:05 PM)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests for the normal creation of a recurring task with old dates and expecting an auto update."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when unable to create recurring task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createRecurringTask_oldDate_updateDate() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime currentDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime oldDate \u003d currentDate.minusDays(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String oldDateString \u003d oldDate.format(inputFormatter).toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime expectedDate \u003d oldDate.plusDays(7);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedDateString \u003d expectedDate.format(displayFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        RecurringTask testRecurringTask \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                RecurringTask.create(\"test old recurring task date /at \" + oldDateString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(testRecurringTask.toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"[R][✘] test old recurring task date (at: \" + expectedDateString + \")\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests for the DukeException when a description is not entered even with a correct date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test void createRecurringTask_regexCheck_throwError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String wrongDate \u003d \" /at 1/1/2019 1200\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e RecurringTask.create(wrongDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The description of a recurring task cannot be \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"empty or space even when /at is correct\", err.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 54
    }
  }
]
