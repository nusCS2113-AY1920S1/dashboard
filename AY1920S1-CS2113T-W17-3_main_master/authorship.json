[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "group \u0027seedu.OwlMoney\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00271.0.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.5.1\u0027)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveBaseName \u003d \"OwlMoney\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    mainClassName \u003d \"owlmoney.Main\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/owlmoney/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.ParseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The main class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class Main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseCommand parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    //private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Initializes a new OwlMoney session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Main() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parser \u003d new ParseCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        /*storage \u003d new Storage(\"data/data.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Could not read tasks from disk, will start with empty file\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Starts up the initialized OwlMoney session."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        boolean hasExited \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //Temporary do this chunk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.firstTimeRun();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String username \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile \u003d new Profile(username);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.greet(profile.getUsername());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        // until above this line"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (parser.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Command command \u003d parser.parseLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                hasExited \u003d command.execute(profile, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (hasExited) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (ParserException exceptionMessage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(exceptionMessage.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 12,
      "shamussy": 54
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Command class which is abstract where various command types inherit from given that it is abstract."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each command type implements execution code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return True if OwlMoney should terminate after execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract boolean execute(Profile profile, Ui ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 13,
      "shamussy": 7
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ExitCommand class which contains the execution function to terminate OwlMoney."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of ExitCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to exit OwlMoney."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return true so OwlMoney will terminate after execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 29
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/PlaceHolderEmptyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class PlaceHolderEmptyCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public PlaceHolderEmptyCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.message \u003d \"Execute command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 15,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/AddSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Saving;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * AddSavingsCommand class which contains the execution function to add a new saving object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddSavingsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double income;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor that creates an instance the AddSavingCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Name of new saving object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income Income of new saving object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Initial amount of new saving object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddSavingsCommand(String name, double income, double amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to create a new saving in the profile."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Bank newSaving \u003d new Saving(this.name, this.amount, this.income);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewBank(newSaving, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 40,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/DeleteSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * DeleteSavingsCommand class which contains the execution function to delete a saving object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteSavingsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String bankName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor that creates an instance the DeleteSavingCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank name to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteSavingsCommand(String bankName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankName \u003d bankName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a saving from the profile."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.deleteBank(this.bankName, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 31,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/EditSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * EditSavingsCommand class which contains the execution function to edit a saving object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditSavingsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String income;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor that creates an instance the EditSavingCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Name of bank account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income New income of bank account if any."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of bank account if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of bank account if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditSavingsCommand(String name, String income, String amount, String newName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to edit a saving in the profile."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.editSavingsAccount(name, newName, amount, income, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 43
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/bank/ListSavingsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ListSavingsCommand class which contains the execution function to list saving objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListSavingsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to list savings in the profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.listBanks(ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 21,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/exception/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class CommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Deposit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * AddDepositCommand class which contains the execution function to add a new deposit transaction."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class AddDepositCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category \u003d \"deposit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor that creates an instance of AddDepositCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Bank account name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount deposited."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date Date of deposit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of deposit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddDepositCommand(String name, double amount, Date date, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new deposit to the bank."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newDeposit \u003d new Deposit(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewDeposit(accName, newDeposit, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 49
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/AddExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * AddExpenditureCommand class which contains the execution function to add an expenditure transaction."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of AddExpenditureCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Bank account name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount of the expenditure."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date Date of the expenditure."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of the expenditure."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category Category of the expenditure."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public AddExpenditureCommand(String name, double amount, Date date, String description, String category) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to add a new expenditure to the bank account."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction newExpenditure \u003d new Expenditure(this.description, this.amount, this.date, this.category);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.addNewExpenditure(accName, newExpenditure, ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 18,
      "BrianTKM": 31,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * DeleteDepositCommand class which contains the execution function to delete a deposit transaction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteDepositCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of DeleteDepositCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteDepositCommand(String bankName, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d bankName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.deleteDeposit(this.expNumber, this.from, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 36
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/DeleteExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * DeleteExpenditureCommand class which contains the execution function to delete an expenditure."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class DeleteExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int expNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of a DeleteExpenditureCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public DeleteExpenditureCommand(int index, String bankName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.expNumber \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.from \u003d bankName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.deleteExpenditure(this.expNumber, this.from, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 34,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * EditDepositCommand class which contains the execution function to edit a deposit transaction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditDepositCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of EditDepositCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Bank account name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New deposit amount if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date of deposit if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of deposit if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditDepositCommand(String name, String amount, String date, String description, int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.editDeposit(index, accName, description, amount, date, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 45
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/EditExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * EditExpenditureCommand class which contains the execution function to edit an expenditure transaction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class EditExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Construction to create an instance of EditExpenditureCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Bank account name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of expenditure if any."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date of expenditure if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description New description of expenditure if any."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of expenditure if any."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public EditExpenditureCommand(String name, String amount, String date, String description, String category,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.editExpenditure(index, accName, description, amount, date, category, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 50
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListDepositCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ListDepositCommand class which contains the execution function to list deposits."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ListDepositCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of ListDepositCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Bank account name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListDepositCommand(String name, int displayNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.listDeposit(accName, ui, displayNum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 36
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/command/transaction/ListExpenditureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.command.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.profile.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ListExpenditureCommand class which contains the execution function to list expenditures."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final String accName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private final int displayNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor to create an instance of ListExpenditureCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Bank account name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ListExpenditureCommand(String name, int displayNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accName \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.displayNum \u003d displayNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Executes the function to delete a deposit transaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return false so OwlMoney will not terminate yet."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public boolean execute(Profile profile, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        profile.listExpenditure(accName, ui, displayNum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 33,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the first instance of parsing user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user has entered."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseCommand extends Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseType parseType \u003d new ParseType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] COMMAND_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/help\", \"/undo\", \"/add\", \"/edit\", \"/delete\", \"/list\", \"/find\", \"/transfer\", \"/exit\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_KEYWORD_LISTS \u003d Arrays.asList(COMMAND_KEYWORDS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if there are any more user input if using I/O redirection."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a boolean true when there are more inputs and false when no more input is detected."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Takes in the user input and checks if it is blank first before extracting the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command extracted is then check against a whitelist before removing it from the input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command then determines which command to execute."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return a Command object that is required to be executed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if command is not in the whitelist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command parseLine() throws ParserException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parseIsBlank(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String command \u003d parseFirstField(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!COMMAND_KEYWORD_LISTS.contains(command)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(command + \" is an invalid command\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String data \u003d removeFirstField(input, command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseCommandMenu(command, data);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user input is full of spaces or is empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if it is blank or full of spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void parseIsBlank(String input) throws ParserException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Input cannot be blank or space-bar only\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The command menu determines what type of command to execute and pass to parseType."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted with parseFirstField."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data The data that has command removed from the first field."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The Command object that is required to be executed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException When an invalid command is detected."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseCommandMenu(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/add\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/delete\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/edit\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/list\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return parseType.parseData(command, data);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/exit\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"You entered an invalid command\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 11,
      "shamussy": 76
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseRawData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the third layer of parsing for raw data after removing command and type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This forms the baseline raw data parsing that specific data level parsers can extend from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParseRawData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static final int NEXT_INDEX \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts specific keyword values."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data        The raw data that requires parsing to extract keyword values."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keyword     The keyword that we want to extract."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param keywordList The list of keywords that are available in the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The extracted keyword value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if duplicated keywords are detected."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String extractParameter(String data, String keyword, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] splitTypeSpecificArguments \u003d data.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String parameter \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        checkDuplicateKeywords(splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int startIndex \u003d findStartIndex(splitTypeSpecificArguments, keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (startIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int endIndex \u003d findEndIndex(startIndex, splitTypeSpecificArguments, keywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            parameter \u003d concatenateParameter(startIndex, endIndex, splitTypeSpecificArguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return parameter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkDuplicateKeywords(String[] splitArray, String[] keywordList) throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordList.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            checkEachKeyword(keywordList[i], splitArray);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private void checkEachKeyword(String keyword, String[] splitArray) throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int keywordCounter \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c splitArray.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitArray[i].equals(keyword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                keywordCounter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (keywordCounter \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"Duplicate \" + keyword + \" found!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findStartIndex(String[] splitTypeSpecificArguments, String keyword) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (splitTypeSpecificArguments[i].equals(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private int findEndIndex(int startIndex, String[] splitTypeSpecificArguments, String[] keywordList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c splitTypeSpecificArguments.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            for (int k \u003d 0; k \u003c keywordList.length; k++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (splitTypeSpecificArguments[i].equals(keywordList[k])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return splitTypeSpecificArguments.length;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String concatenateParameter(int startIndex, int endIndex, String[] splitTypeSpecificArguments) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        StringBuilder individualParameter \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d startIndex + NEXT_INDEX; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (individualParameter.toString().isEmpty() || individualParameter.toString().isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                individualParameter.append(\" \").append(splitTypeSpecificArguments[i]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return individualParameter.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 1,
      "TerenceTanWT": 61,
      "shamussy": 23
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/ParseType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.PlaceHolderEmptyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.ListSavingsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.saving.ParseSaving;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseAddDeposit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseDeleteDeposit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseDeposit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseEditDeposit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.deposit.ParseListDeposit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseAddExpenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseDeleteExpenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseEditExpenditure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseExpenditure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.transaction.expenditure.ParseListExpenditure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.saving.ParseAddSaving;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.saving.ParseDeleteSaving;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.saving.ParseEditSaving;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Represents the second layer of parsing for secondary category of command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * This determines what type of command the user desires after specifying the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class ParseType extends Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * List of whitelisted keywords that the user can use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] TYPE_KEYWORDS \u003d new String[] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/savings\", \"/investment\", \"/expenditure\", \"/goals\", \"/card\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/recurexpenditure\", \"/bonds\", \"/profile\", \"/deposit\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final List\u003cString\u003e TYPE_KEYWORD_LISTS \u003d Arrays.asList(TYPE_KEYWORDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Determines the type of command and checks if it is of valid type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * After determining that it is of a legal type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The type is extracted just like how the first field was extracted when extracting command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command previously extracted from the first field of user input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param data    The remaining user input string with command removed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The raw data left with command and type removed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user specified an invalid type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Command parseData(String command, String data) throws ParserException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String type \u003d parseFirstField(data);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!TYPE_KEYWORD_LISTS.contains(type)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(type + \" is an invalid type\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String rawData;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeListFirstField(data, type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            rawData \u003d removeFirstField(data, type);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return parseTypeMenu(command, type, rawData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if the user wants to delete profile."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The extracted first field from the initial user input that determines the command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the user wants to delete his profile."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void isDeleteProfile(String command) throws ParserException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Profile cannot be deleted\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The parseTypeMenu determines what type of command object to generate based on the command and type."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param command The command extracted from the initial first field."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param type    The type of command extracted from the subsequent first field after first layer of parsing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param rawData The remaining data after removing command and type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The command object that is required to be executed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException when an invalid type if specified."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseTypeMenu(String command, String type, String rawData) throws ParserException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/profile\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            isDeleteProfile(command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/savings\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseAddSaving \u003d new ParseAddSaving(rawData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.fillHashTable();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseAddSaving.checkParameter();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseAddSaving.getCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseEditSaving \u003d new ParseEditSaving(rawData);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.fillHashTable();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseEditSaving.checkParameter();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseEditSaving.getCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseSaving parseDeleteSaving \u003d new ParseDeleteSaving(rawData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.fillHashTable();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseDeleteSaving.checkParameter();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return parseDeleteSaving.getCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return new ListSavingsCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/investment\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/expenditure\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseExpenditure addExp \u003d new ParseAddExpenditure(rawData);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.fillHashTable();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                addExp.checkParameter();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addExp.getCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseExpenditure listExp \u003d new ParseListExpenditure(rawData);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.fillHashTable();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listExp.checkParameter();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listExp.getCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseExpenditure deleteExp \u003d new ParseDeleteExpenditure(rawData);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.fillHashTable();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteExp.checkParameter();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteExp.getCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseExpenditure editExp \u003d new ParseEditExpenditure(rawData);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editExp.fillHashTable();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editExp.checkParameter();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editExp.getCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        case \"/deposit\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"/add\".equals(command)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit addDep \u003d new ParseAddDeposit(rawData);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addDep.fillHashTable();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                addDep.checkParameter();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return addDep.getCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/list\".equals(command)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit listDep \u003d new ParseListDeposit(rawData);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listDep.fillHashTable();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                listDep.checkParameter();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return listDep.getCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/delete\".equals(command)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit deleteDep \u003d new ParseDeleteDeposit(rawData);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteDep.fillHashTable();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                deleteDep.checkParameter();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return deleteDep.getCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (\"/edit\".equals(command)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ParseDeposit editDep \u003d new ParseEditDeposit(rawData);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editDep.fillHashTable();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                editDep.checkParameter();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return editDep.getCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"/card\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return new PlaceHolderEmptyCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"You entered an invalid type\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 83,
      "TerenceTanWT": 9,
      "shamussy": 71
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Parser class which provides methods that more specific parser classes will require."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "abstract class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final int SPACE_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Extracts the first field of the string based on the first space detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The input entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The first element of the input string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String parseFirstField(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return inputSplit[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Removes the first field from the input string after extracting it with parseFirstField."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String removeFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/exit\".equals(firstField)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Modified method which removes the first field from the input string after extracting it"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * with parseFirstField if the command is List."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param input      The input entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param firstField The firstField extracted by parseFirstField."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return The string after removing firstField."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException if the command is not entered to specific requirements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String removeListFirstField(String input, String firstField) throws ParserException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (\"/savings\".equals(firstField)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (firstField.length() + SPACE_LENGTH \u003c input.length()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return input.substring(firstField.length() + SPACE_LENGTH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incomplete command provided\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 20,
      "shamussy": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/exception/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * ParserException that extends Exception and handles all exception that parser would throw."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Creates a new parserException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param message The exception message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParserException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Converts any exception messages to string format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The corresponding message in string format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 28
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseAddSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.AddSavingsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for adding a new saving."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseAddSaving extends ParseSaving {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseAddSaving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw data of user input to be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there is a redundant parameter or first parameter is not a valid type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseAddSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NEW_NAME, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid or missing input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!NEW_NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding savings account\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (INCOME.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkIncome(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the adding of a new saving."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return AddSavingsCommand to be executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddSavingsCommand newAddSavingsCommand \u003d new AddSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(INCOME)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(savingsParameters.get(AMOUNT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddSavingsCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 40,
      "TerenceTanWT": 24,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseDeleteSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.DeleteSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for deleting a saving."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteSaving extends ParseSaving {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseDeleteSaving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if the first parameter is not valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ParseDeleteSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(INCOME, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NEW_NAME, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when deleting savings account\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME,value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deleting of a saving."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return DeleteSavingsCommand to be executed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteSavingsCommand newDeleteSavingsCommand \u003d new DeleteSavingsCommand(savingsParameters.get(NAME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteSavingsCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 56,
      "shamussy": 3
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseEditSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.bank.EditSavingsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a saving."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class ParseEditSaving extends ParseSaving {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseEditSaving."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditSaving(String data) throws ParserException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are any invalid or missing inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d savingsParameters.keySet().iterator();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String value \u003d savingsParameters.get(key);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NAME.equals(key) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new ParserException(\"/name cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NAME.equals(key)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NAME, value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (INCOME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkIncome(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NEW_NAME.equals(key) \u0026\u0026 !(value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(NEW_NAME, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a saving."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns EditSavingsCommand to be executed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditSavingsCommand newEditSavingsCommand \u003d new EditSavingsCommand(savingsParameters.get(NAME),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                savingsParameters.get(INCOME), savingsParameters.get(AMOUNT), savingsParameters.get(NEW_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditSavingsCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 43,
      "TerenceTanWT": 27
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/saving/ParseSaving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "package owlmoney.logic.parser.saving;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ParseSaving class which is abstract where various savings parser objects inherit from given that it is abstract."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public abstract class ParseSaving {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    HashMap\u003cString, String\u003e savingsParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final String[] SAVINGS_KEYWORD \u003d new String[] {\"/amount\", \"/income\", \"/name\", \"/newname\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String INCOME \u003d \"/income\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NAME \u003d \"/name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    static final String NEW_NAME \u003d \"/newname\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e SAVINGS_KEYWORD_LISTS \u003d Arrays.asList(SAVINGS_KEYWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    ParseSaving(String data) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command Command the user performed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \"/savings should not contain \" + parameter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!SAVINGS_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(INCOME,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, INCOME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NAME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        savingsParameters.put(NEW_NAME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                parseRawData.extractParameter(rawData, NEW_NAME, SAVINGS_KEYWORD));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be numbers with at most 9 digits, 2 decimal places\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the income entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s income."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkIncome(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckBankAmount(valueString)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/income can only be numbers with at most 9 digits and 2 decimal places\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" and a value of at least 0\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param key /name or /newname"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String key, String nameString) throws ParserException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(key + \" can only contain letters and at most 50 characters\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser performs different checks on the parameters."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser creates different commands."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 87,
      "TerenceTanWT": 32,
      "shamussy": 8
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseAddDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddDepositCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for adding a deposit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseAddDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseAddDeposit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseAddDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(FROM, ADD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!(TRANSNO.equals(key) || NUM.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new deposit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TO.equals(key)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, TO);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new deposit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddDepositCommand to be executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddDepositCommand newAddDepositCommand \u003d new AddDepositCommand(depositParameters.get(TO),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(depositParameters.get(AMOUNT)), date,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                (depositParameters.get(DESCRIPTION)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddDepositCommand;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 71
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseDeleteDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for deleting a deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseDeleteDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseDeleteDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, DELETE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isEmpty() || value.isBlank())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new deposit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of a deposit."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionDepositCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteDepositCommand newDeleteDepositCommand \u003d new DeleteDepositCommand((depositParameters.get(FROM)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(depositParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteDepositCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ParseDeposit class which is abstract where various deposit parser objects inherit from given that it is abstract."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class ParseDeposit {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    HashMap\u003cString, String\u003e depositParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/date\", \"/desc\", \"/category\", \"/to\", \"/transno\",\"/from\", \"/num\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TO \u003d \"/to\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    ParseDeposit(String data) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command Command the user performed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /deposit should not contain \" + parameter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(DATE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(TO,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(FROM,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        depositParameters.put(NUM,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString) throws ParserException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/desc can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param variable /to or /from"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString, String variable) throws ParserException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only contain letters and at most 30 characters\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser performs different checks on the parameters."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser creates different commands."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 180
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseEditDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseEditDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, EDIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a deposit\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing a deposit\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDate(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a deposit."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditDepositCommand to be executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditDepositCommand newEditDepositCommand \u003d new EditDepositCommand(depositParameters.get(FROM),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.get(AMOUNT), depositParameters.get(DATE),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.get(DESCRIPTION), Integer.parseInt(depositParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditDepositCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 78
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/deposit/ParseListDeposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.deposit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListDepositCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for listing deposits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListDeposit extends ParseDeposit {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseListDeposit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseListDeposit(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TO, LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d depositParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d depositParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when listing deposits from a bank\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value, FROM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                depositParameters.put(key, \"30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of deposits."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListDepositCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListDepositCommand newListDepositCommand \u003d new ListDepositCommand(depositParameters.get(FROM),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(depositParameters.get(NUM)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListDepositCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseAddExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.AddExpenditureCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for adding a expenditure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ParseAddExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String ADD \u003d \"/add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseAddExpenditure."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseAddExpenditure(String data) throws ParserException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO, ADD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, ADD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are missing or invalid parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!TRANSNO.equals(key) \u0026\u0026 !NUM.equals(key) \u0026\u0026 !CATEGORY.equals(key)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 \"deposit\".equals(value)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be deposit when adding a new expenditure\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (CATEGORY.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(CATEGORY, \"miscellaneous\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d checkDate(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to add a new expenditure."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns AddExpenditureCommand to be executed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        AddExpenditureCommand newAddExpenditureCommand \u003d new AddExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Double.parseDouble(expendituresParameters.get(AMOUNT)), date,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                (expendituresParameters.get(DESCRIPTION)), (expendituresParameters.get(CATEGORY)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newAddExpenditureCommand;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 24,
      "BrianTKM": 51,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseDeleteExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for deleting an expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseDeleteExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String DELETE \u003d \"/delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseDeleteExpenditure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or if first parameter is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseDeleteExpenditure(String data) throws ParserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT, DELETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY, DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION, DELETE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE, DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, DELETE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If parameter is missing or invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if ((TRANSNO.equals(key) || FROM.equals(key)) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the deletion of an expenditure."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Returns DeletionExpenditureCommand to be executed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DeleteExpenditureCommand newDeleteExpenditureCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                new DeleteExpenditureCommand(Integer.parseInt(expendituresParameters.get(TRANSNO)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        expendituresParameters.get(FROM));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newDeleteExpenditureCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 64,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseEditExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.EditExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for editing a expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseEditExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String EDIT \u003d \"/edit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseEditExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters or first parameter is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseEditExpenditure(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(NUM, EDIT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkFirstParameter();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If user input is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        int changeCounter \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (TRANSNO.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (TRANSNO.equals(key)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(TRANSNO, value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when editing an expenditure\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (CATEGORY.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (AMOUNT.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkAmount(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DESCRIPTION.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDescription(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (DATE.equals(key) \u0026\u0026 !(value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkDate(value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                changeCounter++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (changeCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Edit should have at least 1 differing parameter to change.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the editing of a expenditure."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return EditExpenditureCommand to be executed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        EditExpenditureCommand newEditExpenditureCommand \u003d new EditExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(AMOUNT), expendituresParameters.get(DATE),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.get(DESCRIPTION), expendituresParameters.get(CATEGORY),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(TRANSNO)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newEditExpenditureCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 81
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.ParseRawData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.regex.RegexUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * ParseExpenditure class which is abstract where various expenditure parser objects inherit from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * given that it is abstract."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public abstract class ParseExpenditure {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    HashMap\u003cString, String\u003e expendituresParameters \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ParseRawData parseRawData \u003d new ParseRawData();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String rawData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String[] EXPENDITURE_KEYWORD \u003d new String[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        \"/amount\", \"/date\", \"/desc\", \"/category\", \"/from\", \"/transno\", \"/num\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final List\u003cString\u003e EXPENDITURE_KEYWORD_LISTS \u003d Arrays.asList(EXPENDITURE_KEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String AMOUNT \u003d \"/amount\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String DESCRIPTION \u003d \"/desc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    static final String CATEGORY \u003d \"/category\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String FROM \u003d \"/from\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String TRANSNO \u003d \"/transno\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    static final String NUM \u003d \"/num\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of any ParseSaving type object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input date."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    ParseExpenditure(String data) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.rawData \u003d data;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks the user input for any redundant parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param parameter Redundant parameter to check for,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param command Command the user performed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If a redundant parameter is detected."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkRedundantParameter(String parameter, String command) throws ParserException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (rawData.contains(parameter)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(command + \" /expenditure should not contain \" + parameter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the first parameter is a valid parameter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the first parameter is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkFirstParameter() throws ParserException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        String[] rawDateSplit \u003d rawData.split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!EXPENDITURE_KEYWORD_LISTS.contains(rawDateSplit[0])) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"Incorrect parameter \" + rawDateSplit[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Fills a hash table mapping each user input to each parameter."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If duplicate parameters are detected."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void fillHashTable() throws ParserException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(AMOUNT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, AMOUNT, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DATE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DATE, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(DESCRIPTION,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, DESCRIPTION, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expendituresParameters.put(CATEGORY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, CATEGORY, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(FROM,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, FROM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(TRANSNO,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, TRANSNO, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expendituresParameters.put(NUM,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                parseRawData.extractParameter(rawData, NUM, EXPENDITURE_KEYWORD));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the amount entered by the user is a double and only contains numbers."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to double as the user\u0027s amount."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not a double value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkAmount(String valueString) throws ParserException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckMoney(valueString)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/amount can only be positive numbers\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    + \" with at most 9 digits and 2 decimal places\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the transaction number or display number entered by the user is an integer."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param valueString String to be converted to integer."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string is not an integer."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkInt(String variable, String valueString) throws ParserException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckListNumber(valueString)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(variable + \" can only be a positive number with at most 9 digits\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the description entered by the user does not have special characters and is not too long."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param descString Deposit description."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the string has special characters or is too long."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkDescription(String descString) throws ParserException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckDescription(descString)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/desc can only contain numbers and letters and at most 50 characters\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the bank name entered by the user does not contain special character and not too long."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param nameString Name of bank"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the name is too long or contain special characters."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void checkName(String nameString) throws ParserException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!RegexUtil.regexCheckName(nameString)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            throw new ParserException(\"/from can only contain letters and at most 30 characters\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks if the deposit date is of valid format and not after now."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dateString Date to be checked."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Date if checks pass."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If date format is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    Date checkDate(String dateString) throws ParserException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (RegexUtil.regexCheckDateFormat(dateString)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            temp.setLenient(false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Date date;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                date \u003d temp.parse(dateString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (date.compareTo(new Date()) \u003e 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    throw new ParserException(\"/date cannot be after today\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(\"Incorrect date format.\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                        + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        throw new ParserException(\"Incorrect date format.\" + \" Date format is dd/mm/yyyy in year range of 1900-2099\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser performs different checks on the parameters."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If any parameters fail the check."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void checkParameter() throws ParserException;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method where each saving parser creates different commands."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 27,
      "BrianTKM": 152,
      "shamussy": 1
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/parser/transaction/expenditure/ParseListExpenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.logic.parser.transaction.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.command.transaction.ListExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.logic.parser.exception.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Represents the parsing of inputs for listing expenditures."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class ParseListExpenditure extends ParseExpenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String LIST \u003d \"/list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which creates an instance of ParseListExpenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param data Raw user input data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If there are redundant parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public ParseListExpenditure(String data) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(data);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(TRANSNO,LIST);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(AMOUNT,LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DATE,LIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(DESCRIPTION,LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        checkRedundantParameter(CATEGORY,LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks each user input for each parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @throws ParserException If the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void checkParameter() throws ParserException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Iterator\u003cString\u003e savingsIterator \u003d expendituresParameters.keySet().iterator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        while (savingsIterator.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String key \u003d savingsIterator.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String value \u003d expendituresParameters.get(key);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (FROM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                throw new ParserException(key + \" cannot be empty when adding a new expenditure\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (FROM.equals(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkName(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (NUM.equals(key) \u0026\u0026 (value.isBlank() || value.isEmpty())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expendituresParameters.put(NUM, \"30\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else if (NUM.equals(key)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                checkInt(NUM, value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Returns the command to execute the listing of expenditures."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return ListExpendituresCommand to be executed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command getCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ListExpenditureCommand newListExpenditureCommand \u003d new ListExpenditureCommand(expendituresParameters.get(FROM),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Integer.parseInt(expendituresParameters.get(NUM)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return newListExpenditureCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 62,
      "shamussy": 2
    }
  },
  {
    "path": "src/main/java/owlmoney/logic/regex/RegexUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.regex;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * Regex is used to validate user input to make sure it satisfies constraints set for user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public final class RegexUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether amount input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckMoney(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,9}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Checks whether bank values input by user is within the 9 digit constraints with a max of 2 decimal places."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public static boolean regexCheckBankAmount(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        final String moneyRegex \u003d \"^\\\\s*(?\u003d.*[0-9])\\\\d{1,9}(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(moneyRegex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the interest rate entered is within the 100% limit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 3 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 100%."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckInterestRate(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,3}(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 100.00);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether the credit card cashback rate entered is within the 20% limit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The first line of checks determines whether it is a 2 digit number up to 2 decimal places."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * The second line of checks determines whether it is less than 20%."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckCashbackRate(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String interestRegex \u003d \"^\\\\s*(?\u003d.*[1-9])\\\\d{1,2}(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(interestRegex)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            double parsedInput \u003d Double.parseDouble(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedInput \u003c\u003d 20.00);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is numeric and is within the 9 digit constraints with no decimals."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckListNumber(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String listRegex \u003d \"^[1-9]\\\\d{0,8}$\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(listRegex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 30 characters only."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckName(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String nameRegex \u003d \"^[a-zA-Z0-9 ]{1,30}$\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(nameRegex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether input entered by user is alphanumeric with a maximum of 50 characters only."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDescription(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String descriptionRegex \u003d \"^[a-zA-Z0-9 ]{1,50}$\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(descriptionRegex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks whether user input days is less than or equal to 365 days limit set for short term goals."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDay(String input) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        final String dayRegex \u003d \"^[1-9]\\\\d{0,2}$\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.matches(dayRegex)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int parsedDay \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return (parsedDay \u003c\u003d 365);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Checks if date is in DD/MM/YYYY format from year 1900 to 2099."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * It does not check for whether the month has 30 or 31 days or whether february is a leap year."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param input The user input that is subject to Regex checking."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the result of the check on whether it fulfills the criteria."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static boolean regexCheckDateFormat(String input) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateRegex \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return input.matches(dateRegex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 12,
      "shamussy": 120
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Bank.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The Bank class which is abstract where various bank types will inherit from given that it is abstract."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Bank {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String accountName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private double currentAmount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    TransactionList transactions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that allows the child class to create an instance with name and current amount."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          A name of the bank account."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The amount of money in the bank on initial creation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Bank(String name, double currentAmount) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d currentAmount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setAccountName(String newName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.accountName \u003d newName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setCurrentAmount(double newAmount) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount \u003d newAmount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the account name of the instance of the bank account."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The accountName of the bank account."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getAccountName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.accountName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money in the instance of the bank account."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The currentAmount of money in the bank account."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    double getCurrentAmount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.currentAmount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the details of the bank account which consist of name and amount."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return accountName and currentAmount."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Account name: \" + accountName + \"\\nType: \" + getType() + \"\\nCurrent Amount: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + new DecimalFormat(\"0.00\").format(currentAmount);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deducts from amount in bank."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount to be deducted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deductFromAmount(double amount) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount -\u003d amount;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds to amount in bank."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount to be added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addToAmount(double amount) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.currentAmount +\u003d amount;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method which adds a new expenditure to the current bank account."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exp Expenditure to be added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void addInExpenditure(Transaction exp, Ui ui);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public abstract void listAllTransaction(Ui ui);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Abstract method which deletes an expenditure from the current bank account."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param exNum Transaction number."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void deleteExpenditure(int exNum, Ui ui);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits expenditure in the current bank account."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits deposit in the current bank account."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editDepositDetails(int expNum, String desc, String amount, String date, Ui ui) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the income of the current bank."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newIncome Income to set."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setIncome(double newIncome) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        //for Saving class"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditures from the current bank."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits from the current bank."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep Deposit to add."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addDepositTransaction(Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the current bank account."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteDepositTransaction(int index, Ui ui) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"This account does not support this feature\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 2,
      "BrianTKM": 150,
      "shamussy": 31
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/BankList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The BankList class that provides a layer of abstraction for the ArrayList that stores bank accounts."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class BankList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cBank\u003e bankLists;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates an arrayList of Banks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public BankList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists \u003d new ArrayList\u003cBank\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the name of the bank account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankListIndex The index of the bank account in the arrayList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The name of the bank account."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //for testing in case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getBankName(int bankListIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return bankLists.get(bankListIndex).getAccountName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Returns the list of all bank accounts in the BankList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBanks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            System.out.println(\"No bank account\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an instance of a bank account into the BankList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank a new bank object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addBank(Bank newBank, Ui ui) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankLists.add(newBank);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added new bank: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(newBank.getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an instance of a bank account from the BankList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the bank account."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //need to SLAP"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteBank(String bankName, Ui ui) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are 0 bank accounts in your profile\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else if (bankLists.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There must be at least 1 bank account\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (bankLists.get(i).getAccountName().equals(bankName)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    ui.printMessage(\"Removing \" + bankLists.get(i).getAccountName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.remove(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the saving details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank account to be edited."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of bank account."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of bank account."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income New income of bank account."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editSavings(String bankName, String newName, String amount, String income, Ui ui) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(bankName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    \u0026\u0026 \"saving\".equals(bankLists.get(i).getType())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"Editing \" + bankLists.get(i).getAccountName() + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(newName.isEmpty() || newName.isBlank())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setAccountName(newName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setCurrentAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!(income.isEmpty() || income.isBlank())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    bankLists.get(i).setIncome(Double.parseDouble(income));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"New details of the account:\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(bankLists.get(i).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to a bank account."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * This will store the expenditure in the ExpenditureList in the bank account."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName The Bank account name."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     The instance of the expenditure."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //need change exception class in the future for this"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addExpenditure(String accName, Transaction exp, Ui ui) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addInExpenditure(exp, ui);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"There are no account named :\" + accName);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all bank accounts in the BankList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBankAccount(Ui ui) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (bankLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are 0 saving accounts.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printMessage((i + 1) + \".\\n\" + bankLists.get(i).getDescription());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all expenditure tied to a bank account."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankToList The bank account name."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBankTransaction(String bankToList, Ui ui) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllTransaction(ui);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditures in the bank account."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankToList The name of the bank account."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBankExpenditure(String bankToList, Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits in the bank account."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankToList The name of the bank account."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBankDeposit(String bankToList, Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankToList.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).listAllDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + bankToList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes an expenditure from the transactionList in the bank account."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum         The transaction number."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param deleteFromBank The name of the bank account."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui             required for printing."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteExp(int expNum, String deleteFromBank, Ui ui) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (deleteFromBank.equals(bankLists.get(i).getAccountName())) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                bankLists.get(i).deleteExpenditure(expNum, ui);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + deleteFromBank);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits an expenditure from the transactionList in the bank account."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum The transaction number."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank The name of the bank account."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc The description of the expenditure."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount The amount of the expenditure."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date The date of the expenditure."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category The category of the expenditure."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editExp(int expNum, String editFromBank, String desc, String amount, String date, String category,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Ui ui) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(editFromBank)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).editExpenditureDetails(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + editFromBank);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a deposit from the transactionList in the bank account."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum The transaction number."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank The name of the bank account."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc The description of the deposit."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount The amount of the deposit."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date The date of the deposit."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editDep(int expNum, String editFromBank, String desc, String amount, String date, Ui ui) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(editFromBank)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).editDepositDetails(expNum, desc, amount, date, ui);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + editFromBank);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a deposit tied to a bank account."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * This will store the expenditure in the transactionList in the bank account."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName The Bank account name."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep     The instance of the deposit."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui      Required for printing."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addDeposit(String accName, Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).addDepositTransaction(dep, ui);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the transactionList in the bank account."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName        The name of the bank account."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index          The transaction number."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui             required for printing."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteDeposit(String accName, int index, Ui ui) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        for (int i \u003d 0; i \u003c bankLists.size(); i++) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (bankLists.get(i).getAccountName().equals(accName)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                bankLists.get(i).deleteDepositTransaction(index, ui);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printError(\"Cannot find bank with name: \" + accName);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 8,
      "BrianTKM": 227,
      "shamussy": 52
    }
  },
  {
    "path": "src/main/java/owlmoney/model/bank/Saving.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.bank;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * A savings account class that extends a normal bank account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Saving extends Bank {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private double income;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private static final String SAVING \u003d \"saving\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates an instance of a savings account."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param name          The name of the bank account."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param currentAmount The current amount of money in  the bank account."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param income        The amount of money that is credited monthly into the account."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Saving(String name, double currentAmount, double income) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(name, currentAmount);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        type \u003d SAVING;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private double getIncome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return income;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the bank accounts."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return the description of the bank account which includes income and type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return super.getDescription() + \"\\nIncome: \" + new DecimalFormat(\"0.00\").format(getIncome());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds an expenditure tied to this instance of the bank account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of expenditure."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addInExpenditure(Transaction exp, Ui ui) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (exp.getAmount() \u003e this.getCurrentAmount()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            transactions.addExpenditureToList(exp, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            deductFromAmount(exp.getAmount());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all expenditure tied to this bank account."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listAllTransaction(Ui ui) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listTransaction(ui);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listAllDeposit(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listDeposit(ui, displayNum);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void listAllExpenditure(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.listExpenditure(ui, displayNum);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to this bank account."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exId The id of the expenditure in ExpenditureList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui   required for printing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void deleteExpenditure(int exId, Ui ui) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        addToAmount(transactions.deleteExpenditureFromList(exId, ui));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets a new income of the current bank account."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newIncome Income to set."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setIncome(double newIncome) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.income \u003d newIncome;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the expenditure details from the current bank account."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editExpenditureDetails(int expNum, String desc, String amount, String date, String category, Ui ui) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactions.getExpenditureAmount(expNum, ui) \u003c 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 this.getCurrentAmount()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + transactions.getExpenditureAmount(expNum, ui) \u003c Double.parseDouble(amount)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double oldAmount \u003d transactions.getExpenditureAmount(expNum, ui);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double newAmount \u003d transactions.editEx(expNum, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.addToAmount(oldAmount);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.deductFromAmount(newAmount);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the deposit details from the current bank account."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void editDepositDetails(int expNum, String desc, String amount, String date, Ui ui) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (transactions.getTransactionValue(expNum, ui) \u003c 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isEmpty() || amount.isBlank()) \u0026\u0026 this.getCurrentAmount()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + Double.parseDouble(amount) \u003c transactions.getTransactionValue(expNum, ui)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double oldAmount \u003d transactions.getTransactionValue(expNum, ui);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double newAmount \u003d transactions.editDep(expNum, desc, amount, date, ui);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.addToAmount(newAmount);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.deductFromAmount(oldAmount);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to the current bank account."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep Deposit to add."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void addDepositTransaction(Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        transactions.addDepositToList(dep, ui);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        addToAmount(dep.getAmount());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a deposit from the current bank account."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui Ui of OwlMoney."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void deleteDepositTransaction(int index, Ui ui) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        double depositValue \u003d transactions.getTransactionValue(index, ui);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (depositValue \u003c 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (this.getCurrentAmount() \u003c depositValue) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Bank account cannot have a negative amount\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            this.deductFromAmount(transactions.deleteDepositFromList(index, ui));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 6,
      "BrianTKM": 158,
      "shamussy": 33
    }
  },
  {
    "path": "src/main/java/owlmoney/model/profile/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.Bank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.bank.BankList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.model.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The profile class that stores details of the user which includes bank accounts, cards, names."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private BankList bankList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates a new instance of the user profile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newUserName The username that the user desires to use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Profile(String newUserName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.username \u003d newUserName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.bankList \u003d new BankList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the username of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The username of the profile."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new bank account into the BankList stored in this profile."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param newBank an instance of the new bank account."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addNewBank(Bank newBank, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addBank(newBank, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes a bank account from the BankList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName name of the Bank account."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteBank(String bankName, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.deleteBank(bankName, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all the bank accounts in the BankList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listBanks(Ui ui) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankAccount(ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Adds a new expenditure tied to a specific bank account."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param accName The name of the bank account."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp     An expenditure object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui      required for printing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addNewExpenditure(String accName, Transaction exp, Ui ui) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addExpenditure(accName, exp, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure tied to a specific bank account."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param expIndex The index of the expenditure in the expenditureList tied to a specific bank account."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param bankName The name of the bank account."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui       required for printing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteExpenditure(int expIndex, String bankName, Ui ui) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.deleteExp(expIndex, bankName, ui);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists all expenditure tied to a bank account."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param listedBank The bank account name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui         required for printing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listTransaction(String listedBank, Ui ui) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankTransaction(listedBank, ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists deposits from a specific bank account."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param listedBank Bank account to list from."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listDeposit(String listedBank, Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankDeposit(listedBank, ui, displayNum);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists expenditure from a specific bank account."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param listedBank Bank account to list from."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditure to list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listExpenditure(String listedBank, Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.listBankExpenditure(listedBank, ui, displayNum);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific expenditure from a specific bank account."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the expenditure."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank Bank account of expenditure."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description of expenditure."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of expenditure."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date of expenditure."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of expenditure."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editExpenditure(int expNum, String editFromBank, String desc, String amount, String date,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            String category, Ui ui) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.editExp(expNum, editFromBank, desc, amount, date, category, ui);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific savings account."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param name Name of savings account to be edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newName New name of the savings account."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the savings account."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param income New income of the saving account."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void editSavingsAccount(String name, String newName, String amount, String income, Ui ui) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.editSavings(name, newName, amount, income, ui);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes a specific deposit from a specific bank account."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param depIndex Transaction number of the deposit."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param bankName Bank name of the deposit."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void deleteDeposit(int depIndex, String bankName, Ui ui) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.deleteDeposit(bankName, depIndex, ui);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds a new deposit to a specific bank account."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param accName Bank account name."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep Deposit to be added."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addNewDeposit(String accName, Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.addDeposit(accName, dep, ui);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits a specific deposit from a specific bank account."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the deposit."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param editFromBank Bank account of deposit."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description of deposit."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of deposit."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date of deposit."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for deposit."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public  void editDeposit(int expNum, String editFromBank, String desc, String amount, String date, Ui ui) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        bankList.editDep(expNum, editFromBank, desc, amount, date, ui);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 5,
      "BrianTKM": 126,
      "shamussy": 51
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Deposit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Deposit class which represents one expenditure."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Deposit extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which constructs a new deposit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of deposit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount of deposit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date Date of deposit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category Category of deposit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Deposit(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(description,amount,date,category);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 20
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * Expenditure class which represents one expenditure."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class Expenditure extends Transaction {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Constructor which constructs a new Expenditure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param description Description of expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount Amount of expenditure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date Date of expenditure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category Category of expenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Expenditure(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        super(description,amount,date,category);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 21
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * The Transaction class which is abstract where various transaction types will inherit from given that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": " * it is abstract."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Creates an instance of a transaction object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param description The description that describes this expenditure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param amount      The amount of money spent in this instance of expenditure."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param date        The date when this expenditure was made."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param category    The category that this expenditure can be tagged to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public Transaction(String description, double amount, Date date, String category) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the amount of money spent in this transaction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The amount of money spent in this transaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the description of the instance of expenditure."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The description of the expenditure."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the date that this expenditure was made."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The date that the expenditure was made."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        DateFormat temp \u003d new SimpleDateFormat(\"dd EEEE yyyy\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.format(this.date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Gets the category of that the expenditure was tagged to."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @return The category of the expenditure that it was tagged to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private String checkDebitCredit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (this.category.equals(\"deposit\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"[+] \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return \"[-] \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Displays the description, amount added/spent, date and category of transaction."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return description, amount added/spent, date and category of transaction in String format."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getDetails() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return \"Description: \" + getDescription() + \"\\nAmount: \" + checkDebitCredit()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + new DecimalFormat(\"0.00\").format(getAmount()) + \"\\nDate: \" + getDate()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                + \"\\nCategory: \" + getCategory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new description of the transaction."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newDesc New description of transaction."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setDescription(String newDesc) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.description \u003d newDesc;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new amount for the transaction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newAmount New amount for the transaction."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setAmount(double newAmount) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.amount \u003d newAmount;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new date of the transaction."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newDate New date of the transaction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setDate(Date newDate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.date \u003d newDate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Sets the new category of the transaction."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param newCategory New category of the transaction."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    void setCategory(String newCategory) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        this.category \u003d newCategory;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 14,
      "BrianTKM": 71,
      "shamussy": 40
    }
  },
  {
    "path": "src/main/java/owlmoney/model/transaction/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "package owlmoney.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "import owlmoney.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": " * The ExpenditureList class that provides a layer of abstraction for the ArrayList that stores expenditures."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    private ArrayList\u003cTransaction\u003e expLists;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Constructor that creates an arrayList of expenditures."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expLists \u003d new ArrayList\u003cTransaction\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Lists the expenditure in the expenditureList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listTransaction(Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are no transactions\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d 0; i \u003c expLists.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage((i + 1) + \":\\n\" + expLists.get(i).getDetails() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the expenditures in the current bank account."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of expenditures to list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listExpenditure(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are no transactions\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Stack\u003cTransaction\u003e displayStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d expLists.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (!\"deposit\".equals(expLists.get(i).getCategory())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    displayStack.push(expLists.get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    ui.printMessage((i + 1) + \":\\n\" + expLists.get(i).getDetails() + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (counter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (displayStack.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printError(\"No expenditure found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                while (!displayStack.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    displayStack.pop().getDetails();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Lists the deposits in the current bank account."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param displayNum Number of deposits to list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void listDeposit(Ui ui, int displayNum) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are no transactions\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            int counter \u003d displayNum;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            Stack\u003cTransaction\u003e displayStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            for (int i \u003d expLists.size() - 1; i \u003e\u003d 0; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (\"deposit\".equals(expLists.get(i).getCategory())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    displayStack.push(expLists.get(i));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                if (counter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (displayStack.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printError(\"No deposit found\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                while (!displayStack.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                    displayStack.pop().getDetails();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds an expenditure to the transactionList."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param exp an instance of an expenditure."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addExpenditureToList(Transaction exp, Ui ui) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        expLists.add(exp);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added expenditure:\\n\" + exp.getDetails());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Adds an deposit to the transactionList."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param dep an instance of an deposit."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui  required for printing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void addDepositToList(Transaction dep, Ui ui) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expLists.add(dep);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Added deposit:\\n\" + dep.getDetails());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Deletes an expenditure to the expenditureList."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param index index of the expenditure in the expenditureList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * @param ui    required for printing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    //magic int used. change next time"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double deleteExpenditureFromList(int index, Ui ui) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are no transactions in this bank\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - 1) \u003e\u003d 0 \u0026\u0026 (index - 1) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (expLists.get(index - 1).getCategory().equals(\"deposit\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printError(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                Transaction temp \u003d expLists.get(index - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expLists.remove(index - 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printMessage(\"Expenditure deleted:\\n\" + temp.getDetails());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return temp.getAmount();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Out of transaction list range\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific expenditure in the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the expenditure."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description of the expenditure."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the expenditure."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date of the expenditure."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param category New category of the expenditure."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the expenditure."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double editEx(int expNum, String desc, String amount, String date, String category, Ui ui) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Editing transaction...\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - 1).setDescription(desc);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - 1).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expLists.get(expNum - 1).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(category.isBlank() || category.isEmpty())) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - 1).setCategory(category);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Edited details:\\n\" + expLists.get(expNum - 1).getDetails());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return expLists.get(expNum - 1).getAmount();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Edits the specific deposit in the list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param expNum Transaction number of the deposit."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param desc New description of the deposit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param amount New amount of the deposit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param date New date of the deposit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return New amount of the deposit."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double editDep(int expNum, String desc, String amount, String date, Ui ui) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Editing transaction...\\n\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(desc.isBlank() || desc.isEmpty())) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - 1).setDescription(desc);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(amount.isBlank() || amount.isEmpty())) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            expLists.get(expNum - 1).setAmount(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (!(date.isBlank() || date.isEmpty())) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            DateFormat temp \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                expLists.get(expNum - 1).setDate(temp.parse(date));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                //check handled in ParseEditExpenditure"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Edited details:\\n\" + expLists.get(expNum - 1).getDetails());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return expLists.get(expNum - 1).getAmount();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the specific expenditure amount."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the expenditure."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the expenditure."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getExpenditureAmount(int index, Ui ui) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - 1) \u003e\u003d 0 \u0026\u0026 (index - 1) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (\"deposit\".equals(expLists.get(index - 1).getCategory())) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printError(\"The transaction is a deposit\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return -1.0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return expLists.get(index - 1).getAmount();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Out of transaction list range\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Deletes the specific deposit from the current bank account."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deleted deposit."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double deleteDepositFromList(int index, Ui ui) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        Transaction temp \u003d expLists.get(index - 1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        expLists.remove(index - 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        ui.printMessage(\"Deposit deleted:\\n\" + temp.getDetails());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        return temp.getAmount();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * Gets the amount of the deposit specified."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param index Transaction number of the deposit."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @param ui required for printing."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     * @return Amount of the deposit"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public double getTransactionValue(int index, Ui ui) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if (expLists.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"There are no transactions in this bank\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        if ((index - 1) \u003e\u003d 0 \u0026\u0026 (index - 1) \u003c expLists.size()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            if (!\"deposit\".equals(expLists.get(index - 1).getCategory())) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                ui.printError(\"The transaction is not a deposit\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return -1.0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "                return expLists.get(index - 1).getAmount();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            ui.printError(\"Out of transaction list range\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "            return -1.0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 15,
      "BrianTKM": 240,
      "shamussy": 22
    }
  },
  {
    "path": "src/main/java/owlmoney/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Class that handles reading and writing tasks from and to disk."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads tasks from this instance\u0027s path, one task per line during startup of Duke to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * reload last saved state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return An ArrayList of strings, each string representing a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException If the file does not exist or is otherwise inaccessible."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e out \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            out.add(sc.nextLine());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes the given string representations of tasks to this instance\u0027s path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Happens when a modification to any task occurs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param lines The lines to be written, produced by TaskList\u0027s export() method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException If an error occurs while writing the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeFile(ArrayList\u003cString\u003e lines) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new File(\"data/\").mkdirs(); //creates directory if it does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.write(line + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/owlmoney/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Ui handles messages shown to the user of this application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * It does not need to be instantiated with any tasks; these are passed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * as arguments to its methods."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a message line to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param msg The message to print."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a greeting message to the user, which happens at startup."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void greet(String username) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Welcome \" + username + \"!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"Hello! I\u0027m OwlMoney\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        printMessage(\"What can I do for you?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     * Prompts the user for a username on first instance of running this program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    public void firstTimeRun() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "        printMessage(\"Please enter a username:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrianTKM"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message with the given content."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param exceptionMessage The specifics of the error."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printError(String exceptionMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        printMessage(\"☹ OOPS!!! \" + exceptionMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrianTKM": 6,
      "shamussy": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/owlmoney/logic/command/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Class to test the functionality of ReminderCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e stringTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private int num;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when invalid data is provided during intitialization."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_InvalidDataForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"a\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric and cannot be blank\", err.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when empty String is provided during intitialization."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_EmptyStringForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric and cannot be blank\", err.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when white space is provided during intitialization."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_WhiteSpaceForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric and cannot be blank\", err.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct exception is thrown when a large integer value is provided during intitialization."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void reminderCommand_largeIntegerValueForInitializeObject_throwsDukeException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"999999999999999999999999\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new ReminderCommand(input));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The number cannot exceed 9 digits\", err.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of tasks is return when checking for due task in next 10 day."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderfor10Days_expectOneTask() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusDays(8).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 10;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, compare.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of tasks is return when checking for due task in next 1 day."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderforOneDays_expectZeroTask() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusDays(8).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compare.size(), 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of tasks is return when checking for due task in next 0 (current) day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderforZeroDays_expectOneTask() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusHours(1).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compare.size(), 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests whether the correct number of task is being return correctly when searching among multiple tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void checkReminder_checkReminderForMultipleTask_expectThreeTask() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 1 | 14 | \" + now.plusDays(1).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 2 | 14 | \" + now.plusDays(3).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"D | 0 | 9 | meeting 3 | 14 | \" + now.plusDays(5).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 4 | 14 | \" + now.plusDays(7).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stringTasks.add(\"E | 0 | 9 | meeting 5 | 14 | \" + now.plusDays(10).format(inputFormatter).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(stringTasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        num \u003d 5;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e compare \u003d tasks.checkReminder(num);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compare.size(), 3);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 7,
      "-": 111
    }
  },
  {
    "path": "src/test/java/owlmoney/logic/command/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when input is empty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_NoDateAndIndex_throwsDukeException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Reschedule inputs cannot be blank or space.\",err.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when input does not have the correct number of fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_WrongNumberOfFields_throwsDukeException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"1 12/12/2019\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"A task, date and time must be specified.\", err.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String input2 \u003d \"1 12/12/2019 1200 1200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Invalid input.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" Reschedule format is \\\"reschedule \u003ctask number\u003e \u003cdate\u003e \u003ctime\u003e\\\"\", err.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when the task index is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_NonIntTaskIndex_throwsDukeException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"g 12/12/2019 1200\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The task number should be numeric only\", err.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests if the correct exception is thrown when the task index is too large."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_TooBigNumberIndex_throwsDukeException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"99999999999 12/12/2019 1200\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The number must be an integer and cannot exceed 9 digits\", err.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test if the correct exception is thrown when the date is of invalid format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleCommand_WrongDateFormat_throwsDukeException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"2 r/r/rrrr 1200\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e new RescheduleCommand(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The date format is wrong, please try in DD/MM/YYYY format\",err.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test if the date is successfully changed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void rescheduleTask_SuccessfulChangeOfDate_expectChangedDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tempList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            tempList.add(Deadline.create(\"testing /by 12/12/2019 1200\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(tempList.size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String date \u003d \"11/11/2020 2345\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime formattedDate \u003d LocalDateTime.parse(date, inputFormatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            tempList.rescheduleTask(0, formattedDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error...\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][✘] testing (by: Wednesday 11 November 2020 11:45 PM)\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                tempList.get(1).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 3,
      "-": 89
    }
  },
  {
    "path": "src/test/java/owlmoney/logic/command/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import owlmoney.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e viewTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for the correct exception thrown when empty date is provided."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_EmptyDate_throwsDukeException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException error \u003d assertThrows(DukeException.class, () -\u003e new ViewCommand(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The time cannot be empty or space bar\", error.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for the correct exception thrown when invalid format date is provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_InvalidFormatDate_throwsDukeException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"05/25/2019\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException error \u003d assertThrows(DukeException.class, () -\u003e new ViewCommand(input));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The date format is wrong/invalid, please try in DD/MM/YYYY format\", error.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct exception thrown when a non-existent date is provided."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_InvalidDate_throwsDukeException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d \"31/04/2019\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException error \u003d assertThrows(DukeException.class, () -\u003e new ViewCommand(input));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"This date doesn\u0027t exist in the calendar!\", error.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for the correct number of tasks return when there is no task on 1/10/2019."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectZeroTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"T | 0 | 4 | read\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 10, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct number of tasks return when there is one task on 22/09/2019."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectOneTask() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 0 | 4 | 2113 | 14 | 22/9/2019 2359\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 9, 22);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct number of tasks (2) return on specific date despite having multiple tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * with different dates and task description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectTwoTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 0 | 4 | 2113 | 14 | 22/9/2019 2359\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 3 | run | 14 | 20/9/2019 0600\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"T | 0 | 4 | read\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 4 | comp | 14 | 22/9/2019 0600\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 9, 22);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test for correct number of tasks return on specific date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void viewCommand_viewSchedulesOnDate_expectMultipleTasks() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 0 | 4 | 2113 | 14 | 21/9/2019 2359\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 3 | run | 14 | 21/9/2019 0600\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"D | 1 | 4 | work | 14 | 21/9/2019 2300\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 0 | 4 | comp | 14 | 21/9/2019 0800\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        viewTasks.add(\"E | 1 | 8 | carnival | 14 | 21/9/2019 1800\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(viewTasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        date \u003d LocalDate.of(2019, 9, 21);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e checks \u003d tasks.viewFilterByDate(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(checks.size(), 5);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 7,
      "-": 103
    }
  },
  {
    "path": "src/test/java/owlmoney/model/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkDeadlineIsAfterCurrentTest_testDateBeforeCurrent_throwDukeException() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"06/06/2019 1200\", inputFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e Deadline.checkDeadlineIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Time must not be before current time\", err.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkDeadlineIsAfterCurrentTest_testDateBeforeCurrent_returnTrue() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"12/12/2999 1200\", inputFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Deadline.checkDeadlineIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/owlmoney/model/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkEventIsAfterCurrentTest_testDateBeforeCurrent_throwDukeException() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"06/06/2019 1200\", inputFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e Event.checkEventIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Time must not be before current time\", err.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkEventIsAfterCurrentTest_testDateBeforeCurrent_returnTrue() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"12/12/2999 1200\", inputFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Event.checkEventIsAfterCurrent(testDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 3,
      "-": 25
    }
  },
  {
    "path": "src/test/java/owlmoney/model/task/RecurringTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package owlmoney.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests for the normal creation of a recurring task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when unable to create recurring task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createRecurringTask_normalCreation_noError() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        RecurringTask testRecurringTask \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                RecurringTask.create(\"new test recurring task /at 20/9/2019 1205\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(testRecurringTask.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \"[R][✘] new test recurring task (at: Friday 20 September 2019 12:05 PM)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests for the normal creation of a recurring task with old dates and expecting an auto update."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when unable to create recurring task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createRecurringTask_oldDate_updateDate() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime currentDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime oldDate \u003d currentDate.minusDays(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String oldDateString \u003d oldDate.format(inputFormatter).toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime expectedDate \u003d oldDate.plusDays(7);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedDateString \u003d expectedDate.format(displayFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        RecurringTask testRecurringTask \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                RecurringTask.create(\"test old recurring task date /at \" + oldDateString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(testRecurringTask.toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"[R][✘] test old recurring task date (at: \" + expectedDateString + \")\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tests for the DukeException when a description is not entered even with a correct date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test void createRecurringTask_regexCheck_throwError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String wrongDate \u003d \" /at 1/1/2019 1200\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DukeException err \u003d assertThrows(DukeException.class, () -\u003e RecurringTask.create(wrongDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The description of a recurring task cannot be \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"empty or space even when /at is correct\", err.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 1,
      "-": 54
    }
  }
]
